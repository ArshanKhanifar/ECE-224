
Lab_1.elf:     file format elf32-littlenios2
Lab_1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00010af4 memsz 0x00010af4 flags r-x
    LOAD off    0x00011b14 vaddr 0x00810b14 paddr 0x00811824 align 2**12
         filesz 0x00000d10 memsz 0x00000d10 flags rw-
    LOAD off    0x00013534 vaddr 0x00812534 paddr 0x00812534 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010268  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000668  008104ac  008104ac  000114ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000d10  00810b14  00811824  00011b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  00812534  00812534  00013534  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_0      00000000  00812698  00812698  00012824  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012824  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f68  00000000  00000000  00012848  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024c0a  00000000  00000000  000137b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000952c  00000000  00000000  000383ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bb24  00000000  00000000  000418e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002460  00000000  00000000  0004d40c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003daf  00000000  00000000  0004f86c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016ed8  00000000  00000000  0005361b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0006a4f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000017f0  00000000  00000000  0006a558  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006f3a0  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006f3a3  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006f3af  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006f3b0  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006f3b1  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006f3b5  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006f3b9  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0006f3bd  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0006f3c8  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0006f3d3  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0006f3de  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000025  00000000  00000000  0006f3e1  2**0
                  CONTENTS, READONLY
 29 .jdi          00004e0f  00000000  00000000  0006f406  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008fff9  00000000  00000000  00074215  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
008104ac l    d  .rodata	00000000 .rodata
00810b14 l    d  .rwdata	00000000 .rwdata
00812534 l    d  .bss	00000000 .bss
00812698 l    d  .sdram_0	00000000 .sdram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab_1_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 lab_1.c
00800348 l     F .text	000000b0 handle_egm_interrupts
008003f8 l     F .text	00000060 init_egm_pio
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00810592 l     O .rodata	00000010 zeroes.4255
00802a70 l     F .text	000000bc __sbprintf
008105a2 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00802c80 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080483c l     F .text	00000008 __fp_lock
00804844 l     F .text	00000008 __fp_unlock
00804858 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00810b20 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00810f64 l     O .rwdata	00000020 lc_ctype_charset
00810f44 l     O .rwdata	00000020 lc_message_charset
00810f84 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
008105d4 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00807cc8 l     F .text	000000fc __sprint_r.part.0
00810708 l     O .rodata	00000010 blanks.4199
008106f8 l     O .rodata	00000010 zeroes.4200
008090d0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0080a5d4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0080cd00 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080ce20 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080ce4c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080d0fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080d1f0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080d2d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080d4b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00811810 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080d70c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080d854 l     F .text	00000038 alt_dev_reg
0081156c l     O .rwdata	0000002c jtag_uart_0
00811598 l     O .rwdata	00000120 lcd_display
008116b8 l     O .rwdata	000000c4 uart
0081177c l     O .rwdata	00000030 audio_i2c_config
008117ac l     O .rwdata	00000030 Audio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00811814 l     O .rwdata	00000004 colstart
0080db7c l     F .text	000000b4 lcd_write_command
0080dc30 l     F .text	000000d4 lcd_write_data
0080dd04 l     F .text	000000cc lcd_clear_screen
0080ddd0 l     F .text	000001e8 lcd_repaint_screen
0080dfb8 l     F .text	000000c8 lcd_scroll_up
0080e080 l     F .text	000002a0 lcd_handle_escape
0080e808 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080ebfc l     F .text	0000009c altera_avalon_uart_irq
0080ec98 l     F .text	000000e0 altera_avalon_uart_rxirq
0080ed78 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080ef10 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080f13c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080f4bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080f698 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0080f7d0 l     F .text	00000050 alt_get_errno
0080f820 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00810991 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0081256c g     O .bss	00000004 alt_instruction_exception_handler
00807340 g     F .text	00000074 _mprec_log10
0080742c g     F .text	0000008c __any_on
0080963c g     F .text	00000054 _isatty_r
008105e0 g     O .rodata	00000028 __mprec_tinytens
0080d3f8 g     F .text	00000078 alt_main
008009a8 g     F .text	000000a8 _puts_r
00812598 g     O .bss	00000100 alt_irq
008004f4 g     F .text	00000050 get_busy_with_background_task
00809690 g     F .text	0000005c _lseek_r
00811824 g       *ABS*	00000000 __flash_rwdata_start
0080b868 g     F .text	00000084 .hidden __eqdf2
00812698 g       *ABS*	00000000 __alt_heap_start
0080096c g     F .text	0000003c printf
0080989c g     F .text	0000009c _wcrtomb_r
00807bc0 g     F .text	0000005c __sseek
00804b8c g     F .text	00000010 __sinit
00809748 g     F .text	00000138 __swbuf_r
00805638 g     F .text	0000007c _setlocale_r
008049f4 g     F .text	00000068 __sfmoreglue
0080d490 g     F .text	00000020 __malloc_unlock
008005e0 g     F .text	00000084 determine_mode
00806298 g     F .text	0000015c memmove
00804b74 g     F .text	00000018 _cleanup
00806518 g     F .text	000000a8 _Balloc
0080b8ec g     F .text	000000e0 .hidden __gtdf2
0080fc10 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00800544 g     F .text	0000009c get_egm_test_results
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
008095e4 g     F .text	00000058 _fstat_r
00812550 g     O .bss	00000004 errno
00807b3c g     F .text	00000008 __seofread
0081255c g     O .bss	00000004 alt_argv
008197dc g       *ABS*	00000000 _gp
0080fbe0 g     F .text	00000030 usleep
008113ec g     O .rwdata	00000180 alt_fd_list
0080fd88 g     F .text	00000090 alt_find_dev
00806160 g     F .text	00000138 memcpy
00800290 g     F .text	000000b8 background
0080484c g     F .text	0000000c _cleanup_r
0080cb28 g     F .text	000000d0 .hidden __floatsidf
0080f758 g     F .text	00000078 alt_io_redirect
0080b9cc g     F .text	000000e0 .hidden __ltdf2
008104ac g       *ABS*	00000000 __DTOR_END__
00800a50 g     F .text	00000014 puts
0081006c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00807a20 g     F .text	00000074 __fpclassifyd
0080729c g     F .text	000000a4 __ratio
008090ac g     F .text	00000024 __vfiprintf_internal
0080da04 g     F .text	000000e4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00800940 g     F .text	0000002c _printf_r
0080a6f0 g     F .text	00000008 .hidden __udivsi3
0080d14c g     F .text	000000a4 isatty
00810630 g     O .rodata	000000c8 __mprec_tens
008056b4 g     F .text	0000000c __locale_charset
0080ffe0 g     F .text	0000008c alt_icache_flush
0081254c g     O .bss	00000004 __malloc_top_pad
008117e4 g     O .rwdata	00000004 __mb_cur_max
008056e4 g     F .text	0000000c _localeconv_r
00806924 g     F .text	0000003c __i2b
00804ff0 g     F .text	000004c0 __sfvwrite_r
00807a94 g     F .text	00000054 _sbrk_r
008096ec g     F .text	0000005c _read_r
00811804 g     O .rwdata	00000004 alt_max_fd
00809300 g     F .text	000000f0 _fclose_r
0080480c g     F .text	00000030 fflush
00812548 g     O .bss	00000004 __malloc_max_sbrked_mem
0080cf4c g     F .text	000001b0 alt_irq_register
0080a700 g     F .text	0000089c .hidden __adddf3
00807044 g     F .text	0000011c __b2d
0080a044 g     F .text	00000590 .hidden __umoddi3
0080d324 g     F .text	000000d4 lseek
008117dc g     O .rwdata	00000004 _global_impure_ptr
008074b8 g     F .text	00000568 _realloc_r
00812698 g       *ABS*	00000000 __bss_end
0080fadc g     F .text	00000104 alt_tick
00809a84 g     F .text	000005c0 .hidden __udivdi3
00809404 g     F .text	00000184 _fputwc_r
00810608 g     O .rodata	00000028 __mprec_bigtens
00806708 g     F .text	00000104 __s2b
0080cbf8 g     F .text	000000a4 .hidden __floatunsidf
00806dec g     F .text	00000060 __mcmp
0080eb5c g     F .text	000000a0 altera_avalon_uart_init
00804bac g     F .text	00000018 __fp_lock_all
0080fa44 g     F .text	00000098 alt_alarm_stop
00812554 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000d4 alt_irq_handler
008113c4 g     O .rwdata	00000028 alt_dev_null
0080f478 g     F .text	00000044 alt_dcache_flush_all
0080680c g     F .text	00000068 __hi0bits
0080caa0 g     F .text	00000088 .hidden __fixdfsi
00811824 g       *ABS*	00000000 __ram_rwdata_end
008117fc g     O .rwdata	00000008 alt_dev_list
0080d75c g     F .text	000000f8 write
00810b14 g       *ABS*	00000000 __ram_rodata_end
0080ce9c g     F .text	000000b0 fstat
0080b9cc g     F .text	000000e0 .hidden __ledf2
00806b5c g     F .text	00000140 __pow5mult
00807ddc g     F .text	000012d0 ___vfiprintf_internal_r
00812540 g     O .bss	00000004 __nlocale_changed
0080a6f8 g     F .text	00000008 .hidden __umodsi3
00812698 g       *ABS*	00000000 end
0080e320 g     F .text	000004e8 altera_avalon_lcd_16207_write
0080f18c g     F .text	000001ac altera_avalon_uart_write
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
008104ac g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080eaac g     F .text	00000060 altera_avalon_uart_write_fd
0080cc9c g     F .text	00000064 .hidden __clzsi2
0080eb0c g     F .text	00000050 altera_avalon_uart_close_fd
0080dae8 g     F .text	00000094 altera_avalon_jtag_uart_write
00804b9c g     F .text	00000004 __sfp_lock_acquire
00806078 g     F .text	000000e8 memchr
00800afc g     F .text	00001f50 ___vfprintf_internal_r
008007b0 g     F .text	0000007c get_busy_with_specified_number_of_background_tasks
00804d00 g     F .text	000002f0 _free_r
008056c0 g     F .text	00000010 __locale_mb_cur_max
008102e4 g     F .text	00000194 __call_exitprocs
0081253c g     O .bss	00000004 __mlocale_changed
008117e8 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00812564 g     O .bss	00000004 _alt_tick_rate
00806c9c g     F .text	00000150 __lshift
00812568 g     O .bss	00000004 _alt_nticks
0080d500 g     F .text	000000fc read
0080d8c0 g     F .text	00000084 alt_sys_init
008101d0 g     F .text	00000114 __register_exitproc
00806960 g     F .text	000001fc __multiply
00810b14 g       *ABS*	00000000 __ram_rwdata_start
008104ac g       *ABS*	00000000 __ram_rodata_start
00812570 g     O .bss	00000028 __malloc_current_mallinfo
00807160 g     F .text	0000013c __d2b
0080d944 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0080ff2c g     F .text	000000b4 alt_get_fd
0080fc30 g     F .text	00000158 alt_busy_sleep
008091e8 g     F .text	00000054 _close_r
00810154 g     F .text	0000007c memcmp
00812698 g       *ABS*	00000000 __alt_stack_base
00802b2c g     F .text	00000154 __swsetup_r
0080af9c g     F .text	000008cc .hidden __divdf3
00804a5c g     F .text	00000118 __sfp
008073b4 g     F .text	00000078 __copybits
00810fbc g     O .rwdata	00000408 __malloc_av_
00804ba8 g     F .text	00000004 __sinit_lock_release
0080baac g     F .text	00000724 .hidden __muldf3
00807ae8 g     F .text	00000054 __sread
008006a0 g     F .text	00000058 wait_until_impulse_received_and_respond
0080fe18 g     F .text	00000114 alt_find_file
0080f50c g     F .text	000000a4 alt_dev_llist_insert
0080d470 g     F .text	00000020 __malloc_lock
0080d65c g     F .text	000000b0 sbrk
008047b0 g     F .text	0000005c _fflush_r
0080923c g     F .text	000000c4 _calloc_r
00812534 g       *ABS*	00000000 __bss_start
008063f4 g     F .text	00000124 memset
0080082c g     F .text	00000114 main
00812560 g     O .bss	00000004 alt_envp
00812544 g     O .bss	00000004 __malloc_max_total_mem
0080d9a4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00809880 g     F .text	0000001c __swbuf
0080e8b4 g     F .text	00000138 altera_avalon_lcd_16207_init
00807c1c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008093f0 g     F .text	00000014 fclose
00802e80 g     F .text	00001728 _dtoa_r
008058d0 g     F .text	000007a8 _malloc_r
008099f8 g     F .text	00000030 __ascii_wctomb
00811808 g     O .rwdata	00000004 alt_errno
00800664 g     F .text	0000003c respond
008054b0 g     F .text	000000c4 _fwalk
0080a640 g     F .text	00000054 .hidden __divsi3
00804bdc g     F .text	00000124 _malloc_trim_r
008104ac g       *ABS*	00000000 __CTOR_END__
00807c24 g     F .text	000000a4 strcmp
008104ac g       *ABS*	00000000 __flash_rodata_start
008104ac g       *ABS*	00000000 __DTOR_LIST__
00800458 g     F .text	00000070 configure_egm
0080b868 g     F .text	00000084 .hidden __nedf2
0080d88c g     F .text	00000034 alt_irq_init
0080d5fc g     F .text	00000060 alt_release_fd
00810718 g     O .rodata	00000100 .hidden __clz_tab
00812538 g     O .bss	00000004 _PathLocale
00810108 g     F .text	00000014 atexit
00812534 g     O .bss	00000004 egm_edge_capture
0080918c g     F .text	0000005c _write_r
008056f0 g     F .text	0000001c setlocale
008117e0 g     O .rwdata	00000004 _impure_ptr
00812558 g     O .bss	00000004 alt_argc
008045a8 g     F .text	00000208 __sflush_r
00810b14 g     O .rwdata	0000000c log_level_lookup
0080f60c g     F .text	0000005c _do_dtors
008056dc g     F .text	00000008 __locale_cjk_lang
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00806fe4 g     F .text	00000060 __ulp
00804bc4 g     F .text	00000018 __fp_unlock_all
0080e9ec g     F .text	00000060 altera_avalon_lcd_16207_write_fd
008117f4 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080570c g     F .text	0000000c localeconv
008004c8 g     F .text	0000002c check_if_egm_done
00811824 g       *ABS*	00000000 _edata
0080ea4c g     F .text	00000060 altera_avalon_uart_read_fd
00812698 g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
00807b44 g     F .text	0000007c __swrite
008117ec g     O .rwdata	00000004 __malloc_trim_threshold
008056d0 g     F .text	0000000c __locale_msgcharset
0081011c g     F .text	00000038 exit
00805574 g     F .text	000000c4 _fwalk_reent
00806e4c g     F .text	00000198 __mdiff
0080a694 g     F .text	0000005c .hidden __modsi3
00811820 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00804ba0 g     F .text	00000004 __sfp_lock_release
00810890 g     O .rodata	00000101 _ctype_
0080eebc g     F .text	00000054 altera_avalon_uart_close
00810478 g     F .text	00000034 _exit
0080f338 g     F .text	00000140 alt_alarm_start
00805718 g     F .text	000001b8 __smakebuf_r
00800a64 g     F .text	00000098 strlen
0080f8ec g     F .text	00000158 open
008006f8 g     F .text	000000b8 count_safe_number_of_background_tasks
0080b8ec g     F .text	000000e0 .hidden __gedf2
008117f0 g     O .rwdata	00000004 __wctomb
00807dc4 g     F .text	00000018 __sprint_r
0080f668 g     F .text	00000030 alt_icache_flush_all
0081180c g     O .rwdata	00000004 alt_priority_mask
00802a4c g     F .text	00000024 __vfprintf_internal
0080ef60 g     F .text	000001dc altera_avalon_uart_read
00809a28 g     F .text	0000005c _wctomb_r
0080c1d0 g     F .text	000008d0 .hidden __subdf3
00806874 g     F .text	000000b0 __lo0bits
00811818 g     O .rwdata	00000008 alt_alarm_list
0080f5b0 g     F .text	0000005c _do_ctors
00809938 g     F .text	000000c0 wcrtomb
0080cd50 g     F .text	000000d0 close
0080d254 g     F .text	00000080 alt_load
00809588 g     F .text	0000005c fputwc
00000000  w      *UND*	00000000 free
00804ba4 g     F .text	00000004 __sinit_lock_acquire
008065e8 g     F .text	00000120 __multadd
008065c0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001526 	beq	r2,zero,800190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80013c:	00802074 	movhi	r2,129
  800140:	10896604 	addi	r2,r2,9624
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10896604 	addi	r2,r2,9624
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	21000104 	addi	r4,r4,4
  800168:	1105883a 	add	r2,r2,r4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	e17ffd17 	ldw	r5,-12(fp)
  800178:	183ee83a 	callr	r3
#endif
        break;
  80017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800180:	0005313a 	rdctl	r2,ipending
  800184:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800188:	e0bfff17 	ldw	r2,-4(fp)
  80018c:	00000706 	br	8001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
  800190:	e0bffc17 	ldw	r2,-16(fp)
  800194:	1085883a 	add	r2,r2,r2
  800198:	e0bffc15 	stw	r2,-16(fp)
      i++;
  80019c:	e0bffd17 	ldw	r2,-12(fp)
  8001a0:	10800044 	addi	r2,r2,1
  8001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a8:	003fe006 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001b0:	e0bffb17 	ldw	r2,-20(fp)
  8001b4:	103fda1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b8:	0001883a 	nop
}
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a36417 	ldw	r2,-29296(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a36417 	ldw	r2,-29296(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	1809883a 	mov	r4,r3
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	e1bffe17 	ldw	r6,-8(fp)
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_data_end+0xff800248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6a5f714 	ori	gp,gp,38876
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10894d14 	ori	r2,r2,9524

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18c9a614 	ori	r3,r3,9880

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_data_end+0xff800278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080d2540 	call	80d254 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080d3f80 	call	80d3f8 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_data_end+0xff80028c>

00800290 <background>:


/*/
 * Background task
 */
int background(void) {
  800290:	defffa04 	addi	sp,sp,-24
  800294:	df000515 	stw	fp,20(sp)
  800298:	df000504 	addi	fp,sp,20
	#ifdef DEBUG
	int leds = IORD(LED_PIO_BASE, 0);
  80029c:	00804034 	movhi	r2,256
  8002a0:	10844c04 	addi	r2,r2,4400
  8002a4:	10800037 	ldwio	r2,0(r2)
  8002a8:	e0bffd15 	stw	r2,-12(fp)
	leds |= 1;
  8002ac:	e0bffd17 	ldw	r2,-12(fp)
  8002b0:	10800054 	ori	r2,r2,1
  8002b4:	e0bffd15 	stw	r2,-12(fp)
	IOWR(LED_PIO_BASE, 0, leds);
  8002b8:	00804034 	movhi	r2,256
  8002bc:	10844c04 	addi	r2,r2,4400
  8002c0:	e0fffd17 	ldw	r3,-12(fp)
  8002c4:	10c00035 	stwio	r3,0(r2)
	#endif
	int j;
	int x = 0;
  8002c8:	e03ffe15 	stw	zero,-8(fp)
	int grainsize = 4;
  8002cc:	00800104 	movi	r2,4
  8002d0:	e0bfff15 	stw	r2,-4(fp)
	int g_taskProcessed = 0;
  8002d4:	e03ffc15 	stw	zero,-16(fp)

	for(j = 0; j < grainsize; j++)
  8002d8:	e03ffb15 	stw	zero,-20(fp)
  8002dc:	00000606 	br	8002f8 <background+0x68>
	{
		g_taskProcessed++;
  8002e0:	e0bffc17 	ldw	r2,-16(fp)
  8002e4:	10800044 	addi	r2,r2,1
  8002e8:	e0bffc15 	stw	r2,-16(fp)
	int j;
	int x = 0;
	int grainsize = 4;
	int g_taskProcessed = 0;

	for(j = 0; j < grainsize; j++)
  8002ec:	e0bffb17 	ldw	r2,-20(fp)
  8002f0:	10800044 	addi	r2,r2,1
  8002f4:	e0bffb15 	stw	r2,-20(fp)
  8002f8:	e0fffb17 	ldw	r3,-20(fp)
  8002fc:	e0bfff17 	ldw	r2,-4(fp)
  800300:	18bff716 	blt	r3,r2,8002e0 <__alt_data_end+0xff8002e0>
	{
		g_taskProcessed++;
	}

	#ifdef DEBUG
	leds = IORD(LED_PIO_BASE, 0);
  800304:	00804034 	movhi	r2,256
  800308:	10844c04 	addi	r2,r2,4400
  80030c:	10800037 	ldwio	r2,0(r2)
  800310:	e0bffd15 	stw	r2,-12(fp)
	leds &= (~1);
  800314:	e0fffd17 	ldw	r3,-12(fp)
  800318:	00bfff84 	movi	r2,-2
  80031c:	1884703a 	and	r2,r3,r2
  800320:	e0bffd15 	stw	r2,-12(fp)
	IOWR(LED_PIO_BASE, 0, 0);
  800324:	0007883a 	mov	r3,zero
  800328:	00804034 	movhi	r2,256
  80032c:	10844c04 	addi	r2,r2,4400
  800330:	10c00035 	stwio	r3,0(r2)
	#endif
	return x;
  800334:	e0bffe17 	ldw	r2,-8(fp)
}
  800338:	e037883a 	mov	sp,fp
  80033c:	df000017 	ldw	fp,0(sp)
  800340:	dec00104 	addi	sp,sp,4
  800344:	f800283a 	ret

00800348 <handle_egm_interrupts>:
	EGM_REG_MULTI,
	NUM_EGM_REGS
} EgmRegister;


static void handle_egm_interrupts(void* context, alt_u32 id) {
  800348:	defffc04 	addi	sp,sp,-16
  80034c:	df000315 	stw	fp,12(sp)
  800350:	df000304 	addi	fp,sp,12
  800354:	e13ffe15 	stw	r4,-8(fp)
  800358:	e17fff15 	stw	r5,-4(fp)
	#ifdef DEBUG
	int leds = IORD(LED_PIO_BASE, 0);
  80035c:	00804034 	movhi	r2,256
  800360:	10844c04 	addi	r2,r2,4400
  800364:	10800037 	ldwio	r2,0(r2)
  800368:	e0bffd15 	stw	r2,-12(fp)
	leds |= (1<<2);
  80036c:	e0bffd17 	ldw	r2,-12(fp)
  800370:	10800114 	ori	r2,r2,4
  800374:	e0bffd15 	stw	r2,-12(fp)
	IOWR(LED_PIO_BASE, 0, leds);
  800378:	00804034 	movhi	r2,256
  80037c:	10844c04 	addi	r2,r2,4400
  800380:	e0fffd17 	ldw	r3,-12(fp)
  800384:	10c00035 	stwio	r3,0(r2)
	#endif
	// Respond to EGM's response register. Fastest way possible is to set it to 1, then immediately to 0.
	IOWR_ALTERA_AVALON_PIO_DATA(RESPONSE_OUT_BASE, 0x1);
  800388:	00c00044 	movi	r3,1
  80038c:	00804034 	movhi	r2,256
  800390:	10843004 	addi	r2,r2,4288
  800394:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(RESPONSE_OUT_BASE, 0x0);
  800398:	0007883a 	mov	r3,zero
  80039c:	00804034 	movhi	r2,256
  8003a0:	10843004 	addi	r2,r2,4288
  8003a4:	10c00035 	stwio	r3,0(r2)
	// Reset the edge capture register.
	#ifdef DEBUG
	leds = IORD(LED_PIO_BASE, 0);
  8003a8:	00804034 	movhi	r2,256
  8003ac:	10844c04 	addi	r2,r2,4400
  8003b0:	10800037 	ldwio	r2,0(r2)
  8003b4:	e0bffd15 	stw	r2,-12(fp)
	leds &= (~(1 << 2));
  8003b8:	e0fffd17 	ldw	r3,-12(fp)
  8003bc:	00bffec4 	movi	r2,-5
  8003c0:	1884703a 	and	r2,r3,r2
  8003c4:	e0bffd15 	stw	r2,-12(fp)
	IOWR(LED_PIO_BASE, 0, 0);
  8003c8:	0007883a 	mov	r3,zero
  8003cc:	00804034 	movhi	r2,256
  8003d0:	10844c04 	addi	r2,r2,4400
  8003d4:	10c00035 	stwio	r3,0(r2)
	#endif
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(STIMULUS_IN_BASE, 0);
  8003d8:	0007883a 	mov	r3,zero
  8003dc:	00804034 	movhi	r2,256
  8003e0:	10843704 	addi	r2,r2,4316
  8003e4:	10c00035 	stwio	r3,0(r2)

}
  8003e8:	e037883a 	mov	sp,fp
  8003ec:	df000017 	ldw	fp,0(sp)
  8003f0:	dec00104 	addi	sp,sp,4
  8003f4:	f800283a 	ret

008003f8 <init_egm_pio>:


static void init_egm_pio() {
  8003f8:	defffd04 	addi	sp,sp,-12
  8003fc:	dfc00215 	stw	ra,8(sp)
  800400:	df000115 	stw	fp,4(sp)
  800404:	df000104 	addi	fp,sp,4
	void* edge_capture_ptr = (void*) &egm_edge_capture;
  800408:	d0a35604 	addi	r2,gp,-29352
  80040c:	e0bfff15 	stw	r2,-4(fp)
	/* Enable the Stimulus PIO interrupt. */
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(STIMULUS_IN_BASE, 0x1);
  800410:	00c00044 	movi	r3,1
  800414:	00804034 	movhi	r2,256
  800418:	10843604 	addi	r2,r2,4312
  80041c:	10c00035 	stwio	r3,0(r2)
	/* Reset the edge capture register. */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(STIMULUS_IN_BASE, 0x0);
  800420:	0007883a 	mov	r3,zero
  800424:	00804034 	movhi	r2,256
  800428:	10843704 	addi	r2,r2,4316
  80042c:	10c00035 	stwio	r3,0(r2)
	alt_irq_register( STIMULUS_IN_IRQ, edge_capture_ptr, handle_egm_interrupts);
  800430:	01000184 	movi	r4,6
  800434:	e17fff17 	ldw	r5,-4(fp)
  800438:	01802034 	movhi	r6,128
  80043c:	3180d204 	addi	r6,r6,840
  800440:	080cf4c0 	call	80cf4c <alt_irq_register>
}
  800444:	e037883a 	mov	sp,fp
  800448:	dfc00117 	ldw	ra,4(sp)
  80044c:	df000017 	ldw	fp,0(sp)
  800450:	dec00204 	addi	sp,sp,8
  800454:	f800283a 	ret

00800458 <configure_egm>:

void configure_egm(alt_u16 period) {
  800458:	defffd04 	addi	sp,sp,-12
  80045c:	df000215 	stw	fp,8(sp)
  800460:	df000204 	addi	fp,sp,8
  800464:	2005883a 	mov	r2,r4
  800468:	e0bfff0d 	sth	r2,-4(fp)
	// disabling EGM first
	IOWR(EGM_BASE, EGM_REG_ENABLE, 0x0);
  80046c:	0007883a 	mov	r3,zero
  800470:	00804034 	movhi	r2,256
  800474:	10840004 	addi	r2,r2,4096
  800478:	10c00035 	stwio	r3,0(r2)
	// set period
	IOWR(EGM_BASE, EGM_REG_PERIOD, period);
  80047c:	e0ffff0b 	ldhu	r3,-4(fp)
  800480:	00804034 	movhi	r2,256
  800484:	10840204 	addi	r2,r2,4104
  800488:	10c00035 	stwio	r3,0(r2)
	// set pulse width
	alt_u16 pulse_width = period / 2;
  80048c:	e0bfff0b 	ldhu	r2,-4(fp)
  800490:	1004d07a 	srli	r2,r2,1
  800494:	e0bffe0d 	sth	r2,-8(fp)
	IOWR(EGM_BASE, EGM_REG_PULSE_WIDTH, pulse_width);
  800498:	e0fffe0b 	ldhu	r3,-8(fp)
  80049c:	00804034 	movhi	r2,256
  8004a0:	10840304 	addi	r2,r2,4108
  8004a4:	10c00035 	stwio	r3,0(r2)
	// enable EGM
	LOG_DEBUG("Configuring EGM: period: %d, pulse width: %d\n", period, pulse_width);
	LOG_DEBUG("Enabling EGM\n");
	IOWR(EGM_BASE, EGM_REG_ENABLE, 0x1);
  8004a8:	00c00044 	movi	r3,1
  8004ac:	00804034 	movhi	r2,256
  8004b0:	10840004 	addi	r2,r2,4096
  8004b4:	10c00035 	stwio	r3,0(r2)
}
  8004b8:	e037883a 	mov	sp,fp
  8004bc:	df000017 	ldw	fp,0(sp)
  8004c0:	dec00104 	addi	sp,sp,4
  8004c4:	f800283a 	ret

008004c8 <check_if_egm_done>:
	LAB_MODE_INTERRUPT = 0,
	LAB_MODE_POLLING,
	NUM_LAB_MODES
} LabMode;

bool check_if_egm_done(void) {
  8004c8:	deffff04 	addi	sp,sp,-4
  8004cc:	df000015 	stw	fp,0(sp)
  8004d0:	d839883a 	mov	fp,sp
	return IORD(EGM_BASE, EGM_REG_BUSY) == 0x0;
  8004d4:	00804034 	movhi	r2,256
  8004d8:	10840104 	addi	r2,r2,4100
  8004dc:	10800037 	ldwio	r2,0(r2)
  8004e0:	1005003a 	cmpeq	r2,r2,zero
}
  8004e4:	e037883a 	mov	sp,fp
  8004e8:	df000017 	ldw	fp,0(sp)
  8004ec:	dec00104 	addi	sp,sp,4
  8004f0:	f800283a 	ret

008004f4 <get_busy_with_background_task>:

alt_u32 get_busy_with_background_task(void) {
  8004f4:	defffd04 	addi	sp,sp,-12
  8004f8:	dfc00215 	stw	ra,8(sp)
  8004fc:	df000115 	stw	fp,4(sp)
  800500:	df000104 	addi	fp,sp,4
	LOG_DEBUG("Getting busy\n");
	alt_u32 task_counter = 0;
  800504:	e03fff15 	stw	zero,-4(fp)
	while(true) {
		if (check_if_egm_done()) {
  800508:	08004c80 	call	8004c8 <check_if_egm_done>
  80050c:	10803fcc 	andi	r2,r2,255
  800510:	10000126 	beq	r2,zero,800518 <get_busy_with_background_task+0x24>
			LOG_DEBUG("EGM is done!\n");
			break;
  800514:	00000506 	br	80052c <get_busy_with_background_task+0x38>
		}
		background();
  800518:	08002900 	call	800290 <background>
		task_counter++;
  80051c:	e0bfff17 	ldw	r2,-4(fp)
  800520:	10800044 	addi	r2,r2,1
  800524:	e0bfff15 	stw	r2,-4(fp)
	}
  800528:	003ff706 	br	800508 <__alt_data_end+0xff800508>
	return task_counter;
  80052c:	e0bfff17 	ldw	r2,-4(fp)
}
  800530:	e037883a 	mov	sp,fp
  800534:	dfc00117 	ldw	ra,4(sp)
  800538:	df000017 	ldw	fp,0(sp)
  80053c:	dec00204 	addi	sp,sp,8
  800540:	f800283a 	ret

00800544 <get_egm_test_results>:

void get_egm_test_results(alt_u16 period, alt_u32 bg_tasks_run) {
  800544:	defff704 	addi	sp,sp,-36
  800548:	dfc00815 	stw	ra,32(sp)
  80054c:	df000715 	stw	fp,28(sp)
  800550:	df000704 	addi	fp,sp,28
  800554:	2005883a 	mov	r2,r4
  800558:	e17fff15 	stw	r5,-4(fp)
  80055c:	e0bffe0d 	sth	r2,-8(fp)
	// period, pulse width, bg_tasks_run, avg_latency, missed, multi_pulses
	alt_u16 pulse_width = period/2;
  800560:	e0bffe0b 	ldhu	r2,-8(fp)
  800564:	1004d07a 	srli	r2,r2,1
  800568:	e0bffc0d 	sth	r2,-16(fp)
	alt_u16 avg_latency = IORD(EGM_BASE, EGM_REG_AVERAGE_LATENCY);
  80056c:	00804034 	movhi	r2,256
  800570:	10840404 	addi	r2,r2,4112
  800574:	10800037 	ldwio	r2,0(r2)
  800578:	e0bffc8d 	sth	r2,-14(fp)
	alt_u16 missed = IORD(EGM_BASE, EGM_REG_MISSED);
  80057c:	00804034 	movhi	r2,256
  800580:	10840504 	addi	r2,r2,4116
  800584:	10800037 	ldwio	r2,0(r2)
  800588:	e0bffd0d 	sth	r2,-12(fp)
	alt_u16 multi_pulses = IORD(EGM_BASE, EGM_REG_MULTI);
  80058c:	00804034 	movhi	r2,256
  800590:	10840604 	addi	r2,r2,4120
  800594:	10800037 	ldwio	r2,0(r2)
  800598:	e0bffd8d 	sth	r2,-10(fp)
	LOG_INFO("%d, %d, %d, %d, %d, %d\n", period, pulse_width, bg_tasks_run, avg_latency, missed, multi_pulses);
  80059c:	e17ffe0b 	ldhu	r5,-8(fp)
  8005a0:	e1bffc0b 	ldhu	r6,-16(fp)
  8005a4:	e13ffc8b 	ldhu	r4,-14(fp)
  8005a8:	e0fffd0b 	ldhu	r3,-12(fp)
  8005ac:	e0bffd8b 	ldhu	r2,-10(fp)
  8005b0:	d9000015 	stw	r4,0(sp)
  8005b4:	d8c00115 	stw	r3,4(sp)
  8005b8:	d8800215 	stw	r2,8(sp)
  8005bc:	01002074 	movhi	r4,129
  8005c0:	21013104 	addi	r4,r4,1220
  8005c4:	e1ffff17 	ldw	r7,-4(fp)
  8005c8:	080096c0 	call	80096c <printf>
}
  8005cc:	e037883a 	mov	sp,fp
  8005d0:	dfc00117 	ldw	ra,4(sp)
  8005d4:	df000017 	ldw	fp,0(sp)
  8005d8:	dec00204 	addi	sp,sp,8
  8005dc:	f800283a 	ret

008005e0 <determine_mode>:

LabMode determine_mode(void) {
  8005e0:	defffb04 	addi	sp,sp,-20
  8005e4:	dfc00415 	stw	ra,16(sp)
  8005e8:	df000315 	stw	fp,12(sp)
  8005ec:	df000304 	addi	fp,sp,12
	volatile char * switch_pio_address = SWITCH_PIO_BASE;
  8005f0:	00804034 	movhi	r2,256
  8005f4:	10844404 	addi	r2,r2,4368
  8005f8:	e0bffd15 	stw	r2,-12(fp)
	int switch_values = *switch_pio_address;
  8005fc:	e0bffd17 	ldw	r2,-12(fp)
  800600:	10800003 	ldbu	r2,0(r2)
  800604:	10803fcc 	andi	r2,r2,255
  800608:	1080201c 	xori	r2,r2,128
  80060c:	10bfe004 	addi	r2,r2,-128
  800610:	e0bffe15 	stw	r2,-8(fp)
	LabMode mode = switch_values & 1;
  800614:	e0bffe17 	ldw	r2,-8(fp)
  800618:	1080004c 	andi	r2,r2,1
  80061c:	e0bfff15 	stw	r2,-4(fp)
	LOG_INFO("lab mode is %s\n", (mode) ? "Polling" : "Interrupt" );
  800620:	e0bfff17 	ldw	r2,-4(fp)
  800624:	10000326 	beq	r2,zero,800634 <determine_mode+0x54>
  800628:	00802074 	movhi	r2,129
  80062c:	10813704 	addi	r2,r2,1244
  800630:	00000206 	br	80063c <determine_mode+0x5c>
  800634:	00802074 	movhi	r2,129
  800638:	10813904 	addi	r2,r2,1252
  80063c:	01002074 	movhi	r4,129
  800640:	21013c04 	addi	r4,r4,1264
  800644:	100b883a 	mov	r5,r2
  800648:	080096c0 	call	80096c <printf>
	return mode;
  80064c:	e0bfff17 	ldw	r2,-4(fp)
}
  800650:	e037883a 	mov	sp,fp
  800654:	dfc00117 	ldw	ra,4(sp)
  800658:	df000017 	ldw	fp,0(sp)
  80065c:	dec00204 	addi	sp,sp,8
  800660:	f800283a 	ret

00800664 <respond>:

void respond() {
  800664:	deffff04 	addi	sp,sp,-4
  800668:	df000015 	stw	fp,0(sp)
  80066c:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(RESPONSE_OUT_BASE, 0x1);
  800670:	00c00044 	movi	r3,1
  800674:	00804034 	movhi	r2,256
  800678:	10843004 	addi	r2,r2,4288
  80067c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(RESPONSE_OUT_BASE, 0x0);
  800680:	0007883a 	mov	r3,zero
  800684:	00804034 	movhi	r2,256
  800688:	10843004 	addi	r2,r2,4288
  80068c:	10c00035 	stwio	r3,0(r2)
}
  800690:	e037883a 	mov	sp,fp
  800694:	df000017 	ldw	fp,0(sp)
  800698:	dec00104 	addi	sp,sp,4
  80069c:	f800283a 	ret

008006a0 <wait_until_impulse_received_and_respond>:

// waits until impulse received, responds, returns
void wait_until_impulse_received_and_respond(void) {
  8006a0:	defffd04 	addi	sp,sp,-12
  8006a4:	dfc00215 	stw	ra,8(sp)
  8006a8:	df000115 	stw	fp,4(sp)
  8006ac:	df000104 	addi	fp,sp,4
	alt_u16 counter = 0;
  8006b0:	e03fff0d 	sth	zero,-4(fp)
	while (IORD_ALTERA_AVALON_PIO_DATA(STIMULUS_IN_BASE) == 0 && ++counter<TIMEOUT) {}
  8006b4:	0001883a 	nop
  8006b8:	00804034 	movhi	r2,256
  8006bc:	10843404 	addi	r2,r2,4304
  8006c0:	10800037 	ldwio	r2,0(r2)
  8006c4:	1000061e 	bne	r2,zero,8006e0 <wait_until_impulse_received_and_respond+0x40>
  8006c8:	e0bfff0b 	ldhu	r2,-4(fp)
  8006cc:	10800044 	addi	r2,r2,1
  8006d0:	e0bfff0d 	sth	r2,-4(fp)
  8006d4:	e0bfff0b 	ldhu	r2,-4(fp)
  8006d8:	1080fa30 	cmpltui	r2,r2,1000
  8006dc:	103ff61e 	bne	r2,zero,8006b8 <__alt_data_end+0xff8006b8>
	respond();
  8006e0:	08006640 	call	800664 <respond>
}
  8006e4:	e037883a 	mov	sp,fp
  8006e8:	dfc00117 	ldw	ra,4(sp)
  8006ec:	df000017 	ldw	fp,0(sp)
  8006f0:	dec00204 	addi	sp,sp,8
  8006f4:	f800283a 	ret

008006f8 <count_safe_number_of_background_tasks>:

alt_u16 count_safe_number_of_background_tasks(alt_u16 period) {
  8006f8:	defffb04 	addi	sp,sp,-20
  8006fc:	dfc00415 	stw	ra,16(sp)
  800700:	df000315 	stw	fp,12(sp)
  800704:	df000304 	addi	fp,sp,12
  800708:	2005883a 	mov	r2,r4
  80070c:	e0bfff0d 	sth	r2,-4(fp)
	if (period < 700) {
  800710:	e0bfff0b 	ldhu	r2,-4(fp)
  800714:	1080af28 	cmpgeui	r2,r2,700
  800718:	1000021e 	bne	r2,zero,800724 <count_safe_number_of_background_tasks+0x2c>
		return 0;
  80071c:	0005883a 	mov	r2,zero
  800720:	00001e06 	br	80079c <count_safe_number_of_background_tasks+0xa4>
	}
	alt_u16 task_counter = 0;
  800724:	e03ffd0d 	sth	zero,-12(fp)
	bool passed_first_half_cycle = false;
  800728:	e03ffd85 	stb	zero,-10(fp)
	//configure the EGM
	configure_egm(period);
  80072c:	e0bfff0b 	ldhu	r2,-4(fp)
  800730:	1009883a 	mov	r4,r2
  800734:	08004580 	call	800458 <configure_egm>
	// begin running background tasks
	while (true) {
		// check if we passed the first half cycle.
		if (IORD_ALTERA_AVALON_PIO_DATA(STIMULUS_IN_BASE) == 0) {
  800738:	00804034 	movhi	r2,256
  80073c:	10843404 	addi	r2,r2,4304
  800740:	10800037 	ldwio	r2,0(r2)
  800744:	1000021e 	bne	r2,zero,800750 <count_safe_number_of_background_tasks+0x58>
			passed_first_half_cycle = true;
  800748:	00800044 	movi	r2,1
  80074c:	e0bffd85 	stb	r2,-10(fp)
		}
		// check if stimulus is high again.
		if (passed_first_half_cycle && (IORD_ALTERA_AVALON_PIO_DATA(STIMULUS_IN_BASE) == 1)) {
  800750:	e0bffd83 	ldbu	r2,-10(fp)
  800754:	10000c26 	beq	r2,zero,800788 <count_safe_number_of_background_tasks+0x90>
  800758:	00804034 	movhi	r2,256
  80075c:	10843404 	addi	r2,r2,4304
  800760:	10800037 	ldwio	r2,0(r2)
  800764:	10800058 	cmpnei	r2,r2,1
  800768:	1000071e 	bne	r2,zero,800788 <count_safe_number_of_background_tasks+0x90>
			respond();
  80076c:	08006640 	call	800664 <respond>
			break;
  800770:	0001883a 	nop
		}
		background();
		task_counter+=1;
	}
	alt_u16 safe_num = task_counter - 1;
  800774:	e0bffd0b 	ldhu	r2,-12(fp)
  800778:	10bfffc4 	addi	r2,r2,-1
  80077c:	e0bffe0d 	sth	r2,-8(fp)
	LOG_DEBUG("Safe number of tasks: %d\n", safe_num);
	return safe_num;
  800780:	e0bffe0b 	ldhu	r2,-8(fp)
  800784:	00000506 	br	80079c <count_safe_number_of_background_tasks+0xa4>
		// check if stimulus is high again.
		if (passed_first_half_cycle && (IORD_ALTERA_AVALON_PIO_DATA(STIMULUS_IN_BASE) == 1)) {
			respond();
			break;
		}
		background();
  800788:	08002900 	call	800290 <background>
		task_counter+=1;
  80078c:	e0bffd0b 	ldhu	r2,-12(fp)
  800790:	10800044 	addi	r2,r2,1
  800794:	e0bffd0d 	sth	r2,-12(fp)
	}
  800798:	003fe706 	br	800738 <__alt_data_end+0xff800738>
	alt_u16 safe_num = task_counter - 1;
	LOG_DEBUG("Safe number of tasks: %d\n", safe_num);
	return safe_num;
}
  80079c:	e037883a 	mov	sp,fp
  8007a0:	dfc00117 	ldw	ra,4(sp)
  8007a4:	df000017 	ldw	fp,0(sp)
  8007a8:	dec00204 	addi	sp,sp,8
  8007ac:	f800283a 	ret

008007b0 <get_busy_with_specified_number_of_background_tasks>:


// Safe number of tasks we can run to ensure next pulse is detected.
alt_u32 get_busy_with_specified_number_of_background_tasks(alt_u16 safe_num_tasks) {
  8007b0:	defffb04 	addi	sp,sp,-20
  8007b4:	dfc00415 	stw	ra,16(sp)
  8007b8:	df000315 	stw	fp,12(sp)
  8007bc:	df000304 	addi	fp,sp,12
  8007c0:	2005883a 	mov	r2,r4
  8007c4:	e0bfff0d 	sth	r2,-4(fp)
	LOG_DEBUG("Getting busy with %d background tasks\n", safe_num_tasks);
	alt_u32 task_counter = 0;
  8007c8:	e03ffd15 	stw	zero,-12(fp)
	while(true) {
		alt_u16 count;
		for (count = 0; count < safe_num_tasks; count++) {
  8007cc:	e03ffe0d 	sth	zero,-8(fp)
  8007d0:	00000706 	br	8007f0 <get_busy_with_specified_number_of_background_tasks+0x40>
			background();
  8007d4:	08002900 	call	800290 <background>
			task_counter++;
  8007d8:	e0bffd17 	ldw	r2,-12(fp)
  8007dc:	10800044 	addi	r2,r2,1
  8007e0:	e0bffd15 	stw	r2,-12(fp)
alt_u32 get_busy_with_specified_number_of_background_tasks(alt_u16 safe_num_tasks) {
	LOG_DEBUG("Getting busy with %d background tasks\n", safe_num_tasks);
	alt_u32 task_counter = 0;
	while(true) {
		alt_u16 count;
		for (count = 0; count < safe_num_tasks; count++) {
  8007e4:	e0bffe0b 	ldhu	r2,-8(fp)
  8007e8:	10800044 	addi	r2,r2,1
  8007ec:	e0bffe0d 	sth	r2,-8(fp)
  8007f0:	e0fffe0b 	ldhu	r3,-8(fp)
  8007f4:	e0bfff0b 	ldhu	r2,-4(fp)
  8007f8:	18bff636 	bltu	r3,r2,8007d4 <__alt_data_end+0xff8007d4>
			background();
			task_counter++;
		}
		if (check_if_egm_done()) {
  8007fc:	08004c80 	call	8004c8 <check_if_egm_done>
  800800:	10803fcc 	andi	r2,r2,255
  800804:	10000126 	beq	r2,zero,80080c <get_busy_with_specified_number_of_background_tasks+0x5c>
			LOG_DEBUG("EGM is done!\n");
			break;
  800808:	00000206 	br	800814 <get_busy_with_specified_number_of_background_tasks+0x64>
		}
		wait_until_impulse_received_and_respond();
  80080c:	08006a00 	call	8006a0 <wait_until_impulse_received_and_respond>
	}
  800810:	003fee06 	br	8007cc <__alt_data_end+0xff8007cc>
	return task_counter;
  800814:	e0bffd17 	ldw	r2,-12(fp)
}
  800818:	e037883a 	mov	sp,fp
  80081c:	dfc00117 	ldw	ra,4(sp)
  800820:	df000017 	ldw	fp,0(sp)
  800824:	dec00204 	addi	sp,sp,8
  800828:	f800283a 	ret

0080082c <main>:

int main() {
  80082c:	defff704 	addi	sp,sp,-36
  800830:	dfc00815 	stw	ra,32(sp)
  800834:	df000715 	stw	fp,28(sp)
  800838:	df000704 	addi	fp,sp,28
	LabMode mode = determine_mode();
  80083c:	08005e00 	call	8005e0 <determine_mode>
  800840:	e0bffa15 	stw	r2,-24(fp)
	LOG_INFO("period, pulse_width, bg_tasks_run, avg_latency, missed, multi_pulses\n");
  800844:	01002074 	movhi	r4,129
  800848:	21014004 	addi	r4,r4,1280
  80084c:	0800a500 	call	800a50 <puts>
	if (mode == LAB_MODE_INTERRUPT) {
  800850:	e0bffa17 	ldw	r2,-24(fp)
  800854:	1000181e 	bne	r2,zero,8008b8 <main+0x8c>
		init_egm_pio();
  800858:	08003f80 	call	8003f8 <init_egm_pio>
		alt_u16 period;
		alt_u16 start_period = 2, end_period = 5000;
  80085c:	00800084 	movi	r2,2
  800860:	e0bffb0d 	sth	r2,-20(fp)
  800864:	0084e204 	movi	r2,5000
  800868:	e0bffb8d 	sth	r2,-18(fp)
		for (period = start_period; period <= end_period; period += 2) {
  80086c:	e0bffb0b 	ldhu	r2,-20(fp)
  800870:	e0bff90d 	sth	r2,-28(fp)
  800874:	00000c06 	br	8008a8 <main+0x7c>
			configure_egm(period);
  800878:	e0bff90b 	ldhu	r2,-28(fp)
  80087c:	1009883a 	mov	r4,r2
  800880:	08004580 	call	800458 <configure_egm>
			alt_u32 num_tasks = get_busy_with_background_task();
  800884:	08004f40 	call	8004f4 <get_busy_with_background_task>
  800888:	e0bffc15 	stw	r2,-16(fp)
			get_egm_test_results(period, num_tasks);
  80088c:	e0bff90b 	ldhu	r2,-28(fp)
  800890:	1009883a 	mov	r4,r2
  800894:	e17ffc17 	ldw	r5,-16(fp)
  800898:	08005440 	call	800544 <get_egm_test_results>
	LOG_INFO("period, pulse_width, bg_tasks_run, avg_latency, missed, multi_pulses\n");
	if (mode == LAB_MODE_INTERRUPT) {
		init_egm_pio();
		alt_u16 period;
		alt_u16 start_period = 2, end_period = 5000;
		for (period = start_period; period <= end_period; period += 2) {
  80089c:	e0bff90b 	ldhu	r2,-28(fp)
  8008a0:	10800084 	addi	r2,r2,2
  8008a4:	e0bff90d 	sth	r2,-28(fp)
  8008a8:	e0bff90b 	ldhu	r2,-28(fp)
  8008ac:	e0fffb8b 	ldhu	r3,-18(fp)
  8008b0:	18bff12e 	bgeu	r3,r2,800878 <__alt_data_end+0xff800878>
  8008b4:	00001906 	br	80091c <main+0xf0>
			alt_u32 num_tasks = get_busy_with_background_task();
			get_egm_test_results(period, num_tasks);
		}
	} else {
		alt_u16 period;
		alt_u16 start_period = 2, end_period = 5000;
  8008b8:	00800084 	movi	r2,2
  8008bc:	e0bffd0d 	sth	r2,-12(fp)
  8008c0:	0084e204 	movi	r2,5000
  8008c4:	e0bffd8d 	sth	r2,-10(fp)
		for (period = start_period; period <= end_period; period += 2) {
  8008c8:	e0bffd0b 	ldhu	r2,-12(fp)
  8008cc:	e0bff98d 	sth	r2,-26(fp)
  8008d0:	00000f06 	br	800910 <main+0xe4>
			// Characterization: find number of background tasks
			alt_u16 safe_num_tasks = count_safe_number_of_background_tasks(period);
  8008d4:	e0bff98b 	ldhu	r2,-26(fp)
  8008d8:	1009883a 	mov	r4,r2
  8008dc:	08006f80 	call	8006f8 <count_safe_number_of_background_tasks>
  8008e0:	e0bffe0d 	sth	r2,-8(fp)
			alt_u32 num_tasks = get_busy_with_specified_number_of_background_tasks(safe_num_tasks);
  8008e4:	e0bffe0b 	ldhu	r2,-8(fp)
  8008e8:	1009883a 	mov	r4,r2
  8008ec:	08007b00 	call	8007b0 <get_busy_with_specified_number_of_background_tasks>
  8008f0:	e0bfff15 	stw	r2,-4(fp)
			LOG_DEBUG("done running background tasks\n");
			get_egm_test_results(period, num_tasks);
  8008f4:	e0bff98b 	ldhu	r2,-26(fp)
  8008f8:	1009883a 	mov	r4,r2
  8008fc:	e17fff17 	ldw	r5,-4(fp)
  800900:	08005440 	call	800544 <get_egm_test_results>
			get_egm_test_results(period, num_tasks);
		}
	} else {
		alt_u16 period;
		alt_u16 start_period = 2, end_period = 5000;
		for (period = start_period; period <= end_period; period += 2) {
  800904:	e0bff98b 	ldhu	r2,-26(fp)
  800908:	10800084 	addi	r2,r2,2
  80090c:	e0bff98d 	sth	r2,-26(fp)
  800910:	e0bff98b 	ldhu	r2,-26(fp)
  800914:	e0fffd8b 	ldhu	r3,-10(fp)
  800918:	18bfee2e 	bgeu	r3,r2,8008d4 <__alt_data_end+0xff8008d4>
			alt_u32 num_tasks = get_busy_with_specified_number_of_background_tasks(safe_num_tasks);
			LOG_DEBUG("done running background tasks\n");
			get_egm_test_results(period, num_tasks);
		}
	}
	LOG_INFO("Bye\n");
  80091c:	01002074 	movhi	r4,129
  800920:	21015204 	addi	r4,r4,1352
  800924:	0800a500 	call	800a50 <puts>
	return 0;
  800928:	0005883a 	mov	r2,zero
}
  80092c:	e037883a 	mov	sp,fp
  800930:	dfc00117 	ldw	ra,4(sp)
  800934:	df000017 	ldw	fp,0(sp)
  800938:	dec00204 	addi	sp,sp,8
  80093c:	f800283a 	ret

00800940 <_printf_r>:
  800940:	defffd04 	addi	sp,sp,-12
  800944:	dfc00015 	stw	ra,0(sp)
  800948:	d9800115 	stw	r6,4(sp)
  80094c:	d9c00215 	stw	r7,8(sp)
  800950:	280d883a 	mov	r6,r5
  800954:	21400217 	ldw	r5,8(r4)
  800958:	d9c00104 	addi	r7,sp,4
  80095c:	0800afc0 	call	800afc <___vfprintf_internal_r>
  800960:	dfc00017 	ldw	ra,0(sp)
  800964:	dec00304 	addi	sp,sp,12
  800968:	f800283a 	ret

0080096c <printf>:
  80096c:	defffc04 	addi	sp,sp,-16
  800970:	dfc00015 	stw	ra,0(sp)
  800974:	d9400115 	stw	r5,4(sp)
  800978:	d9800215 	stw	r6,8(sp)
  80097c:	d9c00315 	stw	r7,12(sp)
  800980:	00802074 	movhi	r2,129
  800984:	1085f804 	addi	r2,r2,6112
  800988:	10800017 	ldw	r2,0(r2)
  80098c:	200b883a 	mov	r5,r4
  800990:	d9800104 	addi	r6,sp,4
  800994:	11000217 	ldw	r4,8(r2)
  800998:	0802a4c0 	call	802a4c <__vfprintf_internal>
  80099c:	dfc00017 	ldw	ra,0(sp)
  8009a0:	dec00404 	addi	sp,sp,16
  8009a4:	f800283a 	ret

008009a8 <_puts_r>:
  8009a8:	defff604 	addi	sp,sp,-40
  8009ac:	dc000715 	stw	r16,28(sp)
  8009b0:	2021883a 	mov	r16,r4
  8009b4:	2809883a 	mov	r4,r5
  8009b8:	dc400815 	stw	r17,32(sp)
  8009bc:	dfc00915 	stw	ra,36(sp)
  8009c0:	2823883a 	mov	r17,r5
  8009c4:	0800a640 	call	800a64 <strlen>
  8009c8:	81400217 	ldw	r5,8(r16)
  8009cc:	11000044 	addi	r4,r2,1
  8009d0:	d8800115 	stw	r2,4(sp)
  8009d4:	00802074 	movhi	r2,129
  8009d8:	2980030b 	ldhu	r6,12(r5)
  8009dc:	10815304 	addi	r2,r2,1356
  8009e0:	d8800215 	stw	r2,8(sp)
  8009e4:	00800044 	movi	r2,1
  8009e8:	d8800315 	stw	r2,12(sp)
  8009ec:	00800084 	movi	r2,2
  8009f0:	d8800515 	stw	r2,20(sp)
  8009f4:	dc400015 	stw	r17,0(sp)
  8009f8:	d9000615 	stw	r4,24(sp)
  8009fc:	dec00415 	stw	sp,16(sp)
  800a00:	3088000c 	andi	r2,r6,8192
  800a04:	1000061e 	bne	r2,zero,800a20 <_puts_r+0x78>
  800a08:	29001917 	ldw	r4,100(r5)
  800a0c:	00b7ffc4 	movi	r2,-8193
  800a10:	31880014 	ori	r6,r6,8192
  800a14:	2084703a 	and	r2,r4,r2
  800a18:	2980030d 	sth	r6,12(r5)
  800a1c:	28801915 	stw	r2,100(r5)
  800a20:	8009883a 	mov	r4,r16
  800a24:	d9800404 	addi	r6,sp,16
  800a28:	0804ff00 	call	804ff0 <__sfvwrite_r>
  800a2c:	1000061e 	bne	r2,zero,800a48 <_puts_r+0xa0>
  800a30:	00800284 	movi	r2,10
  800a34:	dfc00917 	ldw	ra,36(sp)
  800a38:	dc400817 	ldw	r17,32(sp)
  800a3c:	dc000717 	ldw	r16,28(sp)
  800a40:	dec00a04 	addi	sp,sp,40
  800a44:	f800283a 	ret
  800a48:	00bfffc4 	movi	r2,-1
  800a4c:	003ff906 	br	800a34 <__alt_data_end+0xff800a34>

00800a50 <puts>:
  800a50:	00802074 	movhi	r2,129
  800a54:	1085f804 	addi	r2,r2,6112
  800a58:	200b883a 	mov	r5,r4
  800a5c:	11000017 	ldw	r4,0(r2)
  800a60:	08009a81 	jmpi	8009a8 <_puts_r>

00800a64 <strlen>:
  800a64:	208000cc 	andi	r2,r4,3
  800a68:	10002026 	beq	r2,zero,800aec <strlen+0x88>
  800a6c:	20800007 	ldb	r2,0(r4)
  800a70:	10002026 	beq	r2,zero,800af4 <strlen+0x90>
  800a74:	2005883a 	mov	r2,r4
  800a78:	00000206 	br	800a84 <strlen+0x20>
  800a7c:	10c00007 	ldb	r3,0(r2)
  800a80:	18001826 	beq	r3,zero,800ae4 <strlen+0x80>
  800a84:	10800044 	addi	r2,r2,1
  800a88:	10c000cc 	andi	r3,r2,3
  800a8c:	183ffb1e 	bne	r3,zero,800a7c <__alt_data_end+0xff800a7c>
  800a90:	10c00017 	ldw	r3,0(r2)
  800a94:	01ffbff4 	movhi	r7,65279
  800a98:	39ffbfc4 	addi	r7,r7,-257
  800a9c:	00ca303a 	nor	r5,zero,r3
  800aa0:	01a02074 	movhi	r6,32897
  800aa4:	19c7883a 	add	r3,r3,r7
  800aa8:	31a02004 	addi	r6,r6,-32640
  800aac:	1946703a 	and	r3,r3,r5
  800ab0:	1986703a 	and	r3,r3,r6
  800ab4:	1800091e 	bne	r3,zero,800adc <strlen+0x78>
  800ab8:	10800104 	addi	r2,r2,4
  800abc:	10c00017 	ldw	r3,0(r2)
  800ac0:	19cb883a 	add	r5,r3,r7
  800ac4:	00c6303a 	nor	r3,zero,r3
  800ac8:	28c6703a 	and	r3,r5,r3
  800acc:	1986703a 	and	r3,r3,r6
  800ad0:	183ff926 	beq	r3,zero,800ab8 <__alt_data_end+0xff800ab8>
  800ad4:	00000106 	br	800adc <strlen+0x78>
  800ad8:	10800044 	addi	r2,r2,1
  800adc:	10c00007 	ldb	r3,0(r2)
  800ae0:	183ffd1e 	bne	r3,zero,800ad8 <__alt_data_end+0xff800ad8>
  800ae4:	1105c83a 	sub	r2,r2,r4
  800ae8:	f800283a 	ret
  800aec:	2005883a 	mov	r2,r4
  800af0:	003fe706 	br	800a90 <__alt_data_end+0xff800a90>
  800af4:	0005883a 	mov	r2,zero
  800af8:	f800283a 	ret

00800afc <___vfprintf_internal_r>:
  800afc:	deffb604 	addi	sp,sp,-296
  800b00:	dfc04915 	stw	ra,292(sp)
  800b04:	ddc04715 	stw	r23,284(sp)
  800b08:	dd804615 	stw	r22,280(sp)
  800b0c:	282f883a 	mov	r23,r5
  800b10:	202d883a 	mov	r22,r4
  800b14:	d9802a15 	stw	r6,168(sp)
  800b18:	d9c02d15 	stw	r7,180(sp)
  800b1c:	df004815 	stw	fp,288(sp)
  800b20:	dd404515 	stw	r21,276(sp)
  800b24:	dd004415 	stw	r20,272(sp)
  800b28:	dcc04315 	stw	r19,268(sp)
  800b2c:	dc804215 	stw	r18,264(sp)
  800b30:	dc404115 	stw	r17,260(sp)
  800b34:	dc004015 	stw	r16,256(sp)
  800b38:	08056e40 	call	8056e4 <_localeconv_r>
  800b3c:	10800017 	ldw	r2,0(r2)
  800b40:	1009883a 	mov	r4,r2
  800b44:	d8803515 	stw	r2,212(sp)
  800b48:	0800a640 	call	800a64 <strlen>
  800b4c:	d8803815 	stw	r2,224(sp)
  800b50:	b0000226 	beq	r22,zero,800b5c <___vfprintf_internal_r+0x60>
  800b54:	b0800e17 	ldw	r2,56(r22)
  800b58:	1000e126 	beq	r2,zero,800ee0 <___vfprintf_internal_r+0x3e4>
  800b5c:	b880030b 	ldhu	r2,12(r23)
  800b60:	10c8000c 	andi	r3,r2,8192
  800b64:	1800061e 	bne	r3,zero,800b80 <___vfprintf_internal_r+0x84>
  800b68:	b9001917 	ldw	r4,100(r23)
  800b6c:	00f7ffc4 	movi	r3,-8193
  800b70:	10880014 	ori	r2,r2,8192
  800b74:	20c6703a 	and	r3,r4,r3
  800b78:	b880030d 	sth	r2,12(r23)
  800b7c:	b8c01915 	stw	r3,100(r23)
  800b80:	10c0020c 	andi	r3,r2,8
  800b84:	1800a726 	beq	r3,zero,800e24 <___vfprintf_internal_r+0x328>
  800b88:	b8c00417 	ldw	r3,16(r23)
  800b8c:	1800a526 	beq	r3,zero,800e24 <___vfprintf_internal_r+0x328>
  800b90:	1080068c 	andi	r2,r2,26
  800b94:	00c00284 	movi	r3,10
  800b98:	10c0aa26 	beq	r2,r3,800e44 <___vfprintf_internal_r+0x348>
  800b9c:	dac01e04 	addi	r11,sp,120
  800ba0:	db001dc4 	addi	r12,sp,119
  800ba4:	d8800404 	addi	r2,sp,16
  800ba8:	05002074 	movhi	r20,129
  800bac:	dac02815 	stw	r11,160(sp)
  800bb0:	5b17c83a 	sub	r11,r11,r12
  800bb4:	a5016484 	addi	r20,r20,1426
  800bb8:	db002915 	stw	r12,164(sp)
  800bbc:	d8801e15 	stw	r2,120(sp)
  800bc0:	d8002015 	stw	zero,128(sp)
  800bc4:	d8001f15 	stw	zero,124(sp)
  800bc8:	d8003315 	stw	zero,204(sp)
  800bcc:	d8003715 	stw	zero,220(sp)
  800bd0:	d8003915 	stw	zero,228(sp)
  800bd4:	1011883a 	mov	r8,r2
  800bd8:	d8003b15 	stw	zero,236(sp)
  800bdc:	d8003a15 	stw	zero,232(sp)
  800be0:	d8002f15 	stw	zero,188(sp)
  800be4:	dac03c15 	stw	r11,240(sp)
  800be8:	db002a17 	ldw	r12,168(sp)
  800bec:	60800007 	ldb	r2,0(r12)
  800bf0:	1000be26 	beq	r2,zero,800eec <___vfprintf_internal_r+0x3f0>
  800bf4:	00c00944 	movi	r3,37
  800bf8:	10c0bc26 	beq	r2,r3,800eec <___vfprintf_internal_r+0x3f0>
  800bfc:	6021883a 	mov	r16,r12
  800c00:	00000106 	br	800c08 <___vfprintf_internal_r+0x10c>
  800c04:	10c08426 	beq	r2,r3,800e18 <___vfprintf_internal_r+0x31c>
  800c08:	84000044 	addi	r16,r16,1
  800c0c:	80800007 	ldb	r2,0(r16)
  800c10:	103ffc1e 	bne	r2,zero,800c04 <__alt_data_end+0xff800c04>
  800c14:	dac02a17 	ldw	r11,168(sp)
  800c18:	82e3c83a 	sub	r17,r16,r11
  800c1c:	88000f26 	beq	r17,zero,800c5c <___vfprintf_internal_r+0x160>
  800c20:	d8c02017 	ldw	r3,128(sp)
  800c24:	d8801f17 	ldw	r2,124(sp)
  800c28:	dac02a17 	ldw	r11,168(sp)
  800c2c:	1c47883a 	add	r3,r3,r17
  800c30:	10800044 	addi	r2,r2,1
  800c34:	d8c02015 	stw	r3,128(sp)
  800c38:	42c00015 	stw	r11,0(r8)
  800c3c:	44400115 	stw	r17,4(r8)
  800c40:	d8801f15 	stw	r2,124(sp)
  800c44:	00c001c4 	movi	r3,7
  800c48:	18809316 	blt	r3,r2,800e98 <___vfprintf_internal_r+0x39c>
  800c4c:	42000204 	addi	r8,r8,8
  800c50:	db002f17 	ldw	r12,188(sp)
  800c54:	6459883a 	add	r12,r12,r17
  800c58:	db002f15 	stw	r12,188(sp)
  800c5c:	80800007 	ldb	r2,0(r16)
  800c60:	10009426 	beq	r2,zero,800eb4 <___vfprintf_internal_r+0x3b8>
  800c64:	80800044 	addi	r2,r16,1
  800c68:	84000047 	ldb	r16,1(r16)
  800c6c:	d8002785 	stb	zero,158(sp)
  800c70:	000d883a 	mov	r6,zero
  800c74:	027fffc4 	movi	r9,-1
  800c78:	d8002e15 	stw	zero,184(sp)
  800c7c:	0023883a 	mov	r17,zero
  800c80:	01001604 	movi	r4,88
  800c84:	01400244 	movi	r5,9
  800c88:	02800a84 	movi	r10,42
  800c8c:	01c01b04 	movi	r7,108
  800c90:	10c00044 	addi	r3,r2,1
  800c94:	80bff804 	addi	r2,r16,-32
  800c98:	2082cd36 	bltu	r4,r2,8017d0 <___vfprintf_internal_r+0xcd4>
  800c9c:	100490ba 	slli	r2,r2,2
  800ca0:	02c02034 	movhi	r11,128
  800ca4:	5ac32d04 	addi	r11,r11,3252
  800ca8:	12c5883a 	add	r2,r2,r11
  800cac:	10800017 	ldw	r2,0(r2)
  800cb0:	1000683a 	jmp	r2
  800cb4:	008015e8 	cmpgeui	r2,zero,87
  800cb8:	008017d0 	cmplti	r2,zero,95
  800cbc:	008017d0 	cmplti	r2,zero,95
  800cc0:	00801738 	rdprs	r2,zero,92
  800cc4:	008017d0 	cmplti	r2,zero,95
  800cc8:	008017d0 	cmplti	r2,zero,95
  800ccc:	008017d0 	cmplti	r2,zero,95
  800cd0:	008017d0 	cmplti	r2,zero,95
  800cd4:	008017d0 	cmplti	r2,zero,95
  800cd8:	008017d0 	cmplti	r2,zero,95
  800cdc:	00801608 	cmpgei	r2,zero,88
  800ce0:	00801634 	movhi	r2,88
  800ce4:	008017d0 	cmplti	r2,zero,95
  800ce8:	00800ef4 	movhi	r2,59
  800cec:	00800f04 	movi	r2,60
  800cf0:	008017d0 	cmplti	r2,zero,95
  800cf4:	00800f44 	movi	r2,61
  800cf8:	00800f54 	movui	r2,61
  800cfc:	00800f54 	movui	r2,61
  800d00:	00800f54 	movui	r2,61
  800d04:	00800f54 	movui	r2,61
  800d08:	00800f54 	movui	r2,61
  800d0c:	00800f54 	movui	r2,61
  800d10:	00800f54 	movui	r2,61
  800d14:	00800f54 	movui	r2,61
  800d18:	00800f54 	movui	r2,61
  800d1c:	008017d0 	cmplti	r2,zero,95
  800d20:	008017d0 	cmplti	r2,zero,95
  800d24:	008017d0 	cmplti	r2,zero,95
  800d28:	008017d0 	cmplti	r2,zero,95
  800d2c:	008017d0 	cmplti	r2,zero,95
  800d30:	008017d0 	cmplti	r2,zero,95
  800d34:	008017d0 	cmplti	r2,zero,95
  800d38:	008017d0 	cmplti	r2,zero,95
  800d3c:	008017d0 	cmplti	r2,zero,95
  800d40:	008017d0 	cmplti	r2,zero,95
  800d44:	00800f88 	cmpgei	r2,zero,62
  800d48:	008013f8 	rdprs	r2,zero,79
  800d4c:	008017d0 	cmplti	r2,zero,95
  800d50:	008013f8 	rdprs	r2,zero,79
  800d54:	008017d0 	cmplti	r2,zero,95
  800d58:	008017d0 	cmplti	r2,zero,95
  800d5c:	008017d0 	cmplti	r2,zero,95
  800d60:	008017d0 	cmplti	r2,zero,95
  800d64:	008014e4 	muli	r2,zero,83
  800d68:	008017d0 	cmplti	r2,zero,95
  800d6c:	008017d0 	cmplti	r2,zero,95
  800d70:	0080138c 	andi	r2,zero,78
  800d74:	008017d0 	cmplti	r2,zero,95
  800d78:	008017d0 	cmplti	r2,zero,95
  800d7c:	008017d0 	cmplti	r2,zero,95
  800d80:	008017d0 	cmplti	r2,zero,95
  800d84:	008017d0 	cmplti	r2,zero,95
  800d88:	008013c8 	cmpgei	r2,zero,79
  800d8c:	008017d0 	cmplti	r2,zero,95
  800d90:	008017d0 	cmplti	r2,zero,95
  800d94:	0080158c 	andi	r2,zero,86
  800d98:	008017d0 	cmplti	r2,zero,95
  800d9c:	008017d0 	cmplti	r2,zero,95
  800da0:	008017d0 	cmplti	r2,zero,95
  800da4:	008017d0 	cmplti	r2,zero,95
  800da8:	008017d0 	cmplti	r2,zero,95
  800dac:	008017d0 	cmplti	r2,zero,95
  800db0:	008017d0 	cmplti	r2,zero,95
  800db4:	008017d0 	cmplti	r2,zero,95
  800db8:	008017d0 	cmplti	r2,zero,95
  800dbc:	008017d0 	cmplti	r2,zero,95
  800dc0:	00801644 	movi	r2,89
  800dc4:	008014f4 	movhi	r2,83
  800dc8:	008013f8 	rdprs	r2,zero,79
  800dcc:	008013f8 	rdprs	r2,zero,79
  800dd0:	008013f8 	rdprs	r2,zero,79
  800dd4:	00801534 	movhi	r2,84
  800dd8:	008014f4 	movhi	r2,83
  800ddc:	008017d0 	cmplti	r2,zero,95
  800de0:	008017d0 	cmplti	r2,zero,95
  800de4:	00801544 	movi	r2,85
  800de8:	008017d0 	cmplti	r2,zero,95
  800dec:	00801558 	cmpnei	r2,zero,85
  800df0:	00801794 	movui	r2,94
  800df4:	0080149c 	xori	r2,zero,82
  800df8:	00801748 	cmpgei	r2,zero,93
  800dfc:	008017d0 	cmplti	r2,zero,95
  800e00:	00801684 	movi	r2,90
  800e04:	008017d0 	cmplti	r2,zero,95
  800e08:	00801758 	cmpnei	r2,zero,93
  800e0c:	008017d0 	cmplti	r2,zero,95
  800e10:	008017d0 	cmplti	r2,zero,95
  800e14:	008016f8 	rdprs	r2,zero,91
  800e18:	db002a17 	ldw	r12,168(sp)
  800e1c:	8323c83a 	sub	r17,r16,r12
  800e20:	003f7e06 	br	800c1c <__alt_data_end+0xff800c1c>
  800e24:	b009883a 	mov	r4,r22
  800e28:	b80b883a 	mov	r5,r23
  800e2c:	0802b2c0 	call	802b2c <__swsetup_r>
  800e30:	10000c1e 	bne	r2,zero,800e64 <___vfprintf_internal_r+0x368>
  800e34:	b880030b 	ldhu	r2,12(r23)
  800e38:	00c00284 	movi	r3,10
  800e3c:	1080068c 	andi	r2,r2,26
  800e40:	10ff561e 	bne	r2,r3,800b9c <__alt_data_end+0xff800b9c>
  800e44:	b880038f 	ldh	r2,14(r23)
  800e48:	103f5416 	blt	r2,zero,800b9c <__alt_data_end+0xff800b9c>
  800e4c:	d9802a17 	ldw	r6,168(sp)
  800e50:	d9c02d17 	ldw	r7,180(sp)
  800e54:	b009883a 	mov	r4,r22
  800e58:	b80b883a 	mov	r5,r23
  800e5c:	0802a700 	call	802a70 <__sbprintf>
  800e60:	00000106 	br	800e68 <___vfprintf_internal_r+0x36c>
  800e64:	00bfffc4 	movi	r2,-1
  800e68:	dfc04917 	ldw	ra,292(sp)
  800e6c:	df004817 	ldw	fp,288(sp)
  800e70:	ddc04717 	ldw	r23,284(sp)
  800e74:	dd804617 	ldw	r22,280(sp)
  800e78:	dd404517 	ldw	r21,276(sp)
  800e7c:	dd004417 	ldw	r20,272(sp)
  800e80:	dcc04317 	ldw	r19,268(sp)
  800e84:	dc804217 	ldw	r18,264(sp)
  800e88:	dc404117 	ldw	r17,260(sp)
  800e8c:	dc004017 	ldw	r16,256(sp)
  800e90:	dec04a04 	addi	sp,sp,296
  800e94:	f800283a 	ret
  800e98:	b009883a 	mov	r4,r22
  800e9c:	b80b883a 	mov	r5,r23
  800ea0:	d9801e04 	addi	r6,sp,120
  800ea4:	0807dc40 	call	807dc4 <__sprint_r>
  800ea8:	1000081e 	bne	r2,zero,800ecc <___vfprintf_internal_r+0x3d0>
  800eac:	da000404 	addi	r8,sp,16
  800eb0:	003f6706 	br	800c50 <__alt_data_end+0xff800c50>
  800eb4:	d8802017 	ldw	r2,128(sp)
  800eb8:	10000426 	beq	r2,zero,800ecc <___vfprintf_internal_r+0x3d0>
  800ebc:	b009883a 	mov	r4,r22
  800ec0:	b80b883a 	mov	r5,r23
  800ec4:	d9801e04 	addi	r6,sp,120
  800ec8:	0807dc40 	call	807dc4 <__sprint_r>
  800ecc:	b880030b 	ldhu	r2,12(r23)
  800ed0:	1080100c 	andi	r2,r2,64
  800ed4:	103fe31e 	bne	r2,zero,800e64 <__alt_data_end+0xff800e64>
  800ed8:	d8802f17 	ldw	r2,188(sp)
  800edc:	003fe206 	br	800e68 <__alt_data_end+0xff800e68>
  800ee0:	b009883a 	mov	r4,r22
  800ee4:	0804b8c0 	call	804b8c <__sinit>
  800ee8:	003f1c06 	br	800b5c <__alt_data_end+0xff800b5c>
  800eec:	dc002a17 	ldw	r16,168(sp)
  800ef0:	003f5a06 	br	800c5c <__alt_data_end+0xff800c5c>
  800ef4:	1805883a 	mov	r2,r3
  800ef8:	8c400114 	ori	r17,r17,4
  800efc:	1c000007 	ldb	r16,0(r3)
  800f00:	003f6306 	br	800c90 <__alt_data_end+0xff800c90>
  800f04:	1c000007 	ldb	r16,0(r3)
  800f08:	18800044 	addi	r2,r3,1
  800f0c:	8286ad26 	beq	r16,r10,8029c4 <___vfprintf_internal_r+0x1ec8>
  800f10:	82fff404 	addi	r11,r16,-48
  800f14:	1007883a 	mov	r3,r2
  800f18:	0013883a 	mov	r9,zero
  800f1c:	2aff5d36 	bltu	r5,r11,800c94 <__alt_data_end+0xff800c94>
  800f20:	1c000007 	ldb	r16,0(r3)
  800f24:	4a4002a4 	muli	r9,r9,10
  800f28:	18c00044 	addi	r3,r3,1
  800f2c:	5a53883a 	add	r9,r11,r9
  800f30:	82fff404 	addi	r11,r16,-48
  800f34:	2afffa2e 	bgeu	r5,r11,800f20 <__alt_data_end+0xff800f20>
  800f38:	483f560e 	bge	r9,zero,800c94 <__alt_data_end+0xff800c94>
  800f3c:	027fffc4 	movi	r9,-1
  800f40:	003f5406 	br	800c94 <__alt_data_end+0xff800c94>
  800f44:	8c402014 	ori	r17,r17,128
  800f48:	1805883a 	mov	r2,r3
  800f4c:	1c000007 	ldb	r16,0(r3)
  800f50:	003f4f06 	br	800c90 <__alt_data_end+0xff800c90>
  800f54:	1805883a 	mov	r2,r3
  800f58:	d8002e15 	stw	zero,184(sp)
  800f5c:	82fff404 	addi	r11,r16,-48
  800f60:	0019883a 	mov	r12,zero
  800f64:	14000007 	ldb	r16,0(r2)
  800f68:	630002a4 	muli	r12,r12,10
  800f6c:	18c00044 	addi	r3,r3,1
  800f70:	1805883a 	mov	r2,r3
  800f74:	62d9883a 	add	r12,r12,r11
  800f78:	82fff404 	addi	r11,r16,-48
  800f7c:	2afff92e 	bgeu	r5,r11,800f64 <__alt_data_end+0xff800f64>
  800f80:	db002e15 	stw	r12,184(sp)
  800f84:	003f4306 	br	800c94 <__alt_data_end+0xff800c94>
  800f88:	8c400414 	ori	r17,r17,16
  800f8c:	d8c02a15 	stw	r3,168(sp)
  800f90:	d9802785 	stb	r6,158(sp)
  800f94:	8880080c 	andi	r2,r17,32
  800f98:	d8c02d17 	ldw	r3,180(sp)
  800f9c:	10015a26 	beq	r2,zero,801508 <___vfprintf_internal_r+0xa0c>
  800fa0:	db002d17 	ldw	r12,180(sp)
  800fa4:	18800117 	ldw	r2,4(r3)
  800fa8:	1cc00017 	ldw	r19,0(r3)
  800fac:	63000204 	addi	r12,r12,8
  800fb0:	db002d15 	stw	r12,180(sp)
  800fb4:	1039883a 	mov	fp,r2
  800fb8:	10044516 	blt	r2,zero,8020d0 <___vfprintf_internal_r+0x15d4>
  800fbc:	dd402783 	ldbu	r21,158(sp)
  800fc0:	da403215 	stw	r9,200(sp)
  800fc4:	00800044 	movi	r2,1
  800fc8:	9f06b03a 	or	r3,r19,fp
  800fcc:	48000216 	blt	r9,zero,800fd8 <___vfprintf_internal_r+0x4dc>
  800fd0:	013fdfc4 	movi	r4,-129
  800fd4:	8922703a 	and	r17,r17,r4
  800fd8:	1802071e 	bne	r3,zero,8017f8 <___vfprintf_internal_r+0xcfc>
  800fdc:	4802fa26 	beq	r9,zero,801bc8 <___vfprintf_internal_r+0x10cc>
  800fe0:	10803fcc 	andi	r2,r2,255
  800fe4:	00c00044 	movi	r3,1
  800fe8:	10c22926 	beq	r2,r3,801890 <___vfprintf_internal_r+0xd94>
  800fec:	00c00084 	movi	r3,2
  800ff0:	10c31726 	beq	r2,r3,801c50 <___vfprintf_internal_r+0x1154>
  800ff4:	d8c01e04 	addi	r3,sp,120
  800ff8:	9808d0fa 	srli	r4,r19,3
  800ffc:	e00a977a 	slli	r5,fp,29
  801000:	e038d0fa 	srli	fp,fp,3
  801004:	9cc001cc 	andi	r19,r19,7
  801008:	98800c04 	addi	r2,r19,48
  80100c:	18ffffc4 	addi	r3,r3,-1
  801010:	2926b03a 	or	r19,r5,r4
  801014:	18800005 	stb	r2,0(r3)
  801018:	9f08b03a 	or	r4,r19,fp
  80101c:	203ff61e 	bne	r4,zero,800ff8 <__alt_data_end+0xff800ff8>
  801020:	8900004c 	andi	r4,r17,1
  801024:	d8c03115 	stw	r3,196(sp)
  801028:	2003931e 	bne	r4,zero,801e78 <___vfprintf_internal_r+0x137c>
  80102c:	dac02817 	ldw	r11,160(sp)
  801030:	58e5c83a 	sub	r18,r11,r3
  801034:	9005883a 	mov	r2,r18
  801038:	9240010e 	bge	r18,r9,801040 <___vfprintf_internal_r+0x544>
  80103c:	4805883a 	mov	r2,r9
  801040:	d8802b15 	stw	r2,172(sp)
  801044:	d8003415 	stw	zero,208(sp)
  801048:	a8803fcc 	andi	r2,r21,255
  80104c:	1080201c 	xori	r2,r2,128
  801050:	10bfe004 	addi	r2,r2,-128
  801054:	10000326 	beq	r2,zero,801064 <___vfprintf_internal_r+0x568>
  801058:	db002b17 	ldw	r12,172(sp)
  80105c:	63000044 	addi	r12,r12,1
  801060:	db002b15 	stw	r12,172(sp)
  801064:	88c0008c 	andi	r3,r17,2
  801068:	d8c02c15 	stw	r3,176(sp)
  80106c:	18000326 	beq	r3,zero,80107c <___vfprintf_internal_r+0x580>
  801070:	dac02b17 	ldw	r11,172(sp)
  801074:	5ac00084 	addi	r11,r11,2
  801078:	dac02b15 	stw	r11,172(sp)
  80107c:	8b00210c 	andi	r12,r17,132
  801080:	db003015 	stw	r12,192(sp)
  801084:	6001da1e 	bne	r12,zero,8017f0 <___vfprintf_internal_r+0xcf4>
  801088:	dac02e17 	ldw	r11,184(sp)
  80108c:	db002b17 	ldw	r12,172(sp)
  801090:	5b39c83a 	sub	fp,r11,r12
  801094:	0701d60e 	bge	zero,fp,8017f0 <___vfprintf_internal_r+0xcf4>
  801098:	02400404 	movi	r9,16
  80109c:	d8c02017 	ldw	r3,128(sp)
  8010a0:	d8801f17 	ldw	r2,124(sp)
  8010a4:	4f053c0e 	bge	r9,fp,802598 <___vfprintf_internal_r+0x1a9c>
  8010a8:	01402074 	movhi	r5,129
  8010ac:	29416884 	addi	r5,r5,1442
  8010b0:	d9403615 	stw	r5,216(sp)
  8010b4:	482b883a 	mov	r21,r9
  8010b8:	04c001c4 	movi	r19,7
  8010bc:	00000306 	br	8010cc <___vfprintf_internal_r+0x5d0>
  8010c0:	e73ffc04 	addi	fp,fp,-16
  8010c4:	42000204 	addi	r8,r8,8
  8010c8:	af00130e 	bge	r21,fp,801118 <___vfprintf_internal_r+0x61c>
  8010cc:	02c02074 	movhi	r11,129
  8010d0:	18c00404 	addi	r3,r3,16
  8010d4:	10800044 	addi	r2,r2,1
  8010d8:	5ac16884 	addi	r11,r11,1442
  8010dc:	42c00015 	stw	r11,0(r8)
  8010e0:	45400115 	stw	r21,4(r8)
  8010e4:	d8c02015 	stw	r3,128(sp)
  8010e8:	d8801f15 	stw	r2,124(sp)
  8010ec:	98bff40e 	bge	r19,r2,8010c0 <__alt_data_end+0xff8010c0>
  8010f0:	b009883a 	mov	r4,r22
  8010f4:	b80b883a 	mov	r5,r23
  8010f8:	d9801e04 	addi	r6,sp,120
  8010fc:	0807dc40 	call	807dc4 <__sprint_r>
  801100:	103f721e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  801104:	e73ffc04 	addi	fp,fp,-16
  801108:	d8c02017 	ldw	r3,128(sp)
  80110c:	d8801f17 	ldw	r2,124(sp)
  801110:	da000404 	addi	r8,sp,16
  801114:	af3fed16 	blt	r21,fp,8010cc <__alt_data_end+0xff8010cc>
  801118:	db003617 	ldw	r12,216(sp)
  80111c:	e0c7883a 	add	r3,fp,r3
  801120:	10800044 	addi	r2,r2,1
  801124:	43000015 	stw	r12,0(r8)
  801128:	47000115 	stw	fp,4(r8)
  80112c:	d8c02015 	stw	r3,128(sp)
  801130:	d8801f15 	stw	r2,124(sp)
  801134:	010001c4 	movi	r4,7
  801138:	20830e16 	blt	r4,r2,801d74 <___vfprintf_internal_r+0x1278>
  80113c:	d8802787 	ldb	r2,158(sp)
  801140:	42000204 	addi	r8,r8,8
  801144:	10000c26 	beq	r2,zero,801178 <___vfprintf_internal_r+0x67c>
  801148:	d8801f17 	ldw	r2,124(sp)
  80114c:	d9002784 	addi	r4,sp,158
  801150:	18c00044 	addi	r3,r3,1
  801154:	10800044 	addi	r2,r2,1
  801158:	41000015 	stw	r4,0(r8)
  80115c:	01000044 	movi	r4,1
  801160:	41000115 	stw	r4,4(r8)
  801164:	d8c02015 	stw	r3,128(sp)
  801168:	d8801f15 	stw	r2,124(sp)
  80116c:	010001c4 	movi	r4,7
  801170:	2082a716 	blt	r4,r2,801c10 <___vfprintf_internal_r+0x1114>
  801174:	42000204 	addi	r8,r8,8
  801178:	dac02c17 	ldw	r11,176(sp)
  80117c:	58000c26 	beq	r11,zero,8011b0 <___vfprintf_internal_r+0x6b4>
  801180:	d8801f17 	ldw	r2,124(sp)
  801184:	d9002704 	addi	r4,sp,156
  801188:	18c00084 	addi	r3,r3,2
  80118c:	10800044 	addi	r2,r2,1
  801190:	41000015 	stw	r4,0(r8)
  801194:	01000084 	movi	r4,2
  801198:	41000115 	stw	r4,4(r8)
  80119c:	d8c02015 	stw	r3,128(sp)
  8011a0:	d8801f15 	stw	r2,124(sp)
  8011a4:	010001c4 	movi	r4,7
  8011a8:	2082a116 	blt	r4,r2,801c30 <___vfprintf_internal_r+0x1134>
  8011ac:	42000204 	addi	r8,r8,8
  8011b0:	db003017 	ldw	r12,192(sp)
  8011b4:	00802004 	movi	r2,128
  8011b8:	60820326 	beq	r12,r2,8019c8 <___vfprintf_internal_r+0xecc>
  8011bc:	db003217 	ldw	r12,200(sp)
  8011c0:	64abc83a 	sub	r21,r12,r18
  8011c4:	0540260e 	bge	zero,r21,801260 <___vfprintf_internal_r+0x764>
  8011c8:	07000404 	movi	fp,16
  8011cc:	d8801f17 	ldw	r2,124(sp)
  8011d0:	e544570e 	bge	fp,r21,802330 <___vfprintf_internal_r+0x1834>
  8011d4:	01402074 	movhi	r5,129
  8011d8:	29416484 	addi	r5,r5,1426
  8011dc:	d9402c15 	stw	r5,176(sp)
  8011e0:	04c001c4 	movi	r19,7
  8011e4:	00000306 	br	8011f4 <___vfprintf_internal_r+0x6f8>
  8011e8:	ad7ffc04 	addi	r21,r21,-16
  8011ec:	42000204 	addi	r8,r8,8
  8011f0:	e540110e 	bge	fp,r21,801238 <___vfprintf_internal_r+0x73c>
  8011f4:	18c00404 	addi	r3,r3,16
  8011f8:	10800044 	addi	r2,r2,1
  8011fc:	45000015 	stw	r20,0(r8)
  801200:	47000115 	stw	fp,4(r8)
  801204:	d8c02015 	stw	r3,128(sp)
  801208:	d8801f15 	stw	r2,124(sp)
  80120c:	98bff60e 	bge	r19,r2,8011e8 <__alt_data_end+0xff8011e8>
  801210:	b009883a 	mov	r4,r22
  801214:	b80b883a 	mov	r5,r23
  801218:	d9801e04 	addi	r6,sp,120
  80121c:	0807dc40 	call	807dc4 <__sprint_r>
  801220:	103f2a1e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  801224:	ad7ffc04 	addi	r21,r21,-16
  801228:	d8c02017 	ldw	r3,128(sp)
  80122c:	d8801f17 	ldw	r2,124(sp)
  801230:	da000404 	addi	r8,sp,16
  801234:	e57fef16 	blt	fp,r21,8011f4 <__alt_data_end+0xff8011f4>
  801238:	dac02c17 	ldw	r11,176(sp)
  80123c:	1d47883a 	add	r3,r3,r21
  801240:	10800044 	addi	r2,r2,1
  801244:	42c00015 	stw	r11,0(r8)
  801248:	45400115 	stw	r21,4(r8)
  80124c:	d8c02015 	stw	r3,128(sp)
  801250:	d8801f15 	stw	r2,124(sp)
  801254:	010001c4 	movi	r4,7
  801258:	20826516 	blt	r4,r2,801bf0 <___vfprintf_internal_r+0x10f4>
  80125c:	42000204 	addi	r8,r8,8
  801260:	8880400c 	andi	r2,r17,256
  801264:	1001901e 	bne	r2,zero,8018a8 <___vfprintf_internal_r+0xdac>
  801268:	d8801f17 	ldw	r2,124(sp)
  80126c:	db003117 	ldw	r12,196(sp)
  801270:	1c87883a 	add	r3,r3,r18
  801274:	10800044 	addi	r2,r2,1
  801278:	43000015 	stw	r12,0(r8)
  80127c:	44800115 	stw	r18,4(r8)
  801280:	d8c02015 	stw	r3,128(sp)
  801284:	d8801f15 	stw	r2,124(sp)
  801288:	010001c4 	movi	r4,7
  80128c:	20824016 	blt	r4,r2,801b90 <___vfprintf_internal_r+0x1094>
  801290:	42000204 	addi	r8,r8,8
  801294:	8c40010c 	andi	r17,r17,4
  801298:	88003126 	beq	r17,zero,801360 <___vfprintf_internal_r+0x864>
  80129c:	db002e17 	ldw	r12,184(sp)
  8012a0:	dac02b17 	ldw	r11,172(sp)
  8012a4:	62e1c83a 	sub	r16,r12,r11
  8012a8:	04002d0e 	bge	zero,r16,801360 <___vfprintf_internal_r+0x864>
  8012ac:	04400404 	movi	r17,16
  8012b0:	d8801f17 	ldw	r2,124(sp)
  8012b4:	8c05150e 	bge	r17,r16,80270c <___vfprintf_internal_r+0x1c10>
  8012b8:	01002074 	movhi	r4,129
  8012bc:	21016884 	addi	r4,r4,1442
  8012c0:	d9003615 	stw	r4,216(sp)
  8012c4:	048001c4 	movi	r18,7
  8012c8:	00000306 	br	8012d8 <___vfprintf_internal_r+0x7dc>
  8012cc:	843ffc04 	addi	r16,r16,-16
  8012d0:	42000204 	addi	r8,r8,8
  8012d4:	8c00130e 	bge	r17,r16,801324 <___vfprintf_internal_r+0x828>
  8012d8:	01402074 	movhi	r5,129
  8012dc:	18c00404 	addi	r3,r3,16
  8012e0:	10800044 	addi	r2,r2,1
  8012e4:	29416884 	addi	r5,r5,1442
  8012e8:	41400015 	stw	r5,0(r8)
  8012ec:	44400115 	stw	r17,4(r8)
  8012f0:	d8c02015 	stw	r3,128(sp)
  8012f4:	d8801f15 	stw	r2,124(sp)
  8012f8:	90bff40e 	bge	r18,r2,8012cc <__alt_data_end+0xff8012cc>
  8012fc:	b009883a 	mov	r4,r22
  801300:	b80b883a 	mov	r5,r23
  801304:	d9801e04 	addi	r6,sp,120
  801308:	0807dc40 	call	807dc4 <__sprint_r>
  80130c:	103eef1e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  801310:	843ffc04 	addi	r16,r16,-16
  801314:	d8c02017 	ldw	r3,128(sp)
  801318:	d8801f17 	ldw	r2,124(sp)
  80131c:	da000404 	addi	r8,sp,16
  801320:	8c3fed16 	blt	r17,r16,8012d8 <__alt_data_end+0xff8012d8>
  801324:	dac03617 	ldw	r11,216(sp)
  801328:	1c07883a 	add	r3,r3,r16
  80132c:	10800044 	addi	r2,r2,1
  801330:	42c00015 	stw	r11,0(r8)
  801334:	44000115 	stw	r16,4(r8)
  801338:	d8c02015 	stw	r3,128(sp)
  80133c:	d8801f15 	stw	r2,124(sp)
  801340:	010001c4 	movi	r4,7
  801344:	2080060e 	bge	r4,r2,801360 <___vfprintf_internal_r+0x864>
  801348:	b009883a 	mov	r4,r22
  80134c:	b80b883a 	mov	r5,r23
  801350:	d9801e04 	addi	r6,sp,120
  801354:	0807dc40 	call	807dc4 <__sprint_r>
  801358:	103edc1e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  80135c:	d8c02017 	ldw	r3,128(sp)
  801360:	d8802b17 	ldw	r2,172(sp)
  801364:	db002e17 	ldw	r12,184(sp)
  801368:	1300010e 	bge	r2,r12,801370 <___vfprintf_internal_r+0x874>
  80136c:	6005883a 	mov	r2,r12
  801370:	dac02f17 	ldw	r11,188(sp)
  801374:	5897883a 	add	r11,r11,r2
  801378:	dac02f15 	stw	r11,188(sp)
  80137c:	18020c1e 	bne	r3,zero,801bb0 <___vfprintf_internal_r+0x10b4>
  801380:	d8001f15 	stw	zero,124(sp)
  801384:	da000404 	addi	r8,sp,16
  801388:	003e1706 	br	800be8 <__alt_data_end+0xff800be8>
  80138c:	8c400414 	ori	r17,r17,16
  801390:	d8c02a15 	stw	r3,168(sp)
  801394:	8880080c 	andi	r2,r17,32
  801398:	10010126 	beq	r2,zero,8017a0 <___vfprintf_internal_r+0xca4>
  80139c:	db002d17 	ldw	r12,180(sp)
  8013a0:	0005883a 	mov	r2,zero
  8013a4:	64c00017 	ldw	r19,0(r12)
  8013a8:	67000117 	ldw	fp,4(r12)
  8013ac:	63000204 	addi	r12,r12,8
  8013b0:	db002d15 	stw	r12,180(sp)
  8013b4:	9f06b03a 	or	r3,r19,fp
  8013b8:	d8002785 	stb	zero,158(sp)
  8013bc:	da403215 	stw	r9,200(sp)
  8013c0:	002b883a 	mov	r21,zero
  8013c4:	003f0106 	br	800fcc <__alt_data_end+0xff800fcc>
  8013c8:	8c400414 	ori	r17,r17,16
  8013cc:	d8c02a15 	stw	r3,168(sp)
  8013d0:	8880080c 	andi	r2,r17,32
  8013d4:	1000e326 	beq	r2,zero,801764 <___vfprintf_internal_r+0xc68>
  8013d8:	dac02d17 	ldw	r11,180(sp)
  8013dc:	00800044 	movi	r2,1
  8013e0:	5cc00017 	ldw	r19,0(r11)
  8013e4:	5f000117 	ldw	fp,4(r11)
  8013e8:	5ac00204 	addi	r11,r11,8
  8013ec:	dac02d15 	stw	r11,180(sp)
  8013f0:	9f06b03a 	or	r3,r19,fp
  8013f4:	003ff006 	br	8013b8 <__alt_data_end+0xff8013b8>
  8013f8:	db002d17 	ldw	r12,180(sp)
  8013fc:	dac02d17 	ldw	r11,180(sp)
  801400:	d8c02a15 	stw	r3,168(sp)
  801404:	63000017 	ldw	r12,0(r12)
  801408:	5ac00117 	ldw	r11,4(r11)
  80140c:	d9802785 	stb	r6,158(sp)
  801410:	6009883a 	mov	r4,r12
  801414:	580b883a 	mov	r5,r11
  801418:	db003715 	stw	r12,220(sp)
  80141c:	da003f15 	stw	r8,252(sp)
  801420:	da403e15 	stw	r9,248(sp)
  801424:	dac03915 	stw	r11,228(sp)
  801428:	0807a200 	call	807a20 <__fpclassifyd>
  80142c:	db002d17 	ldw	r12,180(sp)
  801430:	04800044 	movi	r18,1
  801434:	da003f17 	ldw	r8,252(sp)
  801438:	64c00204 	addi	r19,r12,8
  80143c:	da403e17 	ldw	r9,248(sp)
  801440:	d9003717 	ldw	r4,220(sp)
  801444:	d9403917 	ldw	r5,228(sp)
  801448:	14832b1e 	bne	r2,r18,8020f8 <___vfprintf_internal_r+0x15fc>
  80144c:	000d883a 	mov	r6,zero
  801450:	000f883a 	mov	r7,zero
  801454:	080b9cc0 	call	80b9cc <__ledf2>
  801458:	da003f17 	ldw	r8,252(sp)
  80145c:	1004b716 	blt	r2,zero,80273c <___vfprintf_internal_r+0x1c40>
  801460:	dd402783 	ldbu	r21,158(sp)
  801464:	008011c4 	movi	r2,71
  801468:	14040e0e 	bge	r2,r16,8024a4 <___vfprintf_internal_r+0x19a8>
  80146c:	00c02074 	movhi	r3,129
  801470:	18c15504 	addi	r3,r3,1364
  801474:	d8c03115 	stw	r3,196(sp)
  801478:	02c000c4 	movi	r11,3
  80147c:	00bfdfc4 	movi	r2,-129
  801480:	dac02b15 	stw	r11,172(sp)
  801484:	88a2703a 	and	r17,r17,r2
  801488:	dcc02d15 	stw	r19,180(sp)
  80148c:	5825883a 	mov	r18,r11
  801490:	d8003215 	stw	zero,200(sp)
  801494:	d8003415 	stw	zero,208(sp)
  801498:	003eeb06 	br	801048 <__alt_data_end+0xff801048>
  80149c:	db002d17 	ldw	r12,180(sp)
  8014a0:	00800c04 	movi	r2,48
  8014a4:	d8802705 	stb	r2,156(sp)
  8014a8:	64c00017 	ldw	r19,0(r12)
  8014ac:	00801e04 	movi	r2,120
  8014b0:	d8802745 	stb	r2,157(sp)
  8014b4:	00802074 	movhi	r2,129
  8014b8:	10815d04 	addi	r2,r2,1396
  8014bc:	63000104 	addi	r12,r12,4
  8014c0:	d8c02a15 	stw	r3,168(sp)
  8014c4:	d8803b15 	stw	r2,236(sp)
  8014c8:	0039883a 	mov	fp,zero
  8014cc:	8c400094 	ori	r17,r17,2
  8014d0:	db002d15 	stw	r12,180(sp)
  8014d4:	00800084 	movi	r2,2
  8014d8:	04001e04 	movi	r16,120
  8014dc:	9807883a 	mov	r3,r19
  8014e0:	003fb506 	br	8013b8 <__alt_data_end+0xff8013b8>
  8014e4:	8c400214 	ori	r17,r17,8
  8014e8:	1805883a 	mov	r2,r3
  8014ec:	1c000007 	ldb	r16,0(r3)
  8014f0:	003de706 	br	800c90 <__alt_data_end+0xff800c90>
  8014f4:	d8c02a15 	stw	r3,168(sp)
  8014f8:	d9802785 	stb	r6,158(sp)
  8014fc:	8880080c 	andi	r2,r17,32
  801500:	d8c02d17 	ldw	r3,180(sp)
  801504:	103ea61e 	bne	r2,zero,800fa0 <__alt_data_end+0xff800fa0>
  801508:	8880040c 	andi	r2,r17,16
  80150c:	1002221e 	bne	r2,zero,801d98 <___vfprintf_internal_r+0x129c>
  801510:	8880100c 	andi	r2,r17,64
  801514:	10022026 	beq	r2,zero,801d98 <___vfprintf_internal_r+0x129c>
  801518:	1cc0000f 	ldh	r19,0(r3)
  80151c:	db002d17 	ldw	r12,180(sp)
  801520:	9839d7fa 	srai	fp,r19,31
  801524:	63000104 	addi	r12,r12,4
  801528:	db002d15 	stw	r12,180(sp)
  80152c:	e005883a 	mov	r2,fp
  801530:	003ea106 	br	800fb8 <__alt_data_end+0xff800fb8>
  801534:	8c401014 	ori	r17,r17,64
  801538:	1805883a 	mov	r2,r3
  80153c:	1c000007 	ldb	r16,0(r3)
  801540:	003dd306 	br	800c90 <__alt_data_end+0xff800c90>
  801544:	1c000007 	ldb	r16,0(r3)
  801548:	81c3e926 	beq	r16,r7,8024f0 <___vfprintf_internal_r+0x19f4>
  80154c:	8c400414 	ori	r17,r17,16
  801550:	1805883a 	mov	r2,r3
  801554:	003dce06 	br	800c90 <__alt_data_end+0xff800c90>
  801558:	d8c02a15 	stw	r3,168(sp)
  80155c:	d9802785 	stb	r6,158(sp)
  801560:	8880080c 	andi	r2,r17,32
  801564:	10034726 	beq	r2,zero,802284 <___vfprintf_internal_r+0x1788>
  801568:	db002d17 	ldw	r12,180(sp)
  80156c:	dac02f17 	ldw	r11,188(sp)
  801570:	60800017 	ldw	r2,0(r12)
  801574:	5807d7fa 	srai	r3,r11,31
  801578:	63000104 	addi	r12,r12,4
  80157c:	db002d15 	stw	r12,180(sp)
  801580:	12c00015 	stw	r11,0(r2)
  801584:	10c00115 	stw	r3,4(r2)
  801588:	003d9706 	br	800be8 <__alt_data_end+0xff800be8>
  80158c:	03002074 	movhi	r12,129
  801590:	63015804 	addi	r12,r12,1376
  801594:	d8c02a15 	stw	r3,168(sp)
  801598:	d9802785 	stb	r6,158(sp)
  80159c:	db003b15 	stw	r12,236(sp)
  8015a0:	88c0080c 	andi	r3,r17,32
  8015a4:	d8802d17 	ldw	r2,180(sp)
  8015a8:	18005b26 	beq	r3,zero,801718 <___vfprintf_internal_r+0xc1c>
  8015ac:	dac02d17 	ldw	r11,180(sp)
  8015b0:	14c00017 	ldw	r19,0(r2)
  8015b4:	17000117 	ldw	fp,4(r2)
  8015b8:	5ac00204 	addi	r11,r11,8
  8015bc:	dac02d15 	stw	r11,180(sp)
  8015c0:	8880004c 	andi	r2,r17,1
  8015c4:	10022926 	beq	r2,zero,801e6c <___vfprintf_internal_r+0x1370>
  8015c8:	9f06b03a 	or	r3,r19,fp
  8015cc:	18032b26 	beq	r3,zero,80227c <___vfprintf_internal_r+0x1780>
  8015d0:	00800c04 	movi	r2,48
  8015d4:	d8802705 	stb	r2,156(sp)
  8015d8:	dc002745 	stb	r16,157(sp)
  8015dc:	8c400094 	ori	r17,r17,2
  8015e0:	00800084 	movi	r2,2
  8015e4:	003f7406 	br	8013b8 <__alt_data_end+0xff8013b8>
  8015e8:	30803fcc 	andi	r2,r6,255
  8015ec:	1080201c 	xori	r2,r2,128
  8015f0:	10bfe004 	addi	r2,r2,-128
  8015f4:	1003351e 	bne	r2,zero,8022cc <___vfprintf_internal_r+0x17d0>
  8015f8:	1805883a 	mov	r2,r3
  8015fc:	01800804 	movi	r6,32
  801600:	1c000007 	ldb	r16,0(r3)
  801604:	003da206 	br	800c90 <__alt_data_end+0xff800c90>
  801608:	dac02d17 	ldw	r11,180(sp)
  80160c:	db002d17 	ldw	r12,180(sp)
  801610:	5ac00017 	ldw	r11,0(r11)
  801614:	dac02e15 	stw	r11,184(sp)
  801618:	62c00104 	addi	r11,r12,4
  80161c:	db002e17 	ldw	r12,184(sp)
  801620:	6003ad16 	blt	r12,zero,8024d8 <___vfprintf_internal_r+0x19dc>
  801624:	dac02d15 	stw	r11,180(sp)
  801628:	1805883a 	mov	r2,r3
  80162c:	1c000007 	ldb	r16,0(r3)
  801630:	003d9706 	br	800c90 <__alt_data_end+0xff800c90>
  801634:	1805883a 	mov	r2,r3
  801638:	01800ac4 	movi	r6,43
  80163c:	1c000007 	ldb	r16,0(r3)
  801640:	003d9306 	br	800c90 <__alt_data_end+0xff800c90>
  801644:	db002d17 	ldw	r12,180(sp)
  801648:	d8c02a15 	stw	r3,168(sp)
  80164c:	00c00044 	movi	r3,1
  801650:	60800017 	ldw	r2,0(r12)
  801654:	63000104 	addi	r12,r12,4
  801658:	d8c02b15 	stw	r3,172(sp)
  80165c:	d8002785 	stb	zero,158(sp)
  801660:	d8801405 	stb	r2,80(sp)
  801664:	db002d15 	stw	r12,180(sp)
  801668:	dac01404 	addi	r11,sp,80
  80166c:	1825883a 	mov	r18,r3
  801670:	d8003215 	stw	zero,200(sp)
  801674:	d8003415 	stw	zero,208(sp)
  801678:	dac03115 	stw	r11,196(sp)
  80167c:	0005883a 	mov	r2,zero
  801680:	003e7806 	br	801064 <__alt_data_end+0xff801064>
  801684:	dac02d17 	ldw	r11,180(sp)
  801688:	db002d17 	ldw	r12,180(sp)
  80168c:	d8c02a15 	stw	r3,168(sp)
  801690:	5ac00017 	ldw	r11,0(r11)
  801694:	d8002785 	stb	zero,158(sp)
  801698:	64c00104 	addi	r19,r12,4
  80169c:	dac03115 	stw	r11,196(sp)
  8016a0:	5803fe26 	beq	r11,zero,80269c <___vfprintf_internal_r+0x1ba0>
  8016a4:	d9003117 	ldw	r4,196(sp)
  8016a8:	4803b416 	blt	r9,zero,80257c <___vfprintf_internal_r+0x1a80>
  8016ac:	480d883a 	mov	r6,r9
  8016b0:	000b883a 	mov	r5,zero
  8016b4:	da003f15 	stw	r8,252(sp)
  8016b8:	da403e15 	stw	r9,248(sp)
  8016bc:	08060780 	call	806078 <memchr>
  8016c0:	da003f17 	ldw	r8,252(sp)
  8016c4:	da403e17 	ldw	r9,248(sp)
  8016c8:	10043026 	beq	r2,zero,80278c <___vfprintf_internal_r+0x1c90>
  8016cc:	d8c03117 	ldw	r3,196(sp)
  8016d0:	10e5c83a 	sub	r18,r2,r3
  8016d4:	4c836b16 	blt	r9,r18,802484 <___vfprintf_internal_r+0x1988>
  8016d8:	9005883a 	mov	r2,r18
  8016dc:	9003ac16 	blt	r18,zero,802590 <___vfprintf_internal_r+0x1a94>
  8016e0:	dd402783 	ldbu	r21,158(sp)
  8016e4:	d8802b15 	stw	r2,172(sp)
  8016e8:	dcc02d15 	stw	r19,180(sp)
  8016ec:	d8003215 	stw	zero,200(sp)
  8016f0:	d8003415 	stw	zero,208(sp)
  8016f4:	003e5406 	br	801048 <__alt_data_end+0xff801048>
  8016f8:	00802074 	movhi	r2,129
  8016fc:	10815d04 	addi	r2,r2,1396
  801700:	d8c02a15 	stw	r3,168(sp)
  801704:	d8803b15 	stw	r2,236(sp)
  801708:	d9802785 	stb	r6,158(sp)
  80170c:	88c0080c 	andi	r3,r17,32
  801710:	d8802d17 	ldw	r2,180(sp)
  801714:	183fa51e 	bne	r3,zero,8015ac <__alt_data_end+0xff8015ac>
  801718:	88c0040c 	andi	r3,r17,16
  80171c:	1802ee26 	beq	r3,zero,8022d8 <___vfprintf_internal_r+0x17dc>
  801720:	db002d17 	ldw	r12,180(sp)
  801724:	14c00017 	ldw	r19,0(r2)
  801728:	0039883a 	mov	fp,zero
  80172c:	63000104 	addi	r12,r12,4
  801730:	db002d15 	stw	r12,180(sp)
  801734:	003fa206 	br	8015c0 <__alt_data_end+0xff8015c0>
  801738:	8c400054 	ori	r17,r17,1
  80173c:	1805883a 	mov	r2,r3
  801740:	1c000007 	ldb	r16,0(r3)
  801744:	003d5206 	br	800c90 <__alt_data_end+0xff800c90>
  801748:	8c400814 	ori	r17,r17,32
  80174c:	1805883a 	mov	r2,r3
  801750:	1c000007 	ldb	r16,0(r3)
  801754:	003d4e06 	br	800c90 <__alt_data_end+0xff800c90>
  801758:	d8c02a15 	stw	r3,168(sp)
  80175c:	8880080c 	andi	r2,r17,32
  801760:	103f1d1e 	bne	r2,zero,8013d8 <__alt_data_end+0xff8013d8>
  801764:	8880040c 	andi	r2,r17,16
  801768:	1001b81e 	bne	r2,zero,801e4c <___vfprintf_internal_r+0x1350>
  80176c:	8880100c 	andi	r2,r17,64
  801770:	1001b626 	beq	r2,zero,801e4c <___vfprintf_internal_r+0x1350>
  801774:	dac02d17 	ldw	r11,180(sp)
  801778:	0039883a 	mov	fp,zero
  80177c:	00800044 	movi	r2,1
  801780:	5cc0000b 	ldhu	r19,0(r11)
  801784:	5ac00104 	addi	r11,r11,4
  801788:	dac02d15 	stw	r11,180(sp)
  80178c:	9807883a 	mov	r3,r19
  801790:	003f0906 	br	8013b8 <__alt_data_end+0xff8013b8>
  801794:	d8c02a15 	stw	r3,168(sp)
  801798:	8880080c 	andi	r2,r17,32
  80179c:	103eff1e 	bne	r2,zero,80139c <__alt_data_end+0xff80139c>
  8017a0:	8880040c 	andi	r2,r17,16
  8017a4:	1001a11e 	bne	r2,zero,801e2c <___vfprintf_internal_r+0x1330>
  8017a8:	8880100c 	andi	r2,r17,64
  8017ac:	10019f26 	beq	r2,zero,801e2c <___vfprintf_internal_r+0x1330>
  8017b0:	db002d17 	ldw	r12,180(sp)
  8017b4:	0039883a 	mov	fp,zero
  8017b8:	0005883a 	mov	r2,zero
  8017bc:	64c0000b 	ldhu	r19,0(r12)
  8017c0:	63000104 	addi	r12,r12,4
  8017c4:	db002d15 	stw	r12,180(sp)
  8017c8:	9807883a 	mov	r3,r19
  8017cc:	003efa06 	br	8013b8 <__alt_data_end+0xff8013b8>
  8017d0:	d8c02a15 	stw	r3,168(sp)
  8017d4:	d9802785 	stb	r6,158(sp)
  8017d8:	803db626 	beq	r16,zero,800eb4 <__alt_data_end+0xff800eb4>
  8017dc:	00c00044 	movi	r3,1
  8017e0:	d8c02b15 	stw	r3,172(sp)
  8017e4:	dc001405 	stb	r16,80(sp)
  8017e8:	d8002785 	stb	zero,158(sp)
  8017ec:	003f9e06 	br	801668 <__alt_data_end+0xff801668>
  8017f0:	d8c02017 	ldw	r3,128(sp)
  8017f4:	003e5306 	br	801144 <__alt_data_end+0xff801144>
  8017f8:	10803fcc 	andi	r2,r2,255
  8017fc:	00c00044 	movi	r3,1
  801800:	10fdfa1e 	bne	r2,r3,800fec <__alt_data_end+0xff800fec>
  801804:	e000021e 	bne	fp,zero,801810 <___vfprintf_internal_r+0xd14>
  801808:	00800244 	movi	r2,9
  80180c:	14c0202e 	bgeu	r2,r19,801890 <___vfprintf_internal_r+0xd94>
  801810:	dc002b15 	stw	r16,172(sp)
  801814:	dc402c15 	stw	r17,176(sp)
  801818:	9821883a 	mov	r16,r19
  80181c:	e023883a 	mov	r17,fp
  801820:	dc801e04 	addi	r18,sp,120
  801824:	4827883a 	mov	r19,r9
  801828:	4039883a 	mov	fp,r8
  80182c:	8009883a 	mov	r4,r16
  801830:	880b883a 	mov	r5,r17
  801834:	01800284 	movi	r6,10
  801838:	000f883a 	mov	r7,zero
  80183c:	080a0440 	call	80a044 <__umoddi3>
  801840:	10800c04 	addi	r2,r2,48
  801844:	94bfffc4 	addi	r18,r18,-1
  801848:	8009883a 	mov	r4,r16
  80184c:	880b883a 	mov	r5,r17
  801850:	01800284 	movi	r6,10
  801854:	000f883a 	mov	r7,zero
  801858:	90800005 	stb	r2,0(r18)
  80185c:	0809a840 	call	809a84 <__udivdi3>
  801860:	1021883a 	mov	r16,r2
  801864:	10c4b03a 	or	r2,r2,r3
  801868:	1823883a 	mov	r17,r3
  80186c:	103fef1e 	bne	r2,zero,80182c <__alt_data_end+0xff80182c>
  801870:	dac02817 	ldw	r11,160(sp)
  801874:	dc803115 	stw	r18,196(sp)
  801878:	dc002b17 	ldw	r16,172(sp)
  80187c:	dc402c17 	ldw	r17,176(sp)
  801880:	9813883a 	mov	r9,r19
  801884:	e011883a 	mov	r8,fp
  801888:	5ca5c83a 	sub	r18,r11,r18
  80188c:	003de906 	br	801034 <__alt_data_end+0xff801034>
  801890:	9cc00c04 	addi	r19,r19,48
  801894:	d8c01dc4 	addi	r3,sp,119
  801898:	dcc01dc5 	stb	r19,119(sp)
  80189c:	dc803c17 	ldw	r18,240(sp)
  8018a0:	d8c03115 	stw	r3,196(sp)
  8018a4:	003de306 	br	801034 <__alt_data_end+0xff801034>
  8018a8:	00801944 	movi	r2,101
  8018ac:	1400710e 	bge	r2,r16,801a74 <___vfprintf_internal_r+0xf78>
  8018b0:	d9003717 	ldw	r4,220(sp)
  8018b4:	d9403917 	ldw	r5,228(sp)
  8018b8:	000d883a 	mov	r6,zero
  8018bc:	000f883a 	mov	r7,zero
  8018c0:	d8c03d15 	stw	r3,244(sp)
  8018c4:	da003f15 	stw	r8,252(sp)
  8018c8:	080b8680 	call	80b868 <__eqdf2>
  8018cc:	d8c03d17 	ldw	r3,244(sp)
  8018d0:	da003f17 	ldw	r8,252(sp)
  8018d4:	1000ef1e 	bne	r2,zero,801c94 <___vfprintf_internal_r+0x1198>
  8018d8:	d8801f17 	ldw	r2,124(sp)
  8018dc:	01002074 	movhi	r4,129
  8018e0:	21016404 	addi	r4,r4,1424
  8018e4:	18c00044 	addi	r3,r3,1
  8018e8:	10800044 	addi	r2,r2,1
  8018ec:	41000015 	stw	r4,0(r8)
  8018f0:	01000044 	movi	r4,1
  8018f4:	41000115 	stw	r4,4(r8)
  8018f8:	d8c02015 	stw	r3,128(sp)
  8018fc:	d8801f15 	stw	r2,124(sp)
  801900:	010001c4 	movi	r4,7
  801904:	20828e16 	blt	r4,r2,802340 <___vfprintf_internal_r+0x1844>
  801908:	42000204 	addi	r8,r8,8
  80190c:	d8802617 	ldw	r2,152(sp)
  801910:	dac03317 	ldw	r11,204(sp)
  801914:	12c00216 	blt	r2,r11,801920 <___vfprintf_internal_r+0xe24>
  801918:	8880004c 	andi	r2,r17,1
  80191c:	103e5d26 	beq	r2,zero,801294 <__alt_data_end+0xff801294>
  801920:	db003817 	ldw	r12,224(sp)
  801924:	d8801f17 	ldw	r2,124(sp)
  801928:	dac03517 	ldw	r11,212(sp)
  80192c:	1b07883a 	add	r3,r3,r12
  801930:	10800044 	addi	r2,r2,1
  801934:	42c00015 	stw	r11,0(r8)
  801938:	43000115 	stw	r12,4(r8)
  80193c:	d8c02015 	stw	r3,128(sp)
  801940:	d8801f15 	stw	r2,124(sp)
  801944:	010001c4 	movi	r4,7
  801948:	2082ed16 	blt	r4,r2,802500 <___vfprintf_internal_r+0x1a04>
  80194c:	42000204 	addi	r8,r8,8
  801950:	db003317 	ldw	r12,204(sp)
  801954:	643fffc4 	addi	r16,r12,-1
  801958:	043e4e0e 	bge	zero,r16,801294 <__alt_data_end+0xff801294>
  80195c:	04800404 	movi	r18,16
  801960:	d8801f17 	ldw	r2,124(sp)
  801964:	94007e0e 	bge	r18,r16,801b60 <___vfprintf_internal_r+0x1064>
  801968:	01402074 	movhi	r5,129
  80196c:	29416484 	addi	r5,r5,1426
  801970:	d9402c15 	stw	r5,176(sp)
  801974:	054001c4 	movi	r21,7
  801978:	00000306 	br	801988 <___vfprintf_internal_r+0xe8c>
  80197c:	42000204 	addi	r8,r8,8
  801980:	843ffc04 	addi	r16,r16,-16
  801984:	9400790e 	bge	r18,r16,801b6c <___vfprintf_internal_r+0x1070>
  801988:	18c00404 	addi	r3,r3,16
  80198c:	10800044 	addi	r2,r2,1
  801990:	45000015 	stw	r20,0(r8)
  801994:	44800115 	stw	r18,4(r8)
  801998:	d8c02015 	stw	r3,128(sp)
  80199c:	d8801f15 	stw	r2,124(sp)
  8019a0:	a8bff60e 	bge	r21,r2,80197c <__alt_data_end+0xff80197c>
  8019a4:	b009883a 	mov	r4,r22
  8019a8:	b80b883a 	mov	r5,r23
  8019ac:	d9801e04 	addi	r6,sp,120
  8019b0:	0807dc40 	call	807dc4 <__sprint_r>
  8019b4:	103d451e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  8019b8:	d8c02017 	ldw	r3,128(sp)
  8019bc:	d8801f17 	ldw	r2,124(sp)
  8019c0:	da000404 	addi	r8,sp,16
  8019c4:	003fee06 	br	801980 <__alt_data_end+0xff801980>
  8019c8:	dac02e17 	ldw	r11,184(sp)
  8019cc:	db002b17 	ldw	r12,172(sp)
  8019d0:	5b2bc83a 	sub	r21,r11,r12
  8019d4:	057df90e 	bge	zero,r21,8011bc <__alt_data_end+0xff8011bc>
  8019d8:	07000404 	movi	fp,16
  8019dc:	d8801f17 	ldw	r2,124(sp)
  8019e0:	e543640e 	bge	fp,r21,802774 <___vfprintf_internal_r+0x1c78>
  8019e4:	01402074 	movhi	r5,129
  8019e8:	29416484 	addi	r5,r5,1426
  8019ec:	d9402c15 	stw	r5,176(sp)
  8019f0:	04c001c4 	movi	r19,7
  8019f4:	00000306 	br	801a04 <___vfprintf_internal_r+0xf08>
  8019f8:	ad7ffc04 	addi	r21,r21,-16
  8019fc:	42000204 	addi	r8,r8,8
  801a00:	e540110e 	bge	fp,r21,801a48 <___vfprintf_internal_r+0xf4c>
  801a04:	18c00404 	addi	r3,r3,16
  801a08:	10800044 	addi	r2,r2,1
  801a0c:	45000015 	stw	r20,0(r8)
  801a10:	47000115 	stw	fp,4(r8)
  801a14:	d8c02015 	stw	r3,128(sp)
  801a18:	d8801f15 	stw	r2,124(sp)
  801a1c:	98bff60e 	bge	r19,r2,8019f8 <__alt_data_end+0xff8019f8>
  801a20:	b009883a 	mov	r4,r22
  801a24:	b80b883a 	mov	r5,r23
  801a28:	d9801e04 	addi	r6,sp,120
  801a2c:	0807dc40 	call	807dc4 <__sprint_r>
  801a30:	103d261e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  801a34:	ad7ffc04 	addi	r21,r21,-16
  801a38:	d8c02017 	ldw	r3,128(sp)
  801a3c:	d8801f17 	ldw	r2,124(sp)
  801a40:	da000404 	addi	r8,sp,16
  801a44:	e57fef16 	blt	fp,r21,801a04 <__alt_data_end+0xff801a04>
  801a48:	dac02c17 	ldw	r11,176(sp)
  801a4c:	1d47883a 	add	r3,r3,r21
  801a50:	10800044 	addi	r2,r2,1
  801a54:	42c00015 	stw	r11,0(r8)
  801a58:	45400115 	stw	r21,4(r8)
  801a5c:	d8c02015 	stw	r3,128(sp)
  801a60:	d8801f15 	stw	r2,124(sp)
  801a64:	010001c4 	movi	r4,7
  801a68:	20819116 	blt	r4,r2,8020b0 <___vfprintf_internal_r+0x15b4>
  801a6c:	42000204 	addi	r8,r8,8
  801a70:	003dd206 	br	8011bc <__alt_data_end+0xff8011bc>
  801a74:	db003317 	ldw	r12,204(sp)
  801a78:	00800044 	movi	r2,1
  801a7c:	18c00044 	addi	r3,r3,1
  801a80:	1301530e 	bge	r2,r12,801fd0 <___vfprintf_internal_r+0x14d4>
  801a84:	dc001f17 	ldw	r16,124(sp)
  801a88:	dac03117 	ldw	r11,196(sp)
  801a8c:	00800044 	movi	r2,1
  801a90:	84000044 	addi	r16,r16,1
  801a94:	40800115 	stw	r2,4(r8)
  801a98:	42c00015 	stw	r11,0(r8)
  801a9c:	d8c02015 	stw	r3,128(sp)
  801aa0:	dc001f15 	stw	r16,124(sp)
  801aa4:	008001c4 	movi	r2,7
  801aa8:	14016b16 	blt	r2,r16,802058 <___vfprintf_internal_r+0x155c>
  801aac:	42000204 	addi	r8,r8,8
  801ab0:	db003817 	ldw	r12,224(sp)
  801ab4:	dac03517 	ldw	r11,212(sp)
  801ab8:	84000044 	addi	r16,r16,1
  801abc:	1b07883a 	add	r3,r3,r12
  801ac0:	42c00015 	stw	r11,0(r8)
  801ac4:	43000115 	stw	r12,4(r8)
  801ac8:	d8c02015 	stw	r3,128(sp)
  801acc:	dc001f15 	stw	r16,124(sp)
  801ad0:	008001c4 	movi	r2,7
  801ad4:	14016916 	blt	r2,r16,80207c <___vfprintf_internal_r+0x1580>
  801ad8:	44800204 	addi	r18,r8,8
  801adc:	d9003717 	ldw	r4,220(sp)
  801ae0:	d9403917 	ldw	r5,228(sp)
  801ae4:	000d883a 	mov	r6,zero
  801ae8:	000f883a 	mov	r7,zero
  801aec:	d8c03d15 	stw	r3,244(sp)
  801af0:	080b8680 	call	80b868 <__eqdf2>
  801af4:	d8c03d17 	ldw	r3,244(sp)
  801af8:	db003317 	ldw	r12,204(sp)
  801afc:	1000ad26 	beq	r2,zero,801db4 <___vfprintf_internal_r+0x12b8>
  801b00:	dac03117 	ldw	r11,196(sp)
  801b04:	60bfffc4 	addi	r2,r12,-1
  801b08:	1887883a 	add	r3,r3,r2
  801b0c:	59000044 	addi	r4,r11,1
  801b10:	84000044 	addi	r16,r16,1
  801b14:	90800115 	stw	r2,4(r18)
  801b18:	91000015 	stw	r4,0(r18)
  801b1c:	d8c02015 	stw	r3,128(sp)
  801b20:	dc001f15 	stw	r16,124(sp)
  801b24:	008001c4 	movi	r2,7
  801b28:	14014216 	blt	r2,r16,802034 <___vfprintf_internal_r+0x1538>
  801b2c:	94800204 	addi	r18,r18,8
  801b30:	dac03a17 	ldw	r11,232(sp)
  801b34:	dd4022c4 	addi	r21,sp,139
  801b38:	84000044 	addi	r16,r16,1
  801b3c:	1ac7883a 	add	r3,r3,r11
  801b40:	95400015 	stw	r21,0(r18)
  801b44:	92c00115 	stw	r11,4(r18)
  801b48:	d8c02015 	stw	r3,128(sp)
  801b4c:	dc001f15 	stw	r16,124(sp)
  801b50:	008001c4 	movi	r2,7
  801b54:	14000e16 	blt	r2,r16,801b90 <___vfprintf_internal_r+0x1094>
  801b58:	92000204 	addi	r8,r18,8
  801b5c:	003dcd06 	br	801294 <__alt_data_end+0xff801294>
  801b60:	01002074 	movhi	r4,129
  801b64:	21016484 	addi	r4,r4,1426
  801b68:	d9002c15 	stw	r4,176(sp)
  801b6c:	dac02c17 	ldw	r11,176(sp)
  801b70:	1c07883a 	add	r3,r3,r16
  801b74:	44000115 	stw	r16,4(r8)
  801b78:	42c00015 	stw	r11,0(r8)
  801b7c:	10800044 	addi	r2,r2,1
  801b80:	d8c02015 	stw	r3,128(sp)
  801b84:	d8801f15 	stw	r2,124(sp)
  801b88:	010001c4 	movi	r4,7
  801b8c:	20bdc00e 	bge	r4,r2,801290 <__alt_data_end+0xff801290>
  801b90:	b009883a 	mov	r4,r22
  801b94:	b80b883a 	mov	r5,r23
  801b98:	d9801e04 	addi	r6,sp,120
  801b9c:	0807dc40 	call	807dc4 <__sprint_r>
  801ba0:	103cca1e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  801ba4:	d8c02017 	ldw	r3,128(sp)
  801ba8:	da000404 	addi	r8,sp,16
  801bac:	003db906 	br	801294 <__alt_data_end+0xff801294>
  801bb0:	b009883a 	mov	r4,r22
  801bb4:	b80b883a 	mov	r5,r23
  801bb8:	d9801e04 	addi	r6,sp,120
  801bbc:	0807dc40 	call	807dc4 <__sprint_r>
  801bc0:	103def26 	beq	r2,zero,801380 <__alt_data_end+0xff801380>
  801bc4:	003cc106 	br	800ecc <__alt_data_end+0xff800ecc>
  801bc8:	10803fcc 	andi	r2,r2,255
  801bcc:	1000651e 	bne	r2,zero,801d64 <___vfprintf_internal_r+0x1268>
  801bd0:	8880004c 	andi	r2,r17,1
  801bd4:	10013226 	beq	r2,zero,8020a0 <___vfprintf_internal_r+0x15a4>
  801bd8:	00800c04 	movi	r2,48
  801bdc:	d8c01dc4 	addi	r3,sp,119
  801be0:	d8801dc5 	stb	r2,119(sp)
  801be4:	dc803c17 	ldw	r18,240(sp)
  801be8:	d8c03115 	stw	r3,196(sp)
  801bec:	003d1106 	br	801034 <__alt_data_end+0xff801034>
  801bf0:	b009883a 	mov	r4,r22
  801bf4:	b80b883a 	mov	r5,r23
  801bf8:	d9801e04 	addi	r6,sp,120
  801bfc:	0807dc40 	call	807dc4 <__sprint_r>
  801c00:	103cb21e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  801c04:	d8c02017 	ldw	r3,128(sp)
  801c08:	da000404 	addi	r8,sp,16
  801c0c:	003d9406 	br	801260 <__alt_data_end+0xff801260>
  801c10:	b009883a 	mov	r4,r22
  801c14:	b80b883a 	mov	r5,r23
  801c18:	d9801e04 	addi	r6,sp,120
  801c1c:	0807dc40 	call	807dc4 <__sprint_r>
  801c20:	103caa1e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  801c24:	d8c02017 	ldw	r3,128(sp)
  801c28:	da000404 	addi	r8,sp,16
  801c2c:	003d5206 	br	801178 <__alt_data_end+0xff801178>
  801c30:	b009883a 	mov	r4,r22
  801c34:	b80b883a 	mov	r5,r23
  801c38:	d9801e04 	addi	r6,sp,120
  801c3c:	0807dc40 	call	807dc4 <__sprint_r>
  801c40:	103ca21e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  801c44:	d8c02017 	ldw	r3,128(sp)
  801c48:	da000404 	addi	r8,sp,16
  801c4c:	003d5806 	br	8011b0 <__alt_data_end+0xff8011b0>
  801c50:	d9403b17 	ldw	r5,236(sp)
  801c54:	d8c01e04 	addi	r3,sp,120
  801c58:	988003cc 	andi	r2,r19,15
  801c5c:	e008973a 	slli	r4,fp,28
  801c60:	2885883a 	add	r2,r5,r2
  801c64:	9826d13a 	srli	r19,r19,4
  801c68:	10800003 	ldbu	r2,0(r2)
  801c6c:	e038d13a 	srli	fp,fp,4
  801c70:	18ffffc4 	addi	r3,r3,-1
  801c74:	24e6b03a 	or	r19,r4,r19
  801c78:	18800005 	stb	r2,0(r3)
  801c7c:	9f04b03a 	or	r2,r19,fp
  801c80:	103ff51e 	bne	r2,zero,801c58 <__alt_data_end+0xff801c58>
  801c84:	db002817 	ldw	r12,160(sp)
  801c88:	d8c03115 	stw	r3,196(sp)
  801c8c:	60e5c83a 	sub	r18,r12,r3
  801c90:	003ce806 	br	801034 <__alt_data_end+0xff801034>
  801c94:	dc002617 	ldw	r16,152(sp)
  801c98:	0401b10e 	bge	zero,r16,802360 <___vfprintf_internal_r+0x1864>
  801c9c:	db003117 	ldw	r12,196(sp)
  801ca0:	dac03317 	ldw	r11,204(sp)
  801ca4:	62e1883a 	add	r16,r12,r11
  801ca8:	db003417 	ldw	r12,208(sp)
  801cac:	5825883a 	mov	r18,r11
  801cb0:	62c0010e 	bge	r12,r11,801cb8 <___vfprintf_internal_r+0x11bc>
  801cb4:	6025883a 	mov	r18,r12
  801cb8:	04800b0e 	bge	zero,r18,801ce8 <___vfprintf_internal_r+0x11ec>
  801cbc:	d8801f17 	ldw	r2,124(sp)
  801cc0:	dac03117 	ldw	r11,196(sp)
  801cc4:	1c87883a 	add	r3,r3,r18
  801cc8:	10800044 	addi	r2,r2,1
  801ccc:	42c00015 	stw	r11,0(r8)
  801cd0:	44800115 	stw	r18,4(r8)
  801cd4:	d8c02015 	stw	r3,128(sp)
  801cd8:	d8801f15 	stw	r2,124(sp)
  801cdc:	010001c4 	movi	r4,7
  801ce0:	20824f16 	blt	r4,r2,802620 <___vfprintf_internal_r+0x1b24>
  801ce4:	42000204 	addi	r8,r8,8
  801ce8:	90024b16 	blt	r18,zero,802618 <___vfprintf_internal_r+0x1b1c>
  801cec:	db003417 	ldw	r12,208(sp)
  801cf0:	64a5c83a 	sub	r18,r12,r18
  801cf4:	0480730e 	bge	zero,r18,801ec4 <___vfprintf_internal_r+0x13c8>
  801cf8:	05400404 	movi	r21,16
  801cfc:	d8801f17 	ldw	r2,124(sp)
  801d00:	ac817d0e 	bge	r21,r18,8022f8 <___vfprintf_internal_r+0x17fc>
  801d04:	01402074 	movhi	r5,129
  801d08:	29416484 	addi	r5,r5,1426
  801d0c:	d9402c15 	stw	r5,176(sp)
  801d10:	070001c4 	movi	fp,7
  801d14:	00000306 	br	801d24 <___vfprintf_internal_r+0x1228>
  801d18:	42000204 	addi	r8,r8,8
  801d1c:	94bffc04 	addi	r18,r18,-16
  801d20:	ac81780e 	bge	r21,r18,802304 <___vfprintf_internal_r+0x1808>
  801d24:	18c00404 	addi	r3,r3,16
  801d28:	10800044 	addi	r2,r2,1
  801d2c:	45000015 	stw	r20,0(r8)
  801d30:	45400115 	stw	r21,4(r8)
  801d34:	d8c02015 	stw	r3,128(sp)
  801d38:	d8801f15 	stw	r2,124(sp)
  801d3c:	e0bff60e 	bge	fp,r2,801d18 <__alt_data_end+0xff801d18>
  801d40:	b009883a 	mov	r4,r22
  801d44:	b80b883a 	mov	r5,r23
  801d48:	d9801e04 	addi	r6,sp,120
  801d4c:	0807dc40 	call	807dc4 <__sprint_r>
  801d50:	103c5e1e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  801d54:	d8c02017 	ldw	r3,128(sp)
  801d58:	d8801f17 	ldw	r2,124(sp)
  801d5c:	da000404 	addi	r8,sp,16
  801d60:	003fee06 	br	801d1c <__alt_data_end+0xff801d1c>
  801d64:	dac01e04 	addi	r11,sp,120
  801d68:	0025883a 	mov	r18,zero
  801d6c:	dac03115 	stw	r11,196(sp)
  801d70:	003cb006 	br	801034 <__alt_data_end+0xff801034>
  801d74:	b009883a 	mov	r4,r22
  801d78:	b80b883a 	mov	r5,r23
  801d7c:	d9801e04 	addi	r6,sp,120
  801d80:	0807dc40 	call	807dc4 <__sprint_r>
  801d84:	103c511e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  801d88:	d8c02017 	ldw	r3,128(sp)
  801d8c:	d8802787 	ldb	r2,158(sp)
  801d90:	da000404 	addi	r8,sp,16
  801d94:	003ceb06 	br	801144 <__alt_data_end+0xff801144>
  801d98:	1cc00017 	ldw	r19,0(r3)
  801d9c:	dac02d17 	ldw	r11,180(sp)
  801da0:	9839d7fa 	srai	fp,r19,31
  801da4:	5ac00104 	addi	r11,r11,4
  801da8:	dac02d15 	stw	r11,180(sp)
  801dac:	e005883a 	mov	r2,fp
  801db0:	003c8106 	br	800fb8 <__alt_data_end+0xff800fb8>
  801db4:	657fffc4 	addi	r21,r12,-1
  801db8:	057f5d0e 	bge	zero,r21,801b30 <__alt_data_end+0xff801b30>
  801dbc:	07000404 	movi	fp,16
  801dc0:	e540900e 	bge	fp,r21,802004 <___vfprintf_internal_r+0x1508>
  801dc4:	01002074 	movhi	r4,129
  801dc8:	21016484 	addi	r4,r4,1426
  801dcc:	d9002c15 	stw	r4,176(sp)
  801dd0:	01c001c4 	movi	r7,7
  801dd4:	00000306 	br	801de4 <___vfprintf_internal_r+0x12e8>
  801dd8:	94800204 	addi	r18,r18,8
  801ddc:	ad7ffc04 	addi	r21,r21,-16
  801de0:	e5408b0e 	bge	fp,r21,802010 <___vfprintf_internal_r+0x1514>
  801de4:	18c00404 	addi	r3,r3,16
  801de8:	84000044 	addi	r16,r16,1
  801dec:	95000015 	stw	r20,0(r18)
  801df0:	97000115 	stw	fp,4(r18)
  801df4:	d8c02015 	stw	r3,128(sp)
  801df8:	dc001f15 	stw	r16,124(sp)
  801dfc:	3c3ff60e 	bge	r7,r16,801dd8 <__alt_data_end+0xff801dd8>
  801e00:	b009883a 	mov	r4,r22
  801e04:	b80b883a 	mov	r5,r23
  801e08:	d9801e04 	addi	r6,sp,120
  801e0c:	d9c03d15 	stw	r7,244(sp)
  801e10:	0807dc40 	call	807dc4 <__sprint_r>
  801e14:	d9c03d17 	ldw	r7,244(sp)
  801e18:	103c2c1e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  801e1c:	d8c02017 	ldw	r3,128(sp)
  801e20:	dc001f17 	ldw	r16,124(sp)
  801e24:	dc800404 	addi	r18,sp,16
  801e28:	003fec06 	br	801ddc <__alt_data_end+0xff801ddc>
  801e2c:	dac02d17 	ldw	r11,180(sp)
  801e30:	0039883a 	mov	fp,zero
  801e34:	0005883a 	mov	r2,zero
  801e38:	5cc00017 	ldw	r19,0(r11)
  801e3c:	5ac00104 	addi	r11,r11,4
  801e40:	dac02d15 	stw	r11,180(sp)
  801e44:	9807883a 	mov	r3,r19
  801e48:	003d5b06 	br	8013b8 <__alt_data_end+0xff8013b8>
  801e4c:	db002d17 	ldw	r12,180(sp)
  801e50:	0039883a 	mov	fp,zero
  801e54:	00800044 	movi	r2,1
  801e58:	64c00017 	ldw	r19,0(r12)
  801e5c:	63000104 	addi	r12,r12,4
  801e60:	db002d15 	stw	r12,180(sp)
  801e64:	9807883a 	mov	r3,r19
  801e68:	003d5306 	br	8013b8 <__alt_data_end+0xff8013b8>
  801e6c:	00800084 	movi	r2,2
  801e70:	9f06b03a 	or	r3,r19,fp
  801e74:	003d5006 	br	8013b8 <__alt_data_end+0xff8013b8>
  801e78:	10803fcc 	andi	r2,r2,255
  801e7c:	1080201c 	xori	r2,r2,128
  801e80:	10bfe004 	addi	r2,r2,-128
  801e84:	01000c04 	movi	r4,48
  801e88:	1101a526 	beq	r2,r4,802520 <___vfprintf_internal_r+0x1a24>
  801e8c:	dac03117 	ldw	r11,196(sp)
  801e90:	db002817 	ldw	r12,160(sp)
  801e94:	193fffc5 	stb	r4,-1(r3)
  801e98:	5affffc4 	addi	r11,r11,-1
  801e9c:	dac03115 	stw	r11,196(sp)
  801ea0:	62e5c83a 	sub	r18,r12,r11
  801ea4:	003c6306 	br	801034 <__alt_data_end+0xff801034>
  801ea8:	b009883a 	mov	r4,r22
  801eac:	b80b883a 	mov	r5,r23
  801eb0:	d9801e04 	addi	r6,sp,120
  801eb4:	0807dc40 	call	807dc4 <__sprint_r>
  801eb8:	103c041e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  801ebc:	d8c02017 	ldw	r3,128(sp)
  801ec0:	da000404 	addi	r8,sp,16
  801ec4:	db003117 	ldw	r12,196(sp)
  801ec8:	dac03417 	ldw	r11,208(sp)
  801ecc:	d8802617 	ldw	r2,152(sp)
  801ed0:	62e5883a 	add	r18,r12,r11
  801ed4:	db003317 	ldw	r12,204(sp)
  801ed8:	13000216 	blt	r2,r12,801ee4 <___vfprintf_internal_r+0x13e8>
  801edc:	8900004c 	andi	r4,r17,1
  801ee0:	20000c26 	beq	r4,zero,801f14 <___vfprintf_internal_r+0x1418>
  801ee4:	dac03817 	ldw	r11,224(sp)
  801ee8:	d9001f17 	ldw	r4,124(sp)
  801eec:	db003517 	ldw	r12,212(sp)
  801ef0:	1ac7883a 	add	r3,r3,r11
  801ef4:	21000044 	addi	r4,r4,1
  801ef8:	43000015 	stw	r12,0(r8)
  801efc:	42c00115 	stw	r11,4(r8)
  801f00:	d8c02015 	stw	r3,128(sp)
  801f04:	d9001f15 	stw	r4,124(sp)
  801f08:	014001c4 	movi	r5,7
  801f0c:	2901cc16 	blt	r5,r4,802640 <___vfprintf_internal_r+0x1b44>
  801f10:	42000204 	addi	r8,r8,8
  801f14:	dac03317 	ldw	r11,204(sp)
  801f18:	8489c83a 	sub	r4,r16,r18
  801f1c:	5885c83a 	sub	r2,r11,r2
  801f20:	1021883a 	mov	r16,r2
  801f24:	2080010e 	bge	r4,r2,801f2c <___vfprintf_internal_r+0x1430>
  801f28:	2021883a 	mov	r16,r4
  801f2c:	04000a0e 	bge	zero,r16,801f58 <___vfprintf_internal_r+0x145c>
  801f30:	d9001f17 	ldw	r4,124(sp)
  801f34:	1c07883a 	add	r3,r3,r16
  801f38:	44800015 	stw	r18,0(r8)
  801f3c:	21000044 	addi	r4,r4,1
  801f40:	44000115 	stw	r16,4(r8)
  801f44:	d8c02015 	stw	r3,128(sp)
  801f48:	d9001f15 	stw	r4,124(sp)
  801f4c:	014001c4 	movi	r5,7
  801f50:	2901e316 	blt	r5,r4,8026e0 <___vfprintf_internal_r+0x1be4>
  801f54:	42000204 	addi	r8,r8,8
  801f58:	8001df16 	blt	r16,zero,8026d8 <___vfprintf_internal_r+0x1bdc>
  801f5c:	1421c83a 	sub	r16,r2,r16
  801f60:	043ccc0e 	bge	zero,r16,801294 <__alt_data_end+0xff801294>
  801f64:	04800404 	movi	r18,16
  801f68:	d8801f17 	ldw	r2,124(sp)
  801f6c:	943efc0e 	bge	r18,r16,801b60 <__alt_data_end+0xff801b60>
  801f70:	01402074 	movhi	r5,129
  801f74:	29416484 	addi	r5,r5,1426
  801f78:	d9402c15 	stw	r5,176(sp)
  801f7c:	054001c4 	movi	r21,7
  801f80:	00000306 	br	801f90 <___vfprintf_internal_r+0x1494>
  801f84:	42000204 	addi	r8,r8,8
  801f88:	843ffc04 	addi	r16,r16,-16
  801f8c:	943ef70e 	bge	r18,r16,801b6c <__alt_data_end+0xff801b6c>
  801f90:	18c00404 	addi	r3,r3,16
  801f94:	10800044 	addi	r2,r2,1
  801f98:	45000015 	stw	r20,0(r8)
  801f9c:	44800115 	stw	r18,4(r8)
  801fa0:	d8c02015 	stw	r3,128(sp)
  801fa4:	d8801f15 	stw	r2,124(sp)
  801fa8:	a8bff60e 	bge	r21,r2,801f84 <__alt_data_end+0xff801f84>
  801fac:	b009883a 	mov	r4,r22
  801fb0:	b80b883a 	mov	r5,r23
  801fb4:	d9801e04 	addi	r6,sp,120
  801fb8:	0807dc40 	call	807dc4 <__sprint_r>
  801fbc:	103bc31e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  801fc0:	d8c02017 	ldw	r3,128(sp)
  801fc4:	d8801f17 	ldw	r2,124(sp)
  801fc8:	da000404 	addi	r8,sp,16
  801fcc:	003fee06 	br	801f88 <__alt_data_end+0xff801f88>
  801fd0:	8888703a 	and	r4,r17,r2
  801fd4:	203eab1e 	bne	r4,zero,801a84 <__alt_data_end+0xff801a84>
  801fd8:	dc001f17 	ldw	r16,124(sp)
  801fdc:	db003117 	ldw	r12,196(sp)
  801fe0:	40800115 	stw	r2,4(r8)
  801fe4:	84000044 	addi	r16,r16,1
  801fe8:	43000015 	stw	r12,0(r8)
  801fec:	d8c02015 	stw	r3,128(sp)
  801ff0:	dc001f15 	stw	r16,124(sp)
  801ff4:	008001c4 	movi	r2,7
  801ff8:	14000e16 	blt	r2,r16,802034 <___vfprintf_internal_r+0x1538>
  801ffc:	44800204 	addi	r18,r8,8
  802000:	003ecb06 	br	801b30 <__alt_data_end+0xff801b30>
  802004:	00802074 	movhi	r2,129
  802008:	10816484 	addi	r2,r2,1426
  80200c:	d8802c15 	stw	r2,176(sp)
  802010:	dac02c17 	ldw	r11,176(sp)
  802014:	1d47883a 	add	r3,r3,r21
  802018:	84000044 	addi	r16,r16,1
  80201c:	92c00015 	stw	r11,0(r18)
  802020:	95400115 	stw	r21,4(r18)
  802024:	d8c02015 	stw	r3,128(sp)
  802028:	dc001f15 	stw	r16,124(sp)
  80202c:	008001c4 	movi	r2,7
  802030:	143ebe0e 	bge	r2,r16,801b2c <__alt_data_end+0xff801b2c>
  802034:	b009883a 	mov	r4,r22
  802038:	b80b883a 	mov	r5,r23
  80203c:	d9801e04 	addi	r6,sp,120
  802040:	0807dc40 	call	807dc4 <__sprint_r>
  802044:	103ba11e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  802048:	d8c02017 	ldw	r3,128(sp)
  80204c:	dc001f17 	ldw	r16,124(sp)
  802050:	dc800404 	addi	r18,sp,16
  802054:	003eb606 	br	801b30 <__alt_data_end+0xff801b30>
  802058:	b009883a 	mov	r4,r22
  80205c:	b80b883a 	mov	r5,r23
  802060:	d9801e04 	addi	r6,sp,120
  802064:	0807dc40 	call	807dc4 <__sprint_r>
  802068:	103b981e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  80206c:	d8c02017 	ldw	r3,128(sp)
  802070:	dc001f17 	ldw	r16,124(sp)
  802074:	da000404 	addi	r8,sp,16
  802078:	003e8d06 	br	801ab0 <__alt_data_end+0xff801ab0>
  80207c:	b009883a 	mov	r4,r22
  802080:	b80b883a 	mov	r5,r23
  802084:	d9801e04 	addi	r6,sp,120
  802088:	0807dc40 	call	807dc4 <__sprint_r>
  80208c:	103b8f1e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  802090:	d8c02017 	ldw	r3,128(sp)
  802094:	dc001f17 	ldw	r16,124(sp)
  802098:	dc800404 	addi	r18,sp,16
  80209c:	003e8f06 	br	801adc <__alt_data_end+0xff801adc>
  8020a0:	db001e04 	addi	r12,sp,120
  8020a4:	0025883a 	mov	r18,zero
  8020a8:	db003115 	stw	r12,196(sp)
  8020ac:	003be106 	br	801034 <__alt_data_end+0xff801034>
  8020b0:	b009883a 	mov	r4,r22
  8020b4:	b80b883a 	mov	r5,r23
  8020b8:	d9801e04 	addi	r6,sp,120
  8020bc:	0807dc40 	call	807dc4 <__sprint_r>
  8020c0:	103b821e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  8020c4:	d8c02017 	ldw	r3,128(sp)
  8020c8:	da000404 	addi	r8,sp,16
  8020cc:	003c3b06 	br	8011bc <__alt_data_end+0xff8011bc>
  8020d0:	04e7c83a 	sub	r19,zero,r19
  8020d4:	9804c03a 	cmpne	r2,r19,zero
  8020d8:	0739c83a 	sub	fp,zero,fp
  8020dc:	e0b9c83a 	sub	fp,fp,r2
  8020e0:	05400b44 	movi	r21,45
  8020e4:	dd402785 	stb	r21,158(sp)
  8020e8:	da403215 	stw	r9,200(sp)
  8020ec:	00800044 	movi	r2,1
  8020f0:	9f06b03a 	or	r3,r19,fp
  8020f4:	003bb506 	br	800fcc <__alt_data_end+0xff800fcc>
  8020f8:	da003f15 	stw	r8,252(sp)
  8020fc:	da403e15 	stw	r9,248(sp)
  802100:	0807a200 	call	807a20 <__fpclassifyd>
  802104:	da003f17 	ldw	r8,252(sp)
  802108:	da403e17 	ldw	r9,248(sp)
  80210c:	1000ce26 	beq	r2,zero,802448 <___vfprintf_internal_r+0x194c>
  802110:	057ff7c4 	movi	r21,-33
  802114:	00bfffc4 	movi	r2,-1
  802118:	856a703a 	and	r21,r16,r21
  80211c:	4881e826 	beq	r9,r2,8028c0 <___vfprintf_internal_r+0x1dc4>
  802120:	008011c4 	movi	r2,71
  802124:	a881e326 	beq	r21,r2,8028b4 <___vfprintf_internal_r+0x1db8>
  802128:	db003917 	ldw	r12,228(sp)
  80212c:	8ac04014 	ori	r11,r17,256
  802130:	dac02d15 	stw	r11,180(sp)
  802134:	6001ed16 	blt	r12,zero,8028ec <___vfprintf_internal_r+0x1df0>
  802138:	dc803917 	ldw	r18,228(sp)
  80213c:	d8002b05 	stb	zero,172(sp)
  802140:	00801984 	movi	r2,102
  802144:	80811826 	beq	r16,r2,8025a8 <___vfprintf_internal_r+0x1aac>
  802148:	00801184 	movi	r2,70
  80214c:	80811626 	beq	r16,r2,8025a8 <___vfprintf_internal_r+0x1aac>
  802150:	00801144 	movi	r2,69
  802154:	a881e926 	beq	r21,r2,8028fc <___vfprintf_internal_r+0x1e00>
  802158:	4839883a 	mov	fp,r9
  80215c:	d8802604 	addi	r2,sp,152
  802160:	d8800115 	stw	r2,4(sp)
  802164:	d9403717 	ldw	r5,220(sp)
  802168:	d8802504 	addi	r2,sp,148
  80216c:	d8800215 	stw	r2,8(sp)
  802170:	d8802104 	addi	r2,sp,132
  802174:	df000015 	stw	fp,0(sp)
  802178:	d8800315 	stw	r2,12(sp)
  80217c:	b009883a 	mov	r4,r22
  802180:	900d883a 	mov	r6,r18
  802184:	01c00084 	movi	r7,2
  802188:	da003f15 	stw	r8,252(sp)
  80218c:	da403e15 	stw	r9,248(sp)
  802190:	0802e800 	call	802e80 <_dtoa_r>
  802194:	d8803115 	stw	r2,196(sp)
  802198:	008019c4 	movi	r2,103
  80219c:	da003f17 	ldw	r8,252(sp)
  8021a0:	da403e17 	ldw	r9,248(sp)
  8021a4:	80800226 	beq	r16,r2,8021b0 <___vfprintf_internal_r+0x16b4>
  8021a8:	008011c4 	movi	r2,71
  8021ac:	8081101e 	bne	r16,r2,8025f0 <___vfprintf_internal_r+0x1af4>
  8021b0:	8880004c 	andi	r2,r17,1
  8021b4:	1001dd26 	beq	r2,zero,80292c <___vfprintf_internal_r+0x1e30>
  8021b8:	db003117 	ldw	r12,196(sp)
  8021bc:	6715883a 	add	r10,r12,fp
  8021c0:	d9003717 	ldw	r4,220(sp)
  8021c4:	900b883a 	mov	r5,r18
  8021c8:	000d883a 	mov	r6,zero
  8021cc:	000f883a 	mov	r7,zero
  8021d0:	da003f15 	stw	r8,252(sp)
  8021d4:	da403e15 	stw	r9,248(sp)
  8021d8:	da803d15 	stw	r10,244(sp)
  8021dc:	080b8680 	call	80b868 <__eqdf2>
  8021e0:	da003f17 	ldw	r8,252(sp)
  8021e4:	da403e17 	ldw	r9,248(sp)
  8021e8:	da803d17 	ldw	r10,244(sp)
  8021ec:	10016526 	beq	r2,zero,802784 <___vfprintf_internal_r+0x1c88>
  8021f0:	d8802117 	ldw	r2,132(sp)
  8021f4:	1280062e 	bgeu	r2,r10,802210 <___vfprintf_internal_r+0x1714>
  8021f8:	01000c04 	movi	r4,48
  8021fc:	10c00044 	addi	r3,r2,1
  802200:	d8c02115 	stw	r3,132(sp)
  802204:	11000005 	stb	r4,0(r2)
  802208:	d8802117 	ldw	r2,132(sp)
  80220c:	12bffb36 	bltu	r2,r10,8021fc <__alt_data_end+0xff8021fc>
  802210:	db003117 	ldw	r12,196(sp)
  802214:	1305c83a 	sub	r2,r2,r12
  802218:	d8803315 	stw	r2,204(sp)
  80221c:	008011c4 	movi	r2,71
  802220:	a8814d26 	beq	r21,r2,802758 <___vfprintf_internal_r+0x1c5c>
  802224:	00801944 	movi	r2,101
  802228:	1402060e 	bge	r2,r16,802a44 <___vfprintf_internal_r+0x1f48>
  80222c:	00801984 	movi	r2,102
  802230:	8081b426 	beq	r16,r2,802904 <___vfprintf_internal_r+0x1e08>
  802234:	db002617 	ldw	r12,152(sp)
  802238:	db003415 	stw	r12,208(sp)
  80223c:	db003417 	ldw	r12,208(sp)
  802240:	dac03317 	ldw	r11,204(sp)
  802244:	62c1a016 	blt	r12,r11,8028c8 <___vfprintf_internal_r+0x1dcc>
  802248:	8c40004c 	andi	r17,r17,1
  80224c:	8801bf1e 	bne	r17,zero,80294c <___vfprintf_internal_r+0x1e50>
  802250:	6005883a 	mov	r2,r12
  802254:	6001b316 	blt	r12,zero,802924 <___vfprintf_internal_r+0x1e28>
  802258:	dc803417 	ldw	r18,208(sp)
  80225c:	df002b07 	ldb	fp,172(sp)
  802260:	e0012e1e 	bne	fp,zero,80271c <___vfprintf_internal_r+0x1c20>
  802264:	dc402d17 	ldw	r17,180(sp)
  802268:	dd402783 	ldbu	r21,158(sp)
  80226c:	d8802b15 	stw	r2,172(sp)
  802270:	dcc02d15 	stw	r19,180(sp)
  802274:	d8003215 	stw	zero,200(sp)
  802278:	003b7306 	br	801048 <__alt_data_end+0xff801048>
  80227c:	00800084 	movi	r2,2
  802280:	003c4d06 	br	8013b8 <__alt_data_end+0xff8013b8>
  802284:	8880040c 	andi	r2,r17,16
  802288:	1000091e 	bne	r2,zero,8022b0 <___vfprintf_internal_r+0x17b4>
  80228c:	8c40100c 	andi	r17,r17,64
  802290:	88000726 	beq	r17,zero,8022b0 <___vfprintf_internal_r+0x17b4>
  802294:	db002d17 	ldw	r12,180(sp)
  802298:	dac02f17 	ldw	r11,188(sp)
  80229c:	60800017 	ldw	r2,0(r12)
  8022a0:	63000104 	addi	r12,r12,4
  8022a4:	db002d15 	stw	r12,180(sp)
  8022a8:	12c0000d 	sth	r11,0(r2)
  8022ac:	003a4e06 	br	800be8 <__alt_data_end+0xff800be8>
  8022b0:	db002d17 	ldw	r12,180(sp)
  8022b4:	dac02f17 	ldw	r11,188(sp)
  8022b8:	60800017 	ldw	r2,0(r12)
  8022bc:	63000104 	addi	r12,r12,4
  8022c0:	db002d15 	stw	r12,180(sp)
  8022c4:	12c00015 	stw	r11,0(r2)
  8022c8:	003a4706 	br	800be8 <__alt_data_end+0xff800be8>
  8022cc:	1c000007 	ldb	r16,0(r3)
  8022d0:	1805883a 	mov	r2,r3
  8022d4:	003a6e06 	br	800c90 <__alt_data_end+0xff800c90>
  8022d8:	88c0100c 	andi	r3,r17,64
  8022dc:	18006b26 	beq	r3,zero,80248c <___vfprintf_internal_r+0x1990>
  8022e0:	dac02d17 	ldw	r11,180(sp)
  8022e4:	14c0000b 	ldhu	r19,0(r2)
  8022e8:	0039883a 	mov	fp,zero
  8022ec:	5ac00104 	addi	r11,r11,4
  8022f0:	dac02d15 	stw	r11,180(sp)
  8022f4:	003cb206 	br	8015c0 <__alt_data_end+0xff8015c0>
  8022f8:	01002074 	movhi	r4,129
  8022fc:	21016484 	addi	r4,r4,1426
  802300:	d9002c15 	stw	r4,176(sp)
  802304:	dac02c17 	ldw	r11,176(sp)
  802308:	1c87883a 	add	r3,r3,r18
  80230c:	10800044 	addi	r2,r2,1
  802310:	42c00015 	stw	r11,0(r8)
  802314:	44800115 	stw	r18,4(r8)
  802318:	d8c02015 	stw	r3,128(sp)
  80231c:	d8801f15 	stw	r2,124(sp)
  802320:	010001c4 	movi	r4,7
  802324:	20bee016 	blt	r4,r2,801ea8 <__alt_data_end+0xff801ea8>
  802328:	42000204 	addi	r8,r8,8
  80232c:	003ee506 	br	801ec4 <__alt_data_end+0xff801ec4>
  802330:	01002074 	movhi	r4,129
  802334:	21016484 	addi	r4,r4,1426
  802338:	d9002c15 	stw	r4,176(sp)
  80233c:	003bbe06 	br	801238 <__alt_data_end+0xff801238>
  802340:	b009883a 	mov	r4,r22
  802344:	b80b883a 	mov	r5,r23
  802348:	d9801e04 	addi	r6,sp,120
  80234c:	0807dc40 	call	807dc4 <__sprint_r>
  802350:	103ade1e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  802354:	d8c02017 	ldw	r3,128(sp)
  802358:	da000404 	addi	r8,sp,16
  80235c:	003d6b06 	br	80190c <__alt_data_end+0xff80190c>
  802360:	d8801f17 	ldw	r2,124(sp)
  802364:	03002074 	movhi	r12,129
  802368:	01000044 	movi	r4,1
  80236c:	18c00044 	addi	r3,r3,1
  802370:	10800044 	addi	r2,r2,1
  802374:	63016404 	addi	r12,r12,1424
  802378:	41000115 	stw	r4,4(r8)
  80237c:	43000015 	stw	r12,0(r8)
  802380:	d8c02015 	stw	r3,128(sp)
  802384:	d8801f15 	stw	r2,124(sp)
  802388:	010001c4 	movi	r4,7
  80238c:	20804916 	blt	r4,r2,8024b4 <___vfprintf_internal_r+0x19b8>
  802390:	42000204 	addi	r8,r8,8
  802394:	8000041e 	bne	r16,zero,8023a8 <___vfprintf_internal_r+0x18ac>
  802398:	dac03317 	ldw	r11,204(sp)
  80239c:	5800021e 	bne	r11,zero,8023a8 <___vfprintf_internal_r+0x18ac>
  8023a0:	8880004c 	andi	r2,r17,1
  8023a4:	103bbb26 	beq	r2,zero,801294 <__alt_data_end+0xff801294>
  8023a8:	db003817 	ldw	r12,224(sp)
  8023ac:	d8801f17 	ldw	r2,124(sp)
  8023b0:	dac03517 	ldw	r11,212(sp)
  8023b4:	1b07883a 	add	r3,r3,r12
  8023b8:	10800044 	addi	r2,r2,1
  8023bc:	42c00015 	stw	r11,0(r8)
  8023c0:	43000115 	stw	r12,4(r8)
  8023c4:	d8c02015 	stw	r3,128(sp)
  8023c8:	d8801f15 	stw	r2,124(sp)
  8023cc:	010001c4 	movi	r4,7
  8023d0:	20812e16 	blt	r4,r2,80288c <___vfprintf_internal_r+0x1d90>
  8023d4:	42000204 	addi	r8,r8,8
  8023d8:	0421c83a 	sub	r16,zero,r16
  8023dc:	04005c0e 	bge	zero,r16,802550 <___vfprintf_internal_r+0x1a54>
  8023e0:	04800404 	movi	r18,16
  8023e4:	94009f0e 	bge	r18,r16,802664 <___vfprintf_internal_r+0x1b68>
  8023e8:	01002074 	movhi	r4,129
  8023ec:	21016484 	addi	r4,r4,1426
  8023f0:	d9002c15 	stw	r4,176(sp)
  8023f4:	054001c4 	movi	r21,7
  8023f8:	00000306 	br	802408 <___vfprintf_internal_r+0x190c>
  8023fc:	42000204 	addi	r8,r8,8
  802400:	843ffc04 	addi	r16,r16,-16
  802404:	94009a0e 	bge	r18,r16,802670 <___vfprintf_internal_r+0x1b74>
  802408:	18c00404 	addi	r3,r3,16
  80240c:	10800044 	addi	r2,r2,1
  802410:	45000015 	stw	r20,0(r8)
  802414:	44800115 	stw	r18,4(r8)
  802418:	d8c02015 	stw	r3,128(sp)
  80241c:	d8801f15 	stw	r2,124(sp)
  802420:	a8bff60e 	bge	r21,r2,8023fc <__alt_data_end+0xff8023fc>
  802424:	b009883a 	mov	r4,r22
  802428:	b80b883a 	mov	r5,r23
  80242c:	d9801e04 	addi	r6,sp,120
  802430:	0807dc40 	call	807dc4 <__sprint_r>
  802434:	103aa51e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  802438:	d8c02017 	ldw	r3,128(sp)
  80243c:	d8801f17 	ldw	r2,124(sp)
  802440:	da000404 	addi	r8,sp,16
  802444:	003fee06 	br	802400 <__alt_data_end+0xff802400>
  802448:	008011c4 	movi	r2,71
  80244c:	1400be16 	blt	r2,r16,802748 <___vfprintf_internal_r+0x1c4c>
  802450:	03002074 	movhi	r12,129
  802454:	63015604 	addi	r12,r12,1368
  802458:	db003115 	stw	r12,196(sp)
  80245c:	00c000c4 	movi	r3,3
  802460:	00bfdfc4 	movi	r2,-129
  802464:	d8c02b15 	stw	r3,172(sp)
  802468:	88a2703a 	and	r17,r17,r2
  80246c:	dd402783 	ldbu	r21,158(sp)
  802470:	dcc02d15 	stw	r19,180(sp)
  802474:	1825883a 	mov	r18,r3
  802478:	d8003215 	stw	zero,200(sp)
  80247c:	d8003415 	stw	zero,208(sp)
  802480:	003af106 	br	801048 <__alt_data_end+0xff801048>
  802484:	4825883a 	mov	r18,r9
  802488:	003c9306 	br	8016d8 <__alt_data_end+0xff8016d8>
  80248c:	db002d17 	ldw	r12,180(sp)
  802490:	14c00017 	ldw	r19,0(r2)
  802494:	0039883a 	mov	fp,zero
  802498:	63000104 	addi	r12,r12,4
  80249c:	db002d15 	stw	r12,180(sp)
  8024a0:	003c4706 	br	8015c0 <__alt_data_end+0xff8015c0>
  8024a4:	00802074 	movhi	r2,129
  8024a8:	10815404 	addi	r2,r2,1360
  8024ac:	d8803115 	stw	r2,196(sp)
  8024b0:	003bf106 	br	801478 <__alt_data_end+0xff801478>
  8024b4:	b009883a 	mov	r4,r22
  8024b8:	b80b883a 	mov	r5,r23
  8024bc:	d9801e04 	addi	r6,sp,120
  8024c0:	0807dc40 	call	807dc4 <__sprint_r>
  8024c4:	103a811e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  8024c8:	dc002617 	ldw	r16,152(sp)
  8024cc:	d8c02017 	ldw	r3,128(sp)
  8024d0:	da000404 	addi	r8,sp,16
  8024d4:	003faf06 	br	802394 <__alt_data_end+0xff802394>
  8024d8:	db002e17 	ldw	r12,184(sp)
  8024dc:	1805883a 	mov	r2,r3
  8024e0:	dac02d15 	stw	r11,180(sp)
  8024e4:	0319c83a 	sub	r12,zero,r12
  8024e8:	db002e15 	stw	r12,184(sp)
  8024ec:	003a8206 	br	800ef8 <__alt_data_end+0xff800ef8>
  8024f0:	18800044 	addi	r2,r3,1
  8024f4:	8c400814 	ori	r17,r17,32
  8024f8:	1c000047 	ldb	r16,1(r3)
  8024fc:	0039e406 	br	800c90 <__alt_data_end+0xff800c90>
  802500:	b009883a 	mov	r4,r22
  802504:	b80b883a 	mov	r5,r23
  802508:	d9801e04 	addi	r6,sp,120
  80250c:	0807dc40 	call	807dc4 <__sprint_r>
  802510:	103a6e1e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  802514:	d8c02017 	ldw	r3,128(sp)
  802518:	da000404 	addi	r8,sp,16
  80251c:	003d0c06 	br	801950 <__alt_data_end+0xff801950>
  802520:	db002817 	ldw	r12,160(sp)
  802524:	d8c03117 	ldw	r3,196(sp)
  802528:	60e5c83a 	sub	r18,r12,r3
  80252c:	003ac106 	br	801034 <__alt_data_end+0xff801034>
  802530:	b009883a 	mov	r4,r22
  802534:	b80b883a 	mov	r5,r23
  802538:	d9801e04 	addi	r6,sp,120
  80253c:	0807dc40 	call	807dc4 <__sprint_r>
  802540:	103a621e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  802544:	d8c02017 	ldw	r3,128(sp)
  802548:	d8801f17 	ldw	r2,124(sp)
  80254c:	da000404 	addi	r8,sp,16
  802550:	db003317 	ldw	r12,204(sp)
  802554:	dac03117 	ldw	r11,196(sp)
  802558:	10800044 	addi	r2,r2,1
  80255c:	1b07883a 	add	r3,r3,r12
  802560:	42c00015 	stw	r11,0(r8)
  802564:	43000115 	stw	r12,4(r8)
  802568:	d8c02015 	stw	r3,128(sp)
  80256c:	d8801f15 	stw	r2,124(sp)
  802570:	010001c4 	movi	r4,7
  802574:	20bb460e 	bge	r4,r2,801290 <__alt_data_end+0xff801290>
  802578:	003d8506 	br	801b90 <__alt_data_end+0xff801b90>
  80257c:	da003f15 	stw	r8,252(sp)
  802580:	0800a640 	call	800a64 <strlen>
  802584:	1025883a 	mov	r18,r2
  802588:	da003f17 	ldw	r8,252(sp)
  80258c:	903c540e 	bge	r18,zero,8016e0 <__alt_data_end+0xff8016e0>
  802590:	0005883a 	mov	r2,zero
  802594:	003c5206 	br	8016e0 <__alt_data_end+0xff8016e0>
  802598:	01002074 	movhi	r4,129
  80259c:	21016884 	addi	r4,r4,1442
  8025a0:	d9003615 	stw	r4,216(sp)
  8025a4:	003adc06 	br	801118 <__alt_data_end+0xff801118>
  8025a8:	d8802604 	addi	r2,sp,152
  8025ac:	d8800115 	stw	r2,4(sp)
  8025b0:	d9403717 	ldw	r5,220(sp)
  8025b4:	d8802504 	addi	r2,sp,148
  8025b8:	d8800215 	stw	r2,8(sp)
  8025bc:	d8802104 	addi	r2,sp,132
  8025c0:	da400015 	stw	r9,0(sp)
  8025c4:	d8800315 	stw	r2,12(sp)
  8025c8:	b009883a 	mov	r4,r22
  8025cc:	900d883a 	mov	r6,r18
  8025d0:	01c000c4 	movi	r7,3
  8025d4:	da003f15 	stw	r8,252(sp)
  8025d8:	da403e15 	stw	r9,248(sp)
  8025dc:	0802e800 	call	802e80 <_dtoa_r>
  8025e0:	da403e17 	ldw	r9,248(sp)
  8025e4:	da003f17 	ldw	r8,252(sp)
  8025e8:	d8803115 	stw	r2,196(sp)
  8025ec:	4839883a 	mov	fp,r9
  8025f0:	dac03117 	ldw	r11,196(sp)
  8025f4:	00801184 	movi	r2,70
  8025f8:	5f15883a 	add	r10,r11,fp
  8025fc:	a8bef01e 	bne	r21,r2,8021c0 <__alt_data_end+0xff8021c0>
  802600:	59000007 	ldb	r4,0(r11)
  802604:	00800c04 	movi	r2,48
  802608:	2080d526 	beq	r4,r2,802960 <___vfprintf_internal_r+0x1e64>
  80260c:	d8c02617 	ldw	r3,152(sp)
  802610:	50d5883a 	add	r10,r10,r3
  802614:	003eea06 	br	8021c0 <__alt_data_end+0xff8021c0>
  802618:	0025883a 	mov	r18,zero
  80261c:	003db306 	br	801cec <__alt_data_end+0xff801cec>
  802620:	b009883a 	mov	r4,r22
  802624:	b80b883a 	mov	r5,r23
  802628:	d9801e04 	addi	r6,sp,120
  80262c:	0807dc40 	call	807dc4 <__sprint_r>
  802630:	103a261e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  802634:	d8c02017 	ldw	r3,128(sp)
  802638:	da000404 	addi	r8,sp,16
  80263c:	003daa06 	br	801ce8 <__alt_data_end+0xff801ce8>
  802640:	b009883a 	mov	r4,r22
  802644:	b80b883a 	mov	r5,r23
  802648:	d9801e04 	addi	r6,sp,120
  80264c:	0807dc40 	call	807dc4 <__sprint_r>
  802650:	103a1e1e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  802654:	d8802617 	ldw	r2,152(sp)
  802658:	d8c02017 	ldw	r3,128(sp)
  80265c:	da000404 	addi	r8,sp,16
  802660:	003e2c06 	br	801f14 <__alt_data_end+0xff801f14>
  802664:	03002074 	movhi	r12,129
  802668:	63016484 	addi	r12,r12,1426
  80266c:	db002c15 	stw	r12,176(sp)
  802670:	dac02c17 	ldw	r11,176(sp)
  802674:	1c07883a 	add	r3,r3,r16
  802678:	10800044 	addi	r2,r2,1
  80267c:	42c00015 	stw	r11,0(r8)
  802680:	44000115 	stw	r16,4(r8)
  802684:	d8c02015 	stw	r3,128(sp)
  802688:	d8801f15 	stw	r2,124(sp)
  80268c:	010001c4 	movi	r4,7
  802690:	20bfa716 	blt	r4,r2,802530 <__alt_data_end+0xff802530>
  802694:	42000204 	addi	r8,r8,8
  802698:	003fad06 	br	802550 <__alt_data_end+0xff802550>
  80269c:	00800184 	movi	r2,6
  8026a0:	1240012e 	bgeu	r2,r9,8026a8 <___vfprintf_internal_r+0x1bac>
  8026a4:	1013883a 	mov	r9,r2
  8026a8:	4825883a 	mov	r18,r9
  8026ac:	4805883a 	mov	r2,r9
  8026b0:	4800c216 	blt	r9,zero,8029bc <___vfprintf_internal_r+0x1ec0>
  8026b4:	d8802b15 	stw	r2,172(sp)
  8026b8:	00802074 	movhi	r2,129
  8026bc:	10816204 	addi	r2,r2,1416
  8026c0:	d8803115 	stw	r2,196(sp)
  8026c4:	dcc02d15 	stw	r19,180(sp)
  8026c8:	d8003215 	stw	zero,200(sp)
  8026cc:	d8003415 	stw	zero,208(sp)
  8026d0:	0005883a 	mov	r2,zero
  8026d4:	003a6306 	br	801064 <__alt_data_end+0xff801064>
  8026d8:	0021883a 	mov	r16,zero
  8026dc:	003e1f06 	br	801f5c <__alt_data_end+0xff801f5c>
  8026e0:	b009883a 	mov	r4,r22
  8026e4:	b80b883a 	mov	r5,r23
  8026e8:	d9801e04 	addi	r6,sp,120
  8026ec:	0807dc40 	call	807dc4 <__sprint_r>
  8026f0:	1039f61e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  8026f4:	d8802617 	ldw	r2,152(sp)
  8026f8:	db003317 	ldw	r12,204(sp)
  8026fc:	d8c02017 	ldw	r3,128(sp)
  802700:	da000404 	addi	r8,sp,16
  802704:	6085c83a 	sub	r2,r12,r2
  802708:	003e1306 	br	801f58 <__alt_data_end+0xff801f58>
  80270c:	03002074 	movhi	r12,129
  802710:	63016884 	addi	r12,r12,1442
  802714:	db003615 	stw	r12,216(sp)
  802718:	003b0206 	br	801324 <__alt_data_end+0xff801324>
  80271c:	00c00b44 	movi	r3,45
  802720:	d8802b15 	stw	r2,172(sp)
  802724:	dc402d17 	ldw	r17,180(sp)
  802728:	d8c02785 	stb	r3,158(sp)
  80272c:	dcc02d15 	stw	r19,180(sp)
  802730:	d8003215 	stw	zero,200(sp)
  802734:	00800b44 	movi	r2,45
  802738:	003a4706 	br	801058 <__alt_data_end+0xff801058>
  80273c:	05400b44 	movi	r21,45
  802740:	dd402785 	stb	r21,158(sp)
  802744:	003b4706 	br	801464 <__alt_data_end+0xff801464>
  802748:	00802074 	movhi	r2,129
  80274c:	10815704 	addi	r2,r2,1372
  802750:	d8803115 	stw	r2,196(sp)
  802754:	003f4106 	br	80245c <__alt_data_end+0xff80245c>
  802758:	d8c02617 	ldw	r3,152(sp)
  80275c:	00bfff44 	movi	r2,-3
  802760:	18801116 	blt	r3,r2,8027a8 <___vfprintf_internal_r+0x1cac>
  802764:	48c01016 	blt	r9,r3,8027a8 <___vfprintf_internal_r+0x1cac>
  802768:	d8c03415 	stw	r3,208(sp)
  80276c:	040019c4 	movi	r16,103
  802770:	003eb206 	br	80223c <__alt_data_end+0xff80223c>
  802774:	01002074 	movhi	r4,129
  802778:	21016484 	addi	r4,r4,1426
  80277c:	d9002c15 	stw	r4,176(sp)
  802780:	003cb106 	br	801a48 <__alt_data_end+0xff801a48>
  802784:	5005883a 	mov	r2,r10
  802788:	003ea106 	br	802210 <__alt_data_end+0xff802210>
  80278c:	da402b15 	stw	r9,172(sp)
  802790:	dd402783 	ldbu	r21,158(sp)
  802794:	4825883a 	mov	r18,r9
  802798:	dcc02d15 	stw	r19,180(sp)
  80279c:	d8003215 	stw	zero,200(sp)
  8027a0:	d8003415 	stw	zero,208(sp)
  8027a4:	003a2806 	br	801048 <__alt_data_end+0xff801048>
  8027a8:	843fff84 	addi	r16,r16,-2
  8027ac:	1f3fffc4 	addi	fp,r3,-1
  8027b0:	df002615 	stw	fp,152(sp)
  8027b4:	dc0022c5 	stb	r16,139(sp)
  8027b8:	e0009816 	blt	fp,zero,802a1c <___vfprintf_internal_r+0x1f20>
  8027bc:	00800ac4 	movi	r2,43
  8027c0:	d8802305 	stb	r2,140(sp)
  8027c4:	00800244 	movi	r2,9
  8027c8:	1700750e 	bge	r2,fp,8029a0 <___vfprintf_internal_r+0x1ea4>
  8027cc:	dd4022c4 	addi	r21,sp,139
  8027d0:	dc002c15 	stw	r16,176(sp)
  8027d4:	4025883a 	mov	r18,r8
  8027d8:	a821883a 	mov	r16,r21
  8027dc:	e009883a 	mov	r4,fp
  8027e0:	01400284 	movi	r5,10
  8027e4:	080a6940 	call	80a694 <__modsi3>
  8027e8:	10800c04 	addi	r2,r2,48
  8027ec:	843fffc4 	addi	r16,r16,-1
  8027f0:	e009883a 	mov	r4,fp
  8027f4:	01400284 	movi	r5,10
  8027f8:	80800005 	stb	r2,0(r16)
  8027fc:	080a6400 	call	80a640 <__divsi3>
  802800:	1039883a 	mov	fp,r2
  802804:	00800244 	movi	r2,9
  802808:	173ff416 	blt	r2,fp,8027dc <__alt_data_end+0xff8027dc>
  80280c:	9011883a 	mov	r8,r18
  802810:	e0800c04 	addi	r2,fp,48
  802814:	8025883a 	mov	r18,r16
  802818:	913fffc4 	addi	r4,r18,-1
  80281c:	90bfffc5 	stb	r2,-1(r18)
  802820:	dc002c17 	ldw	r16,176(sp)
  802824:	2540852e 	bgeu	r4,r21,802a3c <___vfprintf_internal_r+0x1f40>
  802828:	d9402384 	addi	r5,sp,142
  80282c:	2c8bc83a 	sub	r5,r5,r18
  802830:	d8c02344 	addi	r3,sp,141
  802834:	a94b883a 	add	r5,r21,r5
  802838:	00000106 	br	802840 <___vfprintf_internal_r+0x1d44>
  80283c:	20800003 	ldbu	r2,0(r4)
  802840:	18800005 	stb	r2,0(r3)
  802844:	18c00044 	addi	r3,r3,1
  802848:	21000044 	addi	r4,r4,1
  80284c:	197ffb1e 	bne	r3,r5,80283c <__alt_data_end+0xff80283c>
  802850:	d8802304 	addi	r2,sp,140
  802854:	1485c83a 	sub	r2,r2,r18
  802858:	d8c02344 	addi	r3,sp,141
  80285c:	1885883a 	add	r2,r3,r2
  802860:	dac03317 	ldw	r11,204(sp)
  802864:	156bc83a 	sub	r21,r2,r21
  802868:	dd403a15 	stw	r21,232(sp)
  80286c:	00800044 	movi	r2,1
  802870:	5d65883a 	add	r18,r11,r21
  802874:	12c0660e 	bge	r2,r11,802a10 <___vfprintf_internal_r+0x1f14>
  802878:	94800044 	addi	r18,r18,1
  80287c:	9005883a 	mov	r2,r18
  802880:	90006116 	blt	r18,zero,802a08 <___vfprintf_internal_r+0x1f0c>
  802884:	d8003415 	stw	zero,208(sp)
  802888:	003e7406 	br	80225c <__alt_data_end+0xff80225c>
  80288c:	b009883a 	mov	r4,r22
  802890:	b80b883a 	mov	r5,r23
  802894:	d9801e04 	addi	r6,sp,120
  802898:	0807dc40 	call	807dc4 <__sprint_r>
  80289c:	10398b1e 	bne	r2,zero,800ecc <__alt_data_end+0xff800ecc>
  8028a0:	dc002617 	ldw	r16,152(sp)
  8028a4:	d8c02017 	ldw	r3,128(sp)
  8028a8:	d8801f17 	ldw	r2,124(sp)
  8028ac:	da000404 	addi	r8,sp,16
  8028b0:	003ec906 	br	8023d8 <__alt_data_end+0xff8023d8>
  8028b4:	483e1c1e 	bne	r9,zero,802128 <__alt_data_end+0xff802128>
  8028b8:	9013883a 	mov	r9,r18
  8028bc:	003e1a06 	br	802128 <__alt_data_end+0xff802128>
  8028c0:	02400184 	movi	r9,6
  8028c4:	003e1806 	br	802128 <__alt_data_end+0xff802128>
  8028c8:	d8c03417 	ldw	r3,208(sp)
  8028cc:	00c04b0e 	bge	zero,r3,8029fc <___vfprintf_internal_r+0x1f00>
  8028d0:	04800044 	movi	r18,1
  8028d4:	dac03317 	ldw	r11,204(sp)
  8028d8:	92e5883a 	add	r18,r18,r11
  8028dc:	9005883a 	mov	r2,r18
  8028e0:	903e5e0e 	bge	r18,zero,80225c <__alt_data_end+0xff80225c>
  8028e4:	0005883a 	mov	r2,zero
  8028e8:	003e5c06 	br	80225c <__alt_data_end+0xff80225c>
  8028ec:	00c00b44 	movi	r3,45
  8028f0:	64a0003c 	xorhi	r18,r12,32768
  8028f4:	d8c02b05 	stb	r3,172(sp)
  8028f8:	003e1106 	br	802140 <__alt_data_end+0xff802140>
  8028fc:	4f000044 	addi	fp,r9,1
  802900:	003e1606 	br	80215c <__alt_data_end+0xff80215c>
  802904:	d8c02617 	ldw	r3,152(sp)
  802908:	d8c03415 	stw	r3,208(sp)
  80290c:	00c0350e 	bge	zero,r3,8029e4 <___vfprintf_internal_r+0x1ee8>
  802910:	4800081e 	bne	r9,zero,802934 <___vfprintf_internal_r+0x1e38>
  802914:	8c40004c 	andi	r17,r17,1
  802918:	8800061e 	bne	r17,zero,802934 <___vfprintf_internal_r+0x1e38>
  80291c:	1805883a 	mov	r2,r3
  802920:	183e4d0e 	bge	r3,zero,802258 <__alt_data_end+0xff802258>
  802924:	0005883a 	mov	r2,zero
  802928:	003e4b06 	br	802258 <__alt_data_end+0xff802258>
  80292c:	d8802117 	ldw	r2,132(sp)
  802930:	003e3706 	br	802210 <__alt_data_end+0xff802210>
  802934:	dac03417 	ldw	r11,208(sp)
  802938:	4a400044 	addi	r9,r9,1
  80293c:	5a65883a 	add	r18,r11,r9
  802940:	9005883a 	mov	r2,r18
  802944:	903e450e 	bge	r18,zero,80225c <__alt_data_end+0xff80225c>
  802948:	003fe606 	br	8028e4 <__alt_data_end+0xff8028e4>
  80294c:	db003417 	ldw	r12,208(sp)
  802950:	64800044 	addi	r18,r12,1
  802954:	9005883a 	mov	r2,r18
  802958:	903e400e 	bge	r18,zero,80225c <__alt_data_end+0xff80225c>
  80295c:	003fe106 	br	8028e4 <__alt_data_end+0xff8028e4>
  802960:	d9003717 	ldw	r4,220(sp)
  802964:	900b883a 	mov	r5,r18
  802968:	000d883a 	mov	r6,zero
  80296c:	000f883a 	mov	r7,zero
  802970:	da003f15 	stw	r8,252(sp)
  802974:	da403e15 	stw	r9,248(sp)
  802978:	da803d15 	stw	r10,244(sp)
  80297c:	080b8680 	call	80b868 <__eqdf2>
  802980:	da003f17 	ldw	r8,252(sp)
  802984:	da403e17 	ldw	r9,248(sp)
  802988:	da803d17 	ldw	r10,244(sp)
  80298c:	103f1f26 	beq	r2,zero,80260c <__alt_data_end+0xff80260c>
  802990:	00800044 	movi	r2,1
  802994:	1707c83a 	sub	r3,r2,fp
  802998:	d8c02615 	stw	r3,152(sp)
  80299c:	003f1c06 	br	802610 <__alt_data_end+0xff802610>
  8029a0:	00800c04 	movi	r2,48
  8029a4:	e0c00c04 	addi	r3,fp,48
  8029a8:	d8802345 	stb	r2,141(sp)
  8029ac:	d8c02385 	stb	r3,142(sp)
  8029b0:	d88023c4 	addi	r2,sp,143
  8029b4:	dd4022c4 	addi	r21,sp,139
  8029b8:	003fa906 	br	802860 <__alt_data_end+0xff802860>
  8029bc:	0005883a 	mov	r2,zero
  8029c0:	003f3c06 	br	8026b4 <__alt_data_end+0xff8026b4>
  8029c4:	dac02d17 	ldw	r11,180(sp)
  8029c8:	5a400017 	ldw	r9,0(r11)
  8029cc:	5ac00104 	addi	r11,r11,4
  8029d0:	dac02d15 	stw	r11,180(sp)
  8029d4:	483ec80e 	bge	r9,zero,8024f8 <__alt_data_end+0xff8024f8>
  8029d8:	027fffc4 	movi	r9,-1
  8029dc:	1c000047 	ldb	r16,1(r3)
  8029e0:	0038ab06 	br	800c90 <__alt_data_end+0xff800c90>
  8029e4:	4800111e 	bne	r9,zero,802a2c <___vfprintf_internal_r+0x1f30>
  8029e8:	8c40004c 	andi	r17,r17,1
  8029ec:	88000f1e 	bne	r17,zero,802a2c <___vfprintf_internal_r+0x1f30>
  8029f0:	00800044 	movi	r2,1
  8029f4:	1025883a 	mov	r18,r2
  8029f8:	003e1806 	br	80225c <__alt_data_end+0xff80225c>
  8029fc:	04800084 	movi	r18,2
  802a00:	90e5c83a 	sub	r18,r18,r3
  802a04:	003fb306 	br	8028d4 <__alt_data_end+0xff8028d4>
  802a08:	0005883a 	mov	r2,zero
  802a0c:	003f9d06 	br	802884 <__alt_data_end+0xff802884>
  802a10:	88a2703a 	and	r17,r17,r2
  802a14:	883f9926 	beq	r17,zero,80287c <__alt_data_end+0xff80287c>
  802a18:	003f9706 	br	802878 <__alt_data_end+0xff802878>
  802a1c:	00800b44 	movi	r2,45
  802a20:	0739c83a 	sub	fp,zero,fp
  802a24:	d8802305 	stb	r2,140(sp)
  802a28:	003f6606 	br	8027c4 <__alt_data_end+0xff8027c4>
  802a2c:	4c800084 	addi	r18,r9,2
  802a30:	9005883a 	mov	r2,r18
  802a34:	903e090e 	bge	r18,zero,80225c <__alt_data_end+0xff80225c>
  802a38:	003faa06 	br	8028e4 <__alt_data_end+0xff8028e4>
  802a3c:	d8802344 	addi	r2,sp,141
  802a40:	003f8706 	br	802860 <__alt_data_end+0xff802860>
  802a44:	d8c02617 	ldw	r3,152(sp)
  802a48:	003f5806 	br	8027ac <__alt_data_end+0xff8027ac>

00802a4c <__vfprintf_internal>:
  802a4c:	2007883a 	mov	r3,r4
  802a50:	01002074 	movhi	r4,129
  802a54:	2105f804 	addi	r4,r4,6112
  802a58:	21000017 	ldw	r4,0(r4)
  802a5c:	2805883a 	mov	r2,r5
  802a60:	300f883a 	mov	r7,r6
  802a64:	180b883a 	mov	r5,r3
  802a68:	100d883a 	mov	r6,r2
  802a6c:	0800afc1 	jmpi	800afc <___vfprintf_internal_r>

00802a70 <__sbprintf>:
  802a70:	2880030b 	ldhu	r2,12(r5)
  802a74:	2ac01917 	ldw	r11,100(r5)
  802a78:	2a80038b 	ldhu	r10,14(r5)
  802a7c:	2a400717 	ldw	r9,28(r5)
  802a80:	2a000917 	ldw	r8,36(r5)
  802a84:	defee204 	addi	sp,sp,-1144
  802a88:	00c10004 	movi	r3,1024
  802a8c:	dc011a15 	stw	r16,1128(sp)
  802a90:	10bfff4c 	andi	r2,r2,65533
  802a94:	2821883a 	mov	r16,r5
  802a98:	d8cb883a 	add	r5,sp,r3
  802a9c:	dc811c15 	stw	r18,1136(sp)
  802aa0:	dc411b15 	stw	r17,1132(sp)
  802aa4:	dfc11d15 	stw	ra,1140(sp)
  802aa8:	2025883a 	mov	r18,r4
  802aac:	d881030d 	sth	r2,1036(sp)
  802ab0:	dac11915 	stw	r11,1124(sp)
  802ab4:	da81038d 	sth	r10,1038(sp)
  802ab8:	da410715 	stw	r9,1052(sp)
  802abc:	da010915 	stw	r8,1060(sp)
  802ac0:	dec10015 	stw	sp,1024(sp)
  802ac4:	dec10415 	stw	sp,1040(sp)
  802ac8:	d8c10215 	stw	r3,1032(sp)
  802acc:	d8c10515 	stw	r3,1044(sp)
  802ad0:	d8010615 	stw	zero,1048(sp)
  802ad4:	0800afc0 	call	800afc <___vfprintf_internal_r>
  802ad8:	1023883a 	mov	r17,r2
  802adc:	10000416 	blt	r2,zero,802af0 <__sbprintf+0x80>
  802ae0:	9009883a 	mov	r4,r18
  802ae4:	d9410004 	addi	r5,sp,1024
  802ae8:	08047b00 	call	8047b0 <_fflush_r>
  802aec:	10000d1e 	bne	r2,zero,802b24 <__sbprintf+0xb4>
  802af0:	d8c1030b 	ldhu	r3,1036(sp)
  802af4:	18c0100c 	andi	r3,r3,64
  802af8:	18000326 	beq	r3,zero,802b08 <__sbprintf+0x98>
  802afc:	8080030b 	ldhu	r2,12(r16)
  802b00:	10801014 	ori	r2,r2,64
  802b04:	8080030d 	sth	r2,12(r16)
  802b08:	8805883a 	mov	r2,r17
  802b0c:	dfc11d17 	ldw	ra,1140(sp)
  802b10:	dc811c17 	ldw	r18,1136(sp)
  802b14:	dc411b17 	ldw	r17,1132(sp)
  802b18:	dc011a17 	ldw	r16,1128(sp)
  802b1c:	dec11e04 	addi	sp,sp,1144
  802b20:	f800283a 	ret
  802b24:	047fffc4 	movi	r17,-1
  802b28:	003ff106 	br	802af0 <__alt_data_end+0xff802af0>

00802b2c <__swsetup_r>:
  802b2c:	00802074 	movhi	r2,129
  802b30:	defffd04 	addi	sp,sp,-12
  802b34:	1085f804 	addi	r2,r2,6112
  802b38:	dc400115 	stw	r17,4(sp)
  802b3c:	2023883a 	mov	r17,r4
  802b40:	11000017 	ldw	r4,0(r2)
  802b44:	dc000015 	stw	r16,0(sp)
  802b48:	dfc00215 	stw	ra,8(sp)
  802b4c:	2821883a 	mov	r16,r5
  802b50:	20000226 	beq	r4,zero,802b5c <__swsetup_r+0x30>
  802b54:	20c00e17 	ldw	r3,56(r4)
  802b58:	18003126 	beq	r3,zero,802c20 <__swsetup_r+0xf4>
  802b5c:	8080030b 	ldhu	r2,12(r16)
  802b60:	10c0020c 	andi	r3,r2,8
  802b64:	100d883a 	mov	r6,r2
  802b68:	18000f26 	beq	r3,zero,802ba8 <__swsetup_r+0x7c>
  802b6c:	80c00417 	ldw	r3,16(r16)
  802b70:	18001526 	beq	r3,zero,802bc8 <__swsetup_r+0x9c>
  802b74:	1100004c 	andi	r4,r2,1
  802b78:	20001c1e 	bne	r4,zero,802bec <__swsetup_r+0xc0>
  802b7c:	1080008c 	andi	r2,r2,2
  802b80:	1000291e 	bne	r2,zero,802c28 <__swsetup_r+0xfc>
  802b84:	80800517 	ldw	r2,20(r16)
  802b88:	80800215 	stw	r2,8(r16)
  802b8c:	18001c26 	beq	r3,zero,802c00 <__swsetup_r+0xd4>
  802b90:	0005883a 	mov	r2,zero
  802b94:	dfc00217 	ldw	ra,8(sp)
  802b98:	dc400117 	ldw	r17,4(sp)
  802b9c:	dc000017 	ldw	r16,0(sp)
  802ba0:	dec00304 	addi	sp,sp,12
  802ba4:	f800283a 	ret
  802ba8:	3080040c 	andi	r2,r6,16
  802bac:	10002e26 	beq	r2,zero,802c68 <__swsetup_r+0x13c>
  802bb0:	3080010c 	andi	r2,r6,4
  802bb4:	10001e1e 	bne	r2,zero,802c30 <__swsetup_r+0x104>
  802bb8:	80c00417 	ldw	r3,16(r16)
  802bbc:	30800214 	ori	r2,r6,8
  802bc0:	8080030d 	sth	r2,12(r16)
  802bc4:	183feb1e 	bne	r3,zero,802b74 <__alt_data_end+0xff802b74>
  802bc8:	1140a00c 	andi	r5,r2,640
  802bcc:	01008004 	movi	r4,512
  802bd0:	293fe826 	beq	r5,r4,802b74 <__alt_data_end+0xff802b74>
  802bd4:	8809883a 	mov	r4,r17
  802bd8:	800b883a 	mov	r5,r16
  802bdc:	08057180 	call	805718 <__smakebuf_r>
  802be0:	8080030b 	ldhu	r2,12(r16)
  802be4:	80c00417 	ldw	r3,16(r16)
  802be8:	003fe206 	br	802b74 <__alt_data_end+0xff802b74>
  802bec:	80800517 	ldw	r2,20(r16)
  802bf0:	80000215 	stw	zero,8(r16)
  802bf4:	0085c83a 	sub	r2,zero,r2
  802bf8:	80800615 	stw	r2,24(r16)
  802bfc:	183fe41e 	bne	r3,zero,802b90 <__alt_data_end+0xff802b90>
  802c00:	80c0030b 	ldhu	r3,12(r16)
  802c04:	0005883a 	mov	r2,zero
  802c08:	1900200c 	andi	r4,r3,128
  802c0c:	203fe126 	beq	r4,zero,802b94 <__alt_data_end+0xff802b94>
  802c10:	18c01014 	ori	r3,r3,64
  802c14:	80c0030d 	sth	r3,12(r16)
  802c18:	00bfffc4 	movi	r2,-1
  802c1c:	003fdd06 	br	802b94 <__alt_data_end+0xff802b94>
  802c20:	0804b8c0 	call	804b8c <__sinit>
  802c24:	003fcd06 	br	802b5c <__alt_data_end+0xff802b5c>
  802c28:	0005883a 	mov	r2,zero
  802c2c:	003fd606 	br	802b88 <__alt_data_end+0xff802b88>
  802c30:	81400c17 	ldw	r5,48(r16)
  802c34:	28000626 	beq	r5,zero,802c50 <__swsetup_r+0x124>
  802c38:	80801004 	addi	r2,r16,64
  802c3c:	28800326 	beq	r5,r2,802c4c <__swsetup_r+0x120>
  802c40:	8809883a 	mov	r4,r17
  802c44:	0804d000 	call	804d00 <_free_r>
  802c48:	8180030b 	ldhu	r6,12(r16)
  802c4c:	80000c15 	stw	zero,48(r16)
  802c50:	80c00417 	ldw	r3,16(r16)
  802c54:	00bff6c4 	movi	r2,-37
  802c58:	118c703a 	and	r6,r2,r6
  802c5c:	80000115 	stw	zero,4(r16)
  802c60:	80c00015 	stw	r3,0(r16)
  802c64:	003fd506 	br	802bbc <__alt_data_end+0xff802bbc>
  802c68:	00800244 	movi	r2,9
  802c6c:	88800015 	stw	r2,0(r17)
  802c70:	30801014 	ori	r2,r6,64
  802c74:	8080030d 	sth	r2,12(r16)
  802c78:	00bfffc4 	movi	r2,-1
  802c7c:	003fc506 	br	802b94 <__alt_data_end+0xff802b94>

00802c80 <quorem>:
  802c80:	defff704 	addi	sp,sp,-36
  802c84:	dc800215 	stw	r18,8(sp)
  802c88:	20800417 	ldw	r2,16(r4)
  802c8c:	2c800417 	ldw	r18,16(r5)
  802c90:	dfc00815 	stw	ra,32(sp)
  802c94:	ddc00715 	stw	r23,28(sp)
  802c98:	dd800615 	stw	r22,24(sp)
  802c9c:	dd400515 	stw	r21,20(sp)
  802ca0:	dd000415 	stw	r20,16(sp)
  802ca4:	dcc00315 	stw	r19,12(sp)
  802ca8:	dc400115 	stw	r17,4(sp)
  802cac:	dc000015 	stw	r16,0(sp)
  802cb0:	14807116 	blt	r2,r18,802e78 <quorem+0x1f8>
  802cb4:	94bfffc4 	addi	r18,r18,-1
  802cb8:	94ad883a 	add	r22,r18,r18
  802cbc:	b5ad883a 	add	r22,r22,r22
  802cc0:	2c400504 	addi	r17,r5,20
  802cc4:	8da9883a 	add	r20,r17,r22
  802cc8:	25400504 	addi	r21,r4,20
  802ccc:	282f883a 	mov	r23,r5
  802cd0:	adad883a 	add	r22,r21,r22
  802cd4:	a1400017 	ldw	r5,0(r20)
  802cd8:	2021883a 	mov	r16,r4
  802cdc:	b1000017 	ldw	r4,0(r22)
  802ce0:	29400044 	addi	r5,r5,1
  802ce4:	080a6f00 	call	80a6f0 <__udivsi3>
  802ce8:	1027883a 	mov	r19,r2
  802cec:	10002c26 	beq	r2,zero,802da0 <quorem+0x120>
  802cf0:	a813883a 	mov	r9,r21
  802cf4:	8811883a 	mov	r8,r17
  802cf8:	0009883a 	mov	r4,zero
  802cfc:	000d883a 	mov	r6,zero
  802d00:	41c00017 	ldw	r7,0(r8)
  802d04:	49400017 	ldw	r5,0(r9)
  802d08:	42000104 	addi	r8,r8,4
  802d0c:	38bfffcc 	andi	r2,r7,65535
  802d10:	14c5383a 	mul	r2,r2,r19
  802d14:	380ed43a 	srli	r7,r7,16
  802d18:	28ffffcc 	andi	r3,r5,65535
  802d1c:	2085883a 	add	r2,r4,r2
  802d20:	1008d43a 	srli	r4,r2,16
  802d24:	3ccf383a 	mul	r7,r7,r19
  802d28:	198d883a 	add	r6,r3,r6
  802d2c:	10ffffcc 	andi	r3,r2,65535
  802d30:	30c7c83a 	sub	r3,r6,r3
  802d34:	280ad43a 	srli	r5,r5,16
  802d38:	21c9883a 	add	r4,r4,r7
  802d3c:	180dd43a 	srai	r6,r3,16
  802d40:	20bfffcc 	andi	r2,r4,65535
  802d44:	288bc83a 	sub	r5,r5,r2
  802d48:	298b883a 	add	r5,r5,r6
  802d4c:	280e943a 	slli	r7,r5,16
  802d50:	18ffffcc 	andi	r3,r3,65535
  802d54:	2008d43a 	srli	r4,r4,16
  802d58:	38ceb03a 	or	r7,r7,r3
  802d5c:	49c00015 	stw	r7,0(r9)
  802d60:	280dd43a 	srai	r6,r5,16
  802d64:	4a400104 	addi	r9,r9,4
  802d68:	a23fe52e 	bgeu	r20,r8,802d00 <__alt_data_end+0xff802d00>
  802d6c:	b0800017 	ldw	r2,0(r22)
  802d70:	10000b1e 	bne	r2,zero,802da0 <quorem+0x120>
  802d74:	b0bfff04 	addi	r2,r22,-4
  802d78:	a880082e 	bgeu	r21,r2,802d9c <quorem+0x11c>
  802d7c:	b0ffff17 	ldw	r3,-4(r22)
  802d80:	18000326 	beq	r3,zero,802d90 <quorem+0x110>
  802d84:	00000506 	br	802d9c <quorem+0x11c>
  802d88:	10c00017 	ldw	r3,0(r2)
  802d8c:	1800031e 	bne	r3,zero,802d9c <quorem+0x11c>
  802d90:	10bfff04 	addi	r2,r2,-4
  802d94:	94bfffc4 	addi	r18,r18,-1
  802d98:	a8bffb36 	bltu	r21,r2,802d88 <__alt_data_end+0xff802d88>
  802d9c:	84800415 	stw	r18,16(r16)
  802da0:	8009883a 	mov	r4,r16
  802da4:	b80b883a 	mov	r5,r23
  802da8:	0806dec0 	call	806dec <__mcmp>
  802dac:	10002616 	blt	r2,zero,802e48 <quorem+0x1c8>
  802db0:	9cc00044 	addi	r19,r19,1
  802db4:	a80d883a 	mov	r6,r21
  802db8:	000b883a 	mov	r5,zero
  802dbc:	31000017 	ldw	r4,0(r6)
  802dc0:	88800017 	ldw	r2,0(r17)
  802dc4:	31800104 	addi	r6,r6,4
  802dc8:	20ffffcc 	andi	r3,r4,65535
  802dcc:	194b883a 	add	r5,r3,r5
  802dd0:	10ffffcc 	andi	r3,r2,65535
  802dd4:	28c7c83a 	sub	r3,r5,r3
  802dd8:	1004d43a 	srli	r2,r2,16
  802ddc:	2008d43a 	srli	r4,r4,16
  802de0:	180bd43a 	srai	r5,r3,16
  802de4:	18ffffcc 	andi	r3,r3,65535
  802de8:	2089c83a 	sub	r4,r4,r2
  802dec:	2149883a 	add	r4,r4,r5
  802df0:	2004943a 	slli	r2,r4,16
  802df4:	8c400104 	addi	r17,r17,4
  802df8:	200bd43a 	srai	r5,r4,16
  802dfc:	10c6b03a 	or	r3,r2,r3
  802e00:	30ffff15 	stw	r3,-4(r6)
  802e04:	a47fed2e 	bgeu	r20,r17,802dbc <__alt_data_end+0xff802dbc>
  802e08:	9485883a 	add	r2,r18,r18
  802e0c:	1085883a 	add	r2,r2,r2
  802e10:	a887883a 	add	r3,r21,r2
  802e14:	18800017 	ldw	r2,0(r3)
  802e18:	10000b1e 	bne	r2,zero,802e48 <quorem+0x1c8>
  802e1c:	18bfff04 	addi	r2,r3,-4
  802e20:	a880082e 	bgeu	r21,r2,802e44 <quorem+0x1c4>
  802e24:	18ffff17 	ldw	r3,-4(r3)
  802e28:	18000326 	beq	r3,zero,802e38 <quorem+0x1b8>
  802e2c:	00000506 	br	802e44 <quorem+0x1c4>
  802e30:	10c00017 	ldw	r3,0(r2)
  802e34:	1800031e 	bne	r3,zero,802e44 <quorem+0x1c4>
  802e38:	10bfff04 	addi	r2,r2,-4
  802e3c:	94bfffc4 	addi	r18,r18,-1
  802e40:	a8bffb36 	bltu	r21,r2,802e30 <__alt_data_end+0xff802e30>
  802e44:	84800415 	stw	r18,16(r16)
  802e48:	9805883a 	mov	r2,r19
  802e4c:	dfc00817 	ldw	ra,32(sp)
  802e50:	ddc00717 	ldw	r23,28(sp)
  802e54:	dd800617 	ldw	r22,24(sp)
  802e58:	dd400517 	ldw	r21,20(sp)
  802e5c:	dd000417 	ldw	r20,16(sp)
  802e60:	dcc00317 	ldw	r19,12(sp)
  802e64:	dc800217 	ldw	r18,8(sp)
  802e68:	dc400117 	ldw	r17,4(sp)
  802e6c:	dc000017 	ldw	r16,0(sp)
  802e70:	dec00904 	addi	sp,sp,36
  802e74:	f800283a 	ret
  802e78:	0005883a 	mov	r2,zero
  802e7c:	003ff306 	br	802e4c <__alt_data_end+0xff802e4c>

00802e80 <_dtoa_r>:
  802e80:	20801017 	ldw	r2,64(r4)
  802e84:	deffde04 	addi	sp,sp,-136
  802e88:	dd401d15 	stw	r21,116(sp)
  802e8c:	dcc01b15 	stw	r19,108(sp)
  802e90:	dc801a15 	stw	r18,104(sp)
  802e94:	dc401915 	stw	r17,100(sp)
  802e98:	dc001815 	stw	r16,96(sp)
  802e9c:	dfc02115 	stw	ra,132(sp)
  802ea0:	df002015 	stw	fp,128(sp)
  802ea4:	ddc01f15 	stw	r23,124(sp)
  802ea8:	dd801e15 	stw	r22,120(sp)
  802eac:	dd001c15 	stw	r20,112(sp)
  802eb0:	d9c00315 	stw	r7,12(sp)
  802eb4:	2021883a 	mov	r16,r4
  802eb8:	302b883a 	mov	r21,r6
  802ebc:	2825883a 	mov	r18,r5
  802ec0:	dc402417 	ldw	r17,144(sp)
  802ec4:	3027883a 	mov	r19,r6
  802ec8:	10000826 	beq	r2,zero,802eec <_dtoa_r+0x6c>
  802ecc:	21801117 	ldw	r6,68(r4)
  802ed0:	00c00044 	movi	r3,1
  802ed4:	100b883a 	mov	r5,r2
  802ed8:	1986983a 	sll	r3,r3,r6
  802edc:	11800115 	stw	r6,4(r2)
  802ee0:	10c00215 	stw	r3,8(r2)
  802ee4:	08065c00 	call	8065c0 <_Bfree>
  802ee8:	80001015 	stw	zero,64(r16)
  802eec:	a8002d16 	blt	r21,zero,802fa4 <_dtoa_r+0x124>
  802ef0:	88000015 	stw	zero,0(r17)
  802ef4:	a8dffc2c 	andhi	r3,r21,32752
  802ef8:	009ffc34 	movhi	r2,32752
  802efc:	18801b26 	beq	r3,r2,802f6c <_dtoa_r+0xec>
  802f00:	9009883a 	mov	r4,r18
  802f04:	980b883a 	mov	r5,r19
  802f08:	000d883a 	mov	r6,zero
  802f0c:	000f883a 	mov	r7,zero
  802f10:	080b8680 	call	80b868 <__eqdf2>
  802f14:	10002a1e 	bne	r2,zero,802fc0 <_dtoa_r+0x140>
  802f18:	d8c02317 	ldw	r3,140(sp)
  802f1c:	d9002517 	ldw	r4,148(sp)
  802f20:	00800044 	movi	r2,1
  802f24:	18800015 	stw	r2,0(r3)
  802f28:	2001a226 	beq	r4,zero,8035b4 <_dtoa_r+0x734>
  802f2c:	00802074 	movhi	r2,129
  802f30:	10816444 	addi	r2,r2,1425
  802f34:	20800015 	stw	r2,0(r4)
  802f38:	10bfffc4 	addi	r2,r2,-1
  802f3c:	dfc02117 	ldw	ra,132(sp)
  802f40:	df002017 	ldw	fp,128(sp)
  802f44:	ddc01f17 	ldw	r23,124(sp)
  802f48:	dd801e17 	ldw	r22,120(sp)
  802f4c:	dd401d17 	ldw	r21,116(sp)
  802f50:	dd001c17 	ldw	r20,112(sp)
  802f54:	dcc01b17 	ldw	r19,108(sp)
  802f58:	dc801a17 	ldw	r18,104(sp)
  802f5c:	dc401917 	ldw	r17,100(sp)
  802f60:	dc001817 	ldw	r16,96(sp)
  802f64:	dec02204 	addi	sp,sp,136
  802f68:	f800283a 	ret
  802f6c:	d8c02317 	ldw	r3,140(sp)
  802f70:	0089c3c4 	movi	r2,9999
  802f74:	18800015 	stw	r2,0(r3)
  802f78:	90017c26 	beq	r18,zero,80356c <_dtoa_r+0x6ec>
  802f7c:	00802074 	movhi	r2,129
  802f80:	10817004 	addi	r2,r2,1472
  802f84:	d9002517 	ldw	r4,148(sp)
  802f88:	203fec26 	beq	r4,zero,802f3c <__alt_data_end+0xff802f3c>
  802f8c:	10c000c7 	ldb	r3,3(r2)
  802f90:	18017d1e 	bne	r3,zero,803588 <_dtoa_r+0x708>
  802f94:	10c000c4 	addi	r3,r2,3
  802f98:	d9802517 	ldw	r6,148(sp)
  802f9c:	30c00015 	stw	r3,0(r6)
  802fa0:	003fe606 	br	802f3c <__alt_data_end+0xff802f3c>
  802fa4:	04e00034 	movhi	r19,32768
  802fa8:	9cffffc4 	addi	r19,r19,-1
  802fac:	00800044 	movi	r2,1
  802fb0:	ace6703a 	and	r19,r21,r19
  802fb4:	88800015 	stw	r2,0(r17)
  802fb8:	982b883a 	mov	r21,r19
  802fbc:	003fcd06 	br	802ef4 <__alt_data_end+0xff802ef4>
  802fc0:	d8800204 	addi	r2,sp,8
  802fc4:	a822d53a 	srli	r17,r21,20
  802fc8:	d8800015 	stw	r2,0(sp)
  802fcc:	8009883a 	mov	r4,r16
  802fd0:	900b883a 	mov	r5,r18
  802fd4:	980d883a 	mov	r6,r19
  802fd8:	d9c00104 	addi	r7,sp,4
  802fdc:	08071600 	call	807160 <__d2b>
  802fe0:	1039883a 	mov	fp,r2
  802fe4:	88016a1e 	bne	r17,zero,803590 <_dtoa_r+0x710>
  802fe8:	dd000217 	ldw	r20,8(sp)
  802fec:	dc400117 	ldw	r17,4(sp)
  802ff0:	00befbc4 	movi	r2,-1041
  802ff4:	a463883a 	add	r17,r20,r17
  802ff8:	8882ea16 	blt	r17,r2,803ba4 <_dtoa_r+0xd24>
  802ffc:	00bf0384 	movi	r2,-1010
  803000:	1445c83a 	sub	r2,r2,r17
  803004:	89010484 	addi	r4,r17,1042
  803008:	a8aa983a 	sll	r21,r21,r2
  80300c:	9108d83a 	srl	r4,r18,r4
  803010:	a908b03a 	or	r4,r21,r4
  803014:	080cbf80 	call	80cbf8 <__floatunsidf>
  803018:	017f8434 	movhi	r5,65040
  80301c:	01800044 	movi	r6,1
  803020:	1009883a 	mov	r4,r2
  803024:	194b883a 	add	r5,r3,r5
  803028:	8c7fffc4 	addi	r17,r17,-1
  80302c:	d9800f15 	stw	r6,60(sp)
  803030:	000d883a 	mov	r6,zero
  803034:	01cffe34 	movhi	r7,16376
  803038:	080c1d00 	call	80c1d0 <__subdf3>
  80303c:	0198dbf4 	movhi	r6,25455
  803040:	01cff4f4 	movhi	r7,16339
  803044:	1009883a 	mov	r4,r2
  803048:	180b883a 	mov	r5,r3
  80304c:	3190d844 	addi	r6,r6,17249
  803050:	39e1e9c4 	addi	r7,r7,-30809
  803054:	080baac0 	call	80baac <__muldf3>
  803058:	01a2d874 	movhi	r6,35681
  80305c:	01cff1f4 	movhi	r7,16327
  803060:	180b883a 	mov	r5,r3
  803064:	31b22cc4 	addi	r6,r6,-14157
  803068:	39e28a04 	addi	r7,r7,-30168
  80306c:	1009883a 	mov	r4,r2
  803070:	080a7000 	call	80a700 <__adddf3>
  803074:	8809883a 	mov	r4,r17
  803078:	102d883a 	mov	r22,r2
  80307c:	182b883a 	mov	r21,r3
  803080:	080cb280 	call	80cb28 <__floatsidf>
  803084:	019427f4 	movhi	r6,20639
  803088:	01cff4f4 	movhi	r7,16339
  80308c:	1009883a 	mov	r4,r2
  803090:	180b883a 	mov	r5,r3
  803094:	319e7ec4 	addi	r6,r6,31227
  803098:	39d104c4 	addi	r7,r7,17427
  80309c:	080baac0 	call	80baac <__muldf3>
  8030a0:	b009883a 	mov	r4,r22
  8030a4:	a80b883a 	mov	r5,r21
  8030a8:	100d883a 	mov	r6,r2
  8030ac:	180f883a 	mov	r7,r3
  8030b0:	080a7000 	call	80a700 <__adddf3>
  8030b4:	1009883a 	mov	r4,r2
  8030b8:	180b883a 	mov	r5,r3
  8030bc:	102d883a 	mov	r22,r2
  8030c0:	182b883a 	mov	r21,r3
  8030c4:	080caa00 	call	80caa0 <__fixdfsi>
  8030c8:	b009883a 	mov	r4,r22
  8030cc:	a80b883a 	mov	r5,r21
  8030d0:	000d883a 	mov	r6,zero
  8030d4:	000f883a 	mov	r7,zero
  8030d8:	d8800515 	stw	r2,20(sp)
  8030dc:	080b9cc0 	call	80b9cc <__ledf2>
  8030e0:	10023116 	blt	r2,zero,8039a8 <_dtoa_r+0xb28>
  8030e4:	d8c00517 	ldw	r3,20(sp)
  8030e8:	00800584 	movi	r2,22
  8030ec:	10c21f36 	bltu	r2,r3,80396c <_dtoa_r+0xaec>
  8030f0:	180490fa 	slli	r2,r3,3
  8030f4:	00c02074 	movhi	r3,129
  8030f8:	18c18c04 	addi	r3,r3,1584
  8030fc:	1885883a 	add	r2,r3,r2
  803100:	11000017 	ldw	r4,0(r2)
  803104:	11400117 	ldw	r5,4(r2)
  803108:	900d883a 	mov	r6,r18
  80310c:	980f883a 	mov	r7,r19
  803110:	080b8ec0 	call	80b8ec <__gedf2>
  803114:	0082a70e 	bge	zero,r2,803bb4 <_dtoa_r+0xd34>
  803118:	d9000517 	ldw	r4,20(sp)
  80311c:	d8000d15 	stw	zero,52(sp)
  803120:	213fffc4 	addi	r4,r4,-1
  803124:	d9000515 	stw	r4,20(sp)
  803128:	a463c83a 	sub	r17,r20,r17
  80312c:	8dbfffc4 	addi	r22,r17,-1
  803130:	b0021916 	blt	r22,zero,803998 <_dtoa_r+0xb18>
  803134:	d8000815 	stw	zero,32(sp)
  803138:	d8800517 	ldw	r2,20(sp)
  80313c:	10020e16 	blt	r2,zero,803978 <_dtoa_r+0xaf8>
  803140:	b0ad883a 	add	r22,r22,r2
  803144:	d8800a15 	stw	r2,40(sp)
  803148:	d8000915 	stw	zero,36(sp)
  80314c:	d8c00317 	ldw	r3,12(sp)
  803150:	00800244 	movi	r2,9
  803154:	10c11a36 	bltu	r2,r3,8035c0 <_dtoa_r+0x740>
  803158:	00800144 	movi	r2,5
  80315c:	10c4fc0e 	bge	r2,r3,804550 <_dtoa_r+0x16d0>
  803160:	18ffff04 	addi	r3,r3,-4
  803164:	d8c00315 	stw	r3,12(sp)
  803168:	0029883a 	mov	r20,zero
  80316c:	d9800317 	ldw	r6,12(sp)
  803170:	008000c4 	movi	r2,3
  803174:	3083bd26 	beq	r6,r2,80406c <_dtoa_r+0x11ec>
  803178:	1183670e 	bge	r2,r6,803f18 <_dtoa_r+0x1098>
  80317c:	d8c00317 	ldw	r3,12(sp)
  803180:	00800104 	movi	r2,4
  803184:	1882e726 	beq	r3,r2,803d24 <_dtoa_r+0xea4>
  803188:	00800144 	movi	r2,5
  80318c:	1884f21e 	bne	r3,r2,804558 <_dtoa_r+0x16d8>
  803190:	00800044 	movi	r2,1
  803194:	d8800b15 	stw	r2,44(sp)
  803198:	d8c02217 	ldw	r3,136(sp)
  80319c:	d9000517 	ldw	r4,20(sp)
  8031a0:	1907883a 	add	r3,r3,r4
  8031a4:	19800044 	addi	r6,r3,1
  8031a8:	d8c00c15 	stw	r3,48(sp)
  8031ac:	d9800615 	stw	r6,24(sp)
  8031b0:	0183c30e 	bge	zero,r6,8040c0 <_dtoa_r+0x1240>
  8031b4:	d9800617 	ldw	r6,24(sp)
  8031b8:	3023883a 	mov	r17,r6
  8031bc:	80001115 	stw	zero,68(r16)
  8031c0:	008005c4 	movi	r2,23
  8031c4:	1184f62e 	bgeu	r2,r6,8045a0 <_dtoa_r+0x1720>
  8031c8:	00c00044 	movi	r3,1
  8031cc:	00800104 	movi	r2,4
  8031d0:	1085883a 	add	r2,r2,r2
  8031d4:	11000504 	addi	r4,r2,20
  8031d8:	180b883a 	mov	r5,r3
  8031dc:	18c00044 	addi	r3,r3,1
  8031e0:	313ffb2e 	bgeu	r6,r4,8031d0 <__alt_data_end+0xff8031d0>
  8031e4:	81401115 	stw	r5,68(r16)
  8031e8:	8009883a 	mov	r4,r16
  8031ec:	08065180 	call	806518 <_Balloc>
  8031f0:	d8800715 	stw	r2,28(sp)
  8031f4:	80801015 	stw	r2,64(r16)
  8031f8:	00800384 	movi	r2,14
  8031fc:	1440fd36 	bltu	r2,r17,8035f4 <_dtoa_r+0x774>
  803200:	a000fc26 	beq	r20,zero,8035f4 <_dtoa_r+0x774>
  803204:	d8800517 	ldw	r2,20(sp)
  803208:	0083b90e 	bge	zero,r2,8040f0 <_dtoa_r+0x1270>
  80320c:	d8c00517 	ldw	r3,20(sp)
  803210:	108003cc 	andi	r2,r2,15
  803214:	100490fa 	slli	r2,r2,3
  803218:	182fd13a 	srai	r23,r3,4
  80321c:	00c02074 	movhi	r3,129
  803220:	18c18c04 	addi	r3,r3,1584
  803224:	1885883a 	add	r2,r3,r2
  803228:	b8c0040c 	andi	r3,r23,16
  80322c:	12c00017 	ldw	r11,0(r2)
  803230:	12800117 	ldw	r10,4(r2)
  803234:	18039726 	beq	r3,zero,804094 <_dtoa_r+0x1214>
  803238:	00802074 	movhi	r2,129
  80323c:	10818204 	addi	r2,r2,1544
  803240:	11800817 	ldw	r6,32(r2)
  803244:	11c00917 	ldw	r7,36(r2)
  803248:	9009883a 	mov	r4,r18
  80324c:	980b883a 	mov	r5,r19
  803250:	da801615 	stw	r10,88(sp)
  803254:	dac01515 	stw	r11,84(sp)
  803258:	080af9c0 	call	80af9c <__divdf3>
  80325c:	da801617 	ldw	r10,88(sp)
  803260:	dac01517 	ldw	r11,84(sp)
  803264:	bdc003cc 	andi	r23,r23,15
  803268:	044000c4 	movi	r17,3
  80326c:	d8800e15 	stw	r2,56(sp)
  803270:	182b883a 	mov	r21,r3
  803274:	b8001126 	beq	r23,zero,8032bc <_dtoa_r+0x43c>
  803278:	05002074 	movhi	r20,129
  80327c:	a5018204 	addi	r20,r20,1544
  803280:	5805883a 	mov	r2,r11
  803284:	5007883a 	mov	r3,r10
  803288:	b980004c 	andi	r6,r23,1
  80328c:	1009883a 	mov	r4,r2
  803290:	b82fd07a 	srai	r23,r23,1
  803294:	180b883a 	mov	r5,r3
  803298:	30000426 	beq	r6,zero,8032ac <_dtoa_r+0x42c>
  80329c:	a1800017 	ldw	r6,0(r20)
  8032a0:	a1c00117 	ldw	r7,4(r20)
  8032a4:	8c400044 	addi	r17,r17,1
  8032a8:	080baac0 	call	80baac <__muldf3>
  8032ac:	a5000204 	addi	r20,r20,8
  8032b0:	b83ff51e 	bne	r23,zero,803288 <__alt_data_end+0xff803288>
  8032b4:	1017883a 	mov	r11,r2
  8032b8:	1815883a 	mov	r10,r3
  8032bc:	d9000e17 	ldw	r4,56(sp)
  8032c0:	a80b883a 	mov	r5,r21
  8032c4:	580d883a 	mov	r6,r11
  8032c8:	500f883a 	mov	r7,r10
  8032cc:	080af9c0 	call	80af9c <__divdf3>
  8032d0:	1029883a 	mov	r20,r2
  8032d4:	182b883a 	mov	r21,r3
  8032d8:	d9800d17 	ldw	r6,52(sp)
  8032dc:	30000626 	beq	r6,zero,8032f8 <_dtoa_r+0x478>
  8032e0:	a009883a 	mov	r4,r20
  8032e4:	a80b883a 	mov	r5,r21
  8032e8:	000d883a 	mov	r6,zero
  8032ec:	01cffc34 	movhi	r7,16368
  8032f0:	080b9cc0 	call	80b9cc <__ledf2>
  8032f4:	10043216 	blt	r2,zero,8043c0 <_dtoa_r+0x1540>
  8032f8:	8809883a 	mov	r4,r17
  8032fc:	080cb280 	call	80cb28 <__floatsidf>
  803300:	1009883a 	mov	r4,r2
  803304:	180b883a 	mov	r5,r3
  803308:	a00d883a 	mov	r6,r20
  80330c:	a80f883a 	mov	r7,r21
  803310:	080baac0 	call	80baac <__muldf3>
  803314:	000d883a 	mov	r6,zero
  803318:	1009883a 	mov	r4,r2
  80331c:	180b883a 	mov	r5,r3
  803320:	01d00734 	movhi	r7,16412
  803324:	080a7000 	call	80a700 <__adddf3>
  803328:	1023883a 	mov	r17,r2
  80332c:	d9800617 	ldw	r6,24(sp)
  803330:	00bf3034 	movhi	r2,64704
  803334:	1885883a 	add	r2,r3,r2
  803338:	d8800e15 	stw	r2,56(sp)
  80333c:	30032e26 	beq	r6,zero,803ff8 <_dtoa_r+0x1178>
  803340:	d8c00517 	ldw	r3,20(sp)
  803344:	da800617 	ldw	r10,24(sp)
  803348:	d8c01215 	stw	r3,72(sp)
  80334c:	d9000b17 	ldw	r4,44(sp)
  803350:	2003b026 	beq	r4,zero,804214 <_dtoa_r+0x1394>
  803354:	50bfffc4 	addi	r2,r10,-1
  803358:	100490fa 	slli	r2,r2,3
  80335c:	00c02074 	movhi	r3,129
  803360:	18c18c04 	addi	r3,r3,1584
  803364:	1885883a 	add	r2,r3,r2
  803368:	11800017 	ldw	r6,0(r2)
  80336c:	11c00117 	ldw	r7,4(r2)
  803370:	d8800717 	ldw	r2,28(sp)
  803374:	0009883a 	mov	r4,zero
  803378:	014ff834 	movhi	r5,16352
  80337c:	da801615 	stw	r10,88(sp)
  803380:	15c00044 	addi	r23,r2,1
  803384:	080af9c0 	call	80af9c <__divdf3>
  803388:	d9c00e17 	ldw	r7,56(sp)
  80338c:	880d883a 	mov	r6,r17
  803390:	1009883a 	mov	r4,r2
  803394:	180b883a 	mov	r5,r3
  803398:	080c1d00 	call	80c1d0 <__subdf3>
  80339c:	a80b883a 	mov	r5,r21
  8033a0:	a009883a 	mov	r4,r20
  8033a4:	d8c01015 	stw	r3,64(sp)
  8033a8:	d8800e15 	stw	r2,56(sp)
  8033ac:	080caa00 	call	80caa0 <__fixdfsi>
  8033b0:	1009883a 	mov	r4,r2
  8033b4:	d8801715 	stw	r2,92(sp)
  8033b8:	080cb280 	call	80cb28 <__floatsidf>
  8033bc:	a009883a 	mov	r4,r20
  8033c0:	a80b883a 	mov	r5,r21
  8033c4:	100d883a 	mov	r6,r2
  8033c8:	180f883a 	mov	r7,r3
  8033cc:	080c1d00 	call	80c1d0 <__subdf3>
  8033d0:	da001717 	ldw	r8,92(sp)
  8033d4:	1829883a 	mov	r20,r3
  8033d8:	d8c00717 	ldw	r3,28(sp)
  8033dc:	d9000e17 	ldw	r4,56(sp)
  8033e0:	d9401017 	ldw	r5,64(sp)
  8033e4:	42000c04 	addi	r8,r8,48
  8033e8:	1023883a 	mov	r17,r2
  8033ec:	1a000005 	stb	r8,0(r3)
  8033f0:	880d883a 	mov	r6,r17
  8033f4:	a00f883a 	mov	r7,r20
  8033f8:	402b883a 	mov	r21,r8
  8033fc:	080b8ec0 	call	80b8ec <__gedf2>
  803400:	00844516 	blt	zero,r2,804518 <_dtoa_r+0x1698>
  803404:	0009883a 	mov	r4,zero
  803408:	014ffc34 	movhi	r5,16368
  80340c:	880d883a 	mov	r6,r17
  803410:	a00f883a 	mov	r7,r20
  803414:	080c1d00 	call	80c1d0 <__subdf3>
  803418:	d9000e17 	ldw	r4,56(sp)
  80341c:	d9401017 	ldw	r5,64(sp)
  803420:	100d883a 	mov	r6,r2
  803424:	180f883a 	mov	r7,r3
  803428:	080b8ec0 	call	80b8ec <__gedf2>
  80342c:	da801617 	ldw	r10,88(sp)
  803430:	00843616 	blt	zero,r2,80450c <_dtoa_r+0x168c>
  803434:	00800044 	movi	r2,1
  803438:	12806e0e 	bge	r2,r10,8035f4 <_dtoa_r+0x774>
  80343c:	d9000717 	ldw	r4,28(sp)
  803440:	dd801315 	stw	r22,76(sp)
  803444:	dc001115 	stw	r16,68(sp)
  803448:	2295883a 	add	r10,r4,r10
  80344c:	dcc01415 	stw	r19,80(sp)
  803450:	502d883a 	mov	r22,r10
  803454:	dcc01017 	ldw	r19,64(sp)
  803458:	b821883a 	mov	r16,r23
  80345c:	dc801015 	stw	r18,64(sp)
  803460:	dc800e17 	ldw	r18,56(sp)
  803464:	00000906 	br	80348c <_dtoa_r+0x60c>
  803468:	080c1d00 	call	80c1d0 <__subdf3>
  80346c:	1009883a 	mov	r4,r2
  803470:	180b883a 	mov	r5,r3
  803474:	900d883a 	mov	r6,r18
  803478:	980f883a 	mov	r7,r19
  80347c:	080b9cc0 	call	80b9cc <__ledf2>
  803480:	10040e16 	blt	r2,zero,8044bc <_dtoa_r+0x163c>
  803484:	b821883a 	mov	r16,r23
  803488:	bd841026 	beq	r23,r22,8044cc <_dtoa_r+0x164c>
  80348c:	9009883a 	mov	r4,r18
  803490:	980b883a 	mov	r5,r19
  803494:	000d883a 	mov	r6,zero
  803498:	01d00934 	movhi	r7,16420
  80349c:	080baac0 	call	80baac <__muldf3>
  8034a0:	000d883a 	mov	r6,zero
  8034a4:	01d00934 	movhi	r7,16420
  8034a8:	8809883a 	mov	r4,r17
  8034ac:	a00b883a 	mov	r5,r20
  8034b0:	1025883a 	mov	r18,r2
  8034b4:	1827883a 	mov	r19,r3
  8034b8:	080baac0 	call	80baac <__muldf3>
  8034bc:	180b883a 	mov	r5,r3
  8034c0:	1009883a 	mov	r4,r2
  8034c4:	1823883a 	mov	r17,r3
  8034c8:	1029883a 	mov	r20,r2
  8034cc:	080caa00 	call	80caa0 <__fixdfsi>
  8034d0:	1009883a 	mov	r4,r2
  8034d4:	102b883a 	mov	r21,r2
  8034d8:	080cb280 	call	80cb28 <__floatsidf>
  8034dc:	a009883a 	mov	r4,r20
  8034e0:	880b883a 	mov	r5,r17
  8034e4:	100d883a 	mov	r6,r2
  8034e8:	180f883a 	mov	r7,r3
  8034ec:	080c1d00 	call	80c1d0 <__subdf3>
  8034f0:	ad400c04 	addi	r21,r21,48
  8034f4:	1009883a 	mov	r4,r2
  8034f8:	180b883a 	mov	r5,r3
  8034fc:	900d883a 	mov	r6,r18
  803500:	980f883a 	mov	r7,r19
  803504:	85400005 	stb	r21,0(r16)
  803508:	1023883a 	mov	r17,r2
  80350c:	1829883a 	mov	r20,r3
  803510:	080b9cc0 	call	80b9cc <__ledf2>
  803514:	bdc00044 	addi	r23,r23,1
  803518:	0009883a 	mov	r4,zero
  80351c:	014ffc34 	movhi	r5,16368
  803520:	880d883a 	mov	r6,r17
  803524:	a00f883a 	mov	r7,r20
  803528:	103fcf0e 	bge	r2,zero,803468 <__alt_data_end+0xff803468>
  80352c:	d9801217 	ldw	r6,72(sp)
  803530:	dc001117 	ldw	r16,68(sp)
  803534:	d9800515 	stw	r6,20(sp)
  803538:	8009883a 	mov	r4,r16
  80353c:	e00b883a 	mov	r5,fp
  803540:	08065c00 	call	8065c0 <_Bfree>
  803544:	d8c00517 	ldw	r3,20(sp)
  803548:	d9002317 	ldw	r4,140(sp)
  80354c:	d9802517 	ldw	r6,148(sp)
  803550:	b8000005 	stb	zero,0(r23)
  803554:	18800044 	addi	r2,r3,1
  803558:	20800015 	stw	r2,0(r4)
  80355c:	30027226 	beq	r6,zero,803f28 <_dtoa_r+0x10a8>
  803560:	35c00015 	stw	r23,0(r6)
  803564:	d8800717 	ldw	r2,28(sp)
  803568:	003e7406 	br	802f3c <__alt_data_end+0xff802f3c>
  80356c:	00800434 	movhi	r2,16
  803570:	10bfffc4 	addi	r2,r2,-1
  803574:	a8aa703a 	and	r21,r21,r2
  803578:	a83e801e 	bne	r21,zero,802f7c <__alt_data_end+0xff802f7c>
  80357c:	00802074 	movhi	r2,129
  803580:	10816d04 	addi	r2,r2,1460
  803584:	003e7f06 	br	802f84 <__alt_data_end+0xff802f84>
  803588:	10c00204 	addi	r3,r2,8
  80358c:	003e8206 	br	802f98 <__alt_data_end+0xff802f98>
  803590:	01400434 	movhi	r5,16
  803594:	297fffc4 	addi	r5,r5,-1
  803598:	994a703a 	and	r5,r19,r5
  80359c:	9009883a 	mov	r4,r18
  8035a0:	8c7f0044 	addi	r17,r17,-1023
  8035a4:	294ffc34 	orhi	r5,r5,16368
  8035a8:	dd000217 	ldw	r20,8(sp)
  8035ac:	d8000f15 	stw	zero,60(sp)
  8035b0:	003e9f06 	br	803030 <__alt_data_end+0xff803030>
  8035b4:	00802074 	movhi	r2,129
  8035b8:	10816404 	addi	r2,r2,1424
  8035bc:	003e5f06 	br	802f3c <__alt_data_end+0xff802f3c>
  8035c0:	80001115 	stw	zero,68(r16)
  8035c4:	8009883a 	mov	r4,r16
  8035c8:	000b883a 	mov	r5,zero
  8035cc:	08065180 	call	806518 <_Balloc>
  8035d0:	01bfffc4 	movi	r6,-1
  8035d4:	d8800715 	stw	r2,28(sp)
  8035d8:	80801015 	stw	r2,64(r16)
  8035dc:	00800044 	movi	r2,1
  8035e0:	d9800c15 	stw	r6,48(sp)
  8035e4:	d8800b15 	stw	r2,44(sp)
  8035e8:	d9800615 	stw	r6,24(sp)
  8035ec:	d8002215 	stw	zero,136(sp)
  8035f0:	d8000315 	stw	zero,12(sp)
  8035f4:	d8800117 	ldw	r2,4(sp)
  8035f8:	10008e16 	blt	r2,zero,803834 <_dtoa_r+0x9b4>
  8035fc:	d9000517 	ldw	r4,20(sp)
  803600:	00c00384 	movi	r3,14
  803604:	19008b16 	blt	r3,r4,803834 <_dtoa_r+0x9b4>
  803608:	200490fa 	slli	r2,r4,3
  80360c:	00c02074 	movhi	r3,129
  803610:	d9802217 	ldw	r6,136(sp)
  803614:	18c18c04 	addi	r3,r3,1584
  803618:	1885883a 	add	r2,r3,r2
  80361c:	14400017 	ldw	r17,0(r2)
  803620:	15000117 	ldw	r20,4(r2)
  803624:	3001c716 	blt	r6,zero,803d44 <_dtoa_r+0xec4>
  803628:	880d883a 	mov	r6,r17
  80362c:	a00f883a 	mov	r7,r20
  803630:	9009883a 	mov	r4,r18
  803634:	980b883a 	mov	r5,r19
  803638:	080af9c0 	call	80af9c <__divdf3>
  80363c:	180b883a 	mov	r5,r3
  803640:	1009883a 	mov	r4,r2
  803644:	080caa00 	call	80caa0 <__fixdfsi>
  803648:	1009883a 	mov	r4,r2
  80364c:	102d883a 	mov	r22,r2
  803650:	080cb280 	call	80cb28 <__floatsidf>
  803654:	1009883a 	mov	r4,r2
  803658:	180b883a 	mov	r5,r3
  80365c:	880d883a 	mov	r6,r17
  803660:	a00f883a 	mov	r7,r20
  803664:	080baac0 	call	80baac <__muldf3>
  803668:	9009883a 	mov	r4,r18
  80366c:	980b883a 	mov	r5,r19
  803670:	100d883a 	mov	r6,r2
  803674:	180f883a 	mov	r7,r3
  803678:	080c1d00 	call	80c1d0 <__subdf3>
  80367c:	d9000717 	ldw	r4,28(sp)
  803680:	d9800617 	ldw	r6,24(sp)
  803684:	180b883a 	mov	r5,r3
  803688:	b0c00c04 	addi	r3,r22,48
  80368c:	20c00005 	stb	r3,0(r4)
  803690:	25c00044 	addi	r23,r4,1
  803694:	01000044 	movi	r4,1
  803698:	1011883a 	mov	r8,r2
  80369c:	2807883a 	mov	r3,r5
  8036a0:	31003d26 	beq	r6,r4,803798 <_dtoa_r+0x918>
  8036a4:	000d883a 	mov	r6,zero
  8036a8:	01d00934 	movhi	r7,16420
  8036ac:	1009883a 	mov	r4,r2
  8036b0:	080baac0 	call	80baac <__muldf3>
  8036b4:	1009883a 	mov	r4,r2
  8036b8:	180b883a 	mov	r5,r3
  8036bc:	000d883a 	mov	r6,zero
  8036c0:	000f883a 	mov	r7,zero
  8036c4:	1027883a 	mov	r19,r2
  8036c8:	182b883a 	mov	r21,r3
  8036cc:	080b8680 	call	80b868 <__eqdf2>
  8036d0:	103f9926 	beq	r2,zero,803538 <__alt_data_end+0xff803538>
  8036d4:	d8c00617 	ldw	r3,24(sp)
  8036d8:	d9000717 	ldw	r4,28(sp)
  8036dc:	b825883a 	mov	r18,r23
  8036e0:	18bfffc4 	addi	r2,r3,-1
  8036e4:	20ad883a 	add	r22,r4,r2
  8036e8:	dc000315 	stw	r16,12(sp)
  8036ec:	00000a06 	br	803718 <_dtoa_r+0x898>
  8036f0:	080baac0 	call	80baac <__muldf3>
  8036f4:	1009883a 	mov	r4,r2
  8036f8:	180b883a 	mov	r5,r3
  8036fc:	000d883a 	mov	r6,zero
  803700:	000f883a 	mov	r7,zero
  803704:	1027883a 	mov	r19,r2
  803708:	182b883a 	mov	r21,r3
  80370c:	b825883a 	mov	r18,r23
  803710:	080b8680 	call	80b868 <__eqdf2>
  803714:	10022626 	beq	r2,zero,803fb0 <_dtoa_r+0x1130>
  803718:	880d883a 	mov	r6,r17
  80371c:	a00f883a 	mov	r7,r20
  803720:	9809883a 	mov	r4,r19
  803724:	a80b883a 	mov	r5,r21
  803728:	080af9c0 	call	80af9c <__divdf3>
  80372c:	180b883a 	mov	r5,r3
  803730:	1009883a 	mov	r4,r2
  803734:	080caa00 	call	80caa0 <__fixdfsi>
  803738:	1009883a 	mov	r4,r2
  80373c:	1021883a 	mov	r16,r2
  803740:	080cb280 	call	80cb28 <__floatsidf>
  803744:	1009883a 	mov	r4,r2
  803748:	180b883a 	mov	r5,r3
  80374c:	880d883a 	mov	r6,r17
  803750:	a00f883a 	mov	r7,r20
  803754:	080baac0 	call	80baac <__muldf3>
  803758:	9809883a 	mov	r4,r19
  80375c:	a80b883a 	mov	r5,r21
  803760:	100d883a 	mov	r6,r2
  803764:	180f883a 	mov	r7,r3
  803768:	080c1d00 	call	80c1d0 <__subdf3>
  80376c:	82000c04 	addi	r8,r16,48
  803770:	92000005 	stb	r8,0(r18)
  803774:	1009883a 	mov	r4,r2
  803778:	180b883a 	mov	r5,r3
  80377c:	000d883a 	mov	r6,zero
  803780:	01d00934 	movhi	r7,16420
  803784:	1011883a 	mov	r8,r2
  803788:	bdc00044 	addi	r23,r23,1
  80378c:	95bfd81e 	bne	r18,r22,8036f0 <__alt_data_end+0xff8036f0>
  803790:	802d883a 	mov	r22,r16
  803794:	dc000317 	ldw	r16,12(sp)
  803798:	4009883a 	mov	r4,r8
  80379c:	180b883a 	mov	r5,r3
  8037a0:	400d883a 	mov	r6,r8
  8037a4:	180f883a 	mov	r7,r3
  8037a8:	080a7000 	call	80a700 <__adddf3>
  8037ac:	8809883a 	mov	r4,r17
  8037b0:	a00b883a 	mov	r5,r20
  8037b4:	100d883a 	mov	r6,r2
  8037b8:	180f883a 	mov	r7,r3
  8037bc:	1027883a 	mov	r19,r2
  8037c0:	1825883a 	mov	r18,r3
  8037c4:	080b9cc0 	call	80b9cc <__ledf2>
  8037c8:	10000816 	blt	r2,zero,8037ec <_dtoa_r+0x96c>
  8037cc:	8809883a 	mov	r4,r17
  8037d0:	a00b883a 	mov	r5,r20
  8037d4:	980d883a 	mov	r6,r19
  8037d8:	900f883a 	mov	r7,r18
  8037dc:	080b8680 	call	80b868 <__eqdf2>
  8037e0:	103f551e 	bne	r2,zero,803538 <__alt_data_end+0xff803538>
  8037e4:	b580004c 	andi	r22,r22,1
  8037e8:	b03f5326 	beq	r22,zero,803538 <__alt_data_end+0xff803538>
  8037ec:	bd7fffc3 	ldbu	r21,-1(r23)
  8037f0:	b8bfffc4 	addi	r2,r23,-1
  8037f4:	1007883a 	mov	r3,r2
  8037f8:	01400e44 	movi	r5,57
  8037fc:	d9800717 	ldw	r6,28(sp)
  803800:	00000506 	br	803818 <_dtoa_r+0x998>
  803804:	18ffffc4 	addi	r3,r3,-1
  803808:	30825e26 	beq	r6,r2,804184 <_dtoa_r+0x1304>
  80380c:	1d400003 	ldbu	r21,0(r3)
  803810:	102f883a 	mov	r23,r2
  803814:	10bfffc4 	addi	r2,r2,-1
  803818:	a9003fcc 	andi	r4,r21,255
  80381c:	2100201c 	xori	r4,r4,128
  803820:	213fe004 	addi	r4,r4,-128
  803824:	217ff726 	beq	r4,r5,803804 <__alt_data_end+0xff803804>
  803828:	aa000044 	addi	r8,r21,1
  80382c:	12000005 	stb	r8,0(r2)
  803830:	003f4106 	br	803538 <__alt_data_end+0xff803538>
  803834:	d8c00b17 	ldw	r3,44(sp)
  803838:	18006726 	beq	r3,zero,8039d8 <_dtoa_r+0xb58>
  80383c:	d9000317 	ldw	r4,12(sp)
  803840:	00c00044 	movi	r3,1
  803844:	19016a0e 	bge	r3,r4,803df0 <_dtoa_r+0xf70>
  803848:	d8800617 	ldw	r2,24(sp)
  80384c:	d8c00917 	ldw	r3,36(sp)
  803850:	157fffc4 	addi	r21,r2,-1
  803854:	1d420716 	blt	r3,r21,804074 <_dtoa_r+0x11f4>
  803858:	1d6bc83a 	sub	r21,r3,r21
  80385c:	d8800617 	ldw	r2,24(sp)
  803860:	1002c716 	blt	r2,zero,804380 <_dtoa_r+0x1500>
  803864:	dd000817 	ldw	r20,32(sp)
  803868:	d8800617 	ldw	r2,24(sp)
  80386c:	d9800817 	ldw	r6,32(sp)
  803870:	8009883a 	mov	r4,r16
  803874:	01400044 	movi	r5,1
  803878:	308d883a 	add	r6,r6,r2
  80387c:	d9800815 	stw	r6,32(sp)
  803880:	b0ad883a 	add	r22,r22,r2
  803884:	08069240 	call	806924 <__i2b>
  803888:	1023883a 	mov	r17,r2
  80388c:	a0000826 	beq	r20,zero,8038b0 <_dtoa_r+0xa30>
  803890:	0580070e 	bge	zero,r22,8038b0 <_dtoa_r+0xa30>
  803894:	b005883a 	mov	r2,r22
  803898:	a5812016 	blt	r20,r22,803d1c <_dtoa_r+0xe9c>
  80389c:	d8c00817 	ldw	r3,32(sp)
  8038a0:	a0a9c83a 	sub	r20,r20,r2
  8038a4:	b0adc83a 	sub	r22,r22,r2
  8038a8:	1887c83a 	sub	r3,r3,r2
  8038ac:	d8c00815 	stw	r3,32(sp)
  8038b0:	d9000917 	ldw	r4,36(sp)
  8038b4:	0100140e 	bge	zero,r4,803908 <_dtoa_r+0xa88>
  8038b8:	d9800b17 	ldw	r6,44(sp)
  8038bc:	3001e526 	beq	r6,zero,804054 <_dtoa_r+0x11d4>
  8038c0:	05400e0e 	bge	zero,r21,8038fc <_dtoa_r+0xa7c>
  8038c4:	880b883a 	mov	r5,r17
  8038c8:	8009883a 	mov	r4,r16
  8038cc:	a80d883a 	mov	r6,r21
  8038d0:	0806b5c0 	call	806b5c <__pow5mult>
  8038d4:	e00d883a 	mov	r6,fp
  8038d8:	8009883a 	mov	r4,r16
  8038dc:	100b883a 	mov	r5,r2
  8038e0:	1023883a 	mov	r17,r2
  8038e4:	08069600 	call	806960 <__multiply>
  8038e8:	102f883a 	mov	r23,r2
  8038ec:	e00b883a 	mov	r5,fp
  8038f0:	8009883a 	mov	r4,r16
  8038f4:	08065c00 	call	8065c0 <_Bfree>
  8038f8:	b839883a 	mov	fp,r23
  8038fc:	d8800917 	ldw	r2,36(sp)
  803900:	154dc83a 	sub	r6,r2,r21
  803904:	3001281e 	bne	r6,zero,803da8 <_dtoa_r+0xf28>
  803908:	05c00044 	movi	r23,1
  80390c:	8009883a 	mov	r4,r16
  803910:	b80b883a 	mov	r5,r23
  803914:	08069240 	call	806924 <__i2b>
  803918:	d8c00a17 	ldw	r3,40(sp)
  80391c:	102b883a 	mov	r21,r2
  803920:	00c0310e 	bge	zero,r3,8039e8 <_dtoa_r+0xb68>
  803924:	8009883a 	mov	r4,r16
  803928:	100b883a 	mov	r5,r2
  80392c:	180d883a 	mov	r6,r3
  803930:	0806b5c0 	call	806b5c <__pow5mult>
  803934:	d9000317 	ldw	r4,12(sp)
  803938:	102b883a 	mov	r21,r2
  80393c:	b9011f0e 	bge	r23,r4,803dbc <_dtoa_r+0xf3c>
  803940:	0027883a 	mov	r19,zero
  803944:	a8800417 	ldw	r2,16(r21)
  803948:	10800104 	addi	r2,r2,4
  80394c:	1085883a 	add	r2,r2,r2
  803950:	1085883a 	add	r2,r2,r2
  803954:	a885883a 	add	r2,r21,r2
  803958:	11000017 	ldw	r4,0(r2)
  80395c:	080680c0 	call	80680c <__hi0bits>
  803960:	00c00804 	movi	r3,32
  803964:	1885c83a 	sub	r2,r3,r2
  803968:	00002506 	br	803a00 <_dtoa_r+0xb80>
  80396c:	01800044 	movi	r6,1
  803970:	d9800d15 	stw	r6,52(sp)
  803974:	003dec06 	br	803128 <__alt_data_end+0xff803128>
  803978:	d8c00817 	ldw	r3,32(sp)
  80397c:	d9000517 	ldw	r4,20(sp)
  803980:	d8000a15 	stw	zero,40(sp)
  803984:	1907c83a 	sub	r3,r3,r4
  803988:	010dc83a 	sub	r6,zero,r4
  80398c:	d8c00815 	stw	r3,32(sp)
  803990:	d9800915 	stw	r6,36(sp)
  803994:	003ded06 	br	80314c <__alt_data_end+0xff80314c>
  803998:	05adc83a 	sub	r22,zero,r22
  80399c:	dd800815 	stw	r22,32(sp)
  8039a0:	002d883a 	mov	r22,zero
  8039a4:	003de406 	br	803138 <__alt_data_end+0xff803138>
  8039a8:	d9000517 	ldw	r4,20(sp)
  8039ac:	080cb280 	call	80cb28 <__floatsidf>
  8039b0:	1009883a 	mov	r4,r2
  8039b4:	180b883a 	mov	r5,r3
  8039b8:	b00d883a 	mov	r6,r22
  8039bc:	a80f883a 	mov	r7,r21
  8039c0:	080b8680 	call	80b868 <__eqdf2>
  8039c4:	103dc726 	beq	r2,zero,8030e4 <__alt_data_end+0xff8030e4>
  8039c8:	d8800517 	ldw	r2,20(sp)
  8039cc:	10bfffc4 	addi	r2,r2,-1
  8039d0:	d8800515 	stw	r2,20(sp)
  8039d4:	003dc306 	br	8030e4 <__alt_data_end+0xff8030e4>
  8039d8:	dd400917 	ldw	r21,36(sp)
  8039dc:	dd000817 	ldw	r20,32(sp)
  8039e0:	0023883a 	mov	r17,zero
  8039e4:	003fa906 	br	80388c <__alt_data_end+0xff80388c>
  8039e8:	d9800317 	ldw	r6,12(sp)
  8039ec:	b981670e 	bge	r23,r6,803f8c <_dtoa_r+0x110c>
  8039f0:	0027883a 	mov	r19,zero
  8039f4:	d8c00a17 	ldw	r3,40(sp)
  8039f8:	183fd21e 	bne	r3,zero,803944 <__alt_data_end+0xff803944>
  8039fc:	00800044 	movi	r2,1
  803a00:	1585883a 	add	r2,r2,r22
  803a04:	108007cc 	andi	r2,r2,31
  803a08:	10005f26 	beq	r2,zero,803b88 <_dtoa_r+0xd08>
  803a0c:	00c00804 	movi	r3,32
  803a10:	1887c83a 	sub	r3,r3,r2
  803a14:	01000104 	movi	r4,4
  803a18:	20c2dd0e 	bge	r4,r3,804590 <_dtoa_r+0x1710>
  803a1c:	d9000817 	ldw	r4,32(sp)
  803a20:	00c00704 	movi	r3,28
  803a24:	1885c83a 	sub	r2,r3,r2
  803a28:	2089883a 	add	r4,r4,r2
  803a2c:	d9000815 	stw	r4,32(sp)
  803a30:	a0a9883a 	add	r20,r20,r2
  803a34:	b0ad883a 	add	r22,r22,r2
  803a38:	d8800817 	ldw	r2,32(sp)
  803a3c:	0080050e 	bge	zero,r2,803a54 <_dtoa_r+0xbd4>
  803a40:	e00b883a 	mov	r5,fp
  803a44:	8009883a 	mov	r4,r16
  803a48:	100d883a 	mov	r6,r2
  803a4c:	0806c9c0 	call	806c9c <__lshift>
  803a50:	1039883a 	mov	fp,r2
  803a54:	0580050e 	bge	zero,r22,803a6c <_dtoa_r+0xbec>
  803a58:	a80b883a 	mov	r5,r21
  803a5c:	8009883a 	mov	r4,r16
  803a60:	b00d883a 	mov	r6,r22
  803a64:	0806c9c0 	call	806c9c <__lshift>
  803a68:	102b883a 	mov	r21,r2
  803a6c:	d8c00d17 	ldw	r3,52(sp)
  803a70:	1801161e 	bne	r3,zero,803ecc <_dtoa_r+0x104c>
  803a74:	d8c00617 	ldw	r3,24(sp)
  803a78:	00c12d0e 	bge	zero,r3,803f30 <_dtoa_r+0x10b0>
  803a7c:	d8c00b17 	ldw	r3,44(sp)
  803a80:	1800571e 	bne	r3,zero,803be0 <_dtoa_r+0xd60>
  803a84:	dc800717 	ldw	r18,28(sp)
  803a88:	dcc00617 	ldw	r19,24(sp)
  803a8c:	9029883a 	mov	r20,r18
  803a90:	00000206 	br	803a9c <_dtoa_r+0xc1c>
  803a94:	08065e80 	call	8065e8 <__multadd>
  803a98:	1039883a 	mov	fp,r2
  803a9c:	e009883a 	mov	r4,fp
  803aa0:	a80b883a 	mov	r5,r21
  803aa4:	0802c800 	call	802c80 <quorem>
  803aa8:	10800c04 	addi	r2,r2,48
  803aac:	90800005 	stb	r2,0(r18)
  803ab0:	94800044 	addi	r18,r18,1
  803ab4:	9507c83a 	sub	r3,r18,r20
  803ab8:	8009883a 	mov	r4,r16
  803abc:	e00b883a 	mov	r5,fp
  803ac0:	01800284 	movi	r6,10
  803ac4:	000f883a 	mov	r7,zero
  803ac8:	1cfff216 	blt	r3,r19,803a94 <__alt_data_end+0xff803a94>
  803acc:	1011883a 	mov	r8,r2
  803ad0:	d8800617 	ldw	r2,24(sp)
  803ad4:	00822e0e 	bge	zero,r2,804390 <_dtoa_r+0x1510>
  803ad8:	d9000717 	ldw	r4,28(sp)
  803adc:	0025883a 	mov	r18,zero
  803ae0:	20af883a 	add	r23,r4,r2
  803ae4:	e00b883a 	mov	r5,fp
  803ae8:	01800044 	movi	r6,1
  803aec:	8009883a 	mov	r4,r16
  803af0:	da001715 	stw	r8,92(sp)
  803af4:	0806c9c0 	call	806c9c <__lshift>
  803af8:	1009883a 	mov	r4,r2
  803afc:	a80b883a 	mov	r5,r21
  803b00:	1039883a 	mov	fp,r2
  803b04:	0806dec0 	call	806dec <__mcmp>
  803b08:	da001717 	ldw	r8,92(sp)
  803b0c:	00816e0e 	bge	zero,r2,8040c8 <_dtoa_r+0x1248>
  803b10:	b93fffc3 	ldbu	r4,-1(r23)
  803b14:	b8bfffc4 	addi	r2,r23,-1
  803b18:	1007883a 	mov	r3,r2
  803b1c:	01800e44 	movi	r6,57
  803b20:	d9c00717 	ldw	r7,28(sp)
  803b24:	00000506 	br	803b3c <_dtoa_r+0xcbc>
  803b28:	18ffffc4 	addi	r3,r3,-1
  803b2c:	38811926 	beq	r7,r2,803f94 <_dtoa_r+0x1114>
  803b30:	19000003 	ldbu	r4,0(r3)
  803b34:	102f883a 	mov	r23,r2
  803b38:	10bfffc4 	addi	r2,r2,-1
  803b3c:	21403fcc 	andi	r5,r4,255
  803b40:	2940201c 	xori	r5,r5,128
  803b44:	297fe004 	addi	r5,r5,-128
  803b48:	29bff726 	beq	r5,r6,803b28 <__alt_data_end+0xff803b28>
  803b4c:	21000044 	addi	r4,r4,1
  803b50:	11000005 	stb	r4,0(r2)
  803b54:	8009883a 	mov	r4,r16
  803b58:	a80b883a 	mov	r5,r21
  803b5c:	08065c00 	call	8065c0 <_Bfree>
  803b60:	883e7526 	beq	r17,zero,803538 <__alt_data_end+0xff803538>
  803b64:	90000426 	beq	r18,zero,803b78 <_dtoa_r+0xcf8>
  803b68:	94400326 	beq	r18,r17,803b78 <_dtoa_r+0xcf8>
  803b6c:	8009883a 	mov	r4,r16
  803b70:	900b883a 	mov	r5,r18
  803b74:	08065c00 	call	8065c0 <_Bfree>
  803b78:	8009883a 	mov	r4,r16
  803b7c:	880b883a 	mov	r5,r17
  803b80:	08065c00 	call	8065c0 <_Bfree>
  803b84:	003e6c06 	br	803538 <__alt_data_end+0xff803538>
  803b88:	00800704 	movi	r2,28
  803b8c:	d9800817 	ldw	r6,32(sp)
  803b90:	a0a9883a 	add	r20,r20,r2
  803b94:	b0ad883a 	add	r22,r22,r2
  803b98:	308d883a 	add	r6,r6,r2
  803b9c:	d9800815 	stw	r6,32(sp)
  803ba0:	003fa506 	br	803a38 <__alt_data_end+0xff803a38>
  803ba4:	013efb84 	movi	r4,-1042
  803ba8:	246bc83a 	sub	r21,r4,r17
  803bac:	9548983a 	sll	r4,r18,r21
  803bb0:	003d1806 	br	803014 <__alt_data_end+0xff803014>
  803bb4:	d8000d15 	stw	zero,52(sp)
  803bb8:	003d5b06 	br	803128 <__alt_data_end+0xff803128>
  803bbc:	880b883a 	mov	r5,r17
  803bc0:	8009883a 	mov	r4,r16
  803bc4:	01800284 	movi	r6,10
  803bc8:	000f883a 	mov	r7,zero
  803bcc:	08065e80 	call	8065e8 <__multadd>
  803bd0:	1023883a 	mov	r17,r2
  803bd4:	d8800c17 	ldw	r2,48(sp)
  803bd8:	0082550e 	bge	zero,r2,804530 <_dtoa_r+0x16b0>
  803bdc:	d8800615 	stw	r2,24(sp)
  803be0:	0500050e 	bge	zero,r20,803bf8 <_dtoa_r+0xd78>
  803be4:	880b883a 	mov	r5,r17
  803be8:	8009883a 	mov	r4,r16
  803bec:	a00d883a 	mov	r6,r20
  803bf0:	0806c9c0 	call	806c9c <__lshift>
  803bf4:	1023883a 	mov	r17,r2
  803bf8:	98016a1e 	bne	r19,zero,8041a4 <_dtoa_r+0x1324>
  803bfc:	8829883a 	mov	r20,r17
  803c00:	d9000617 	ldw	r4,24(sp)
  803c04:	dcc00717 	ldw	r19,28(sp)
  803c08:	9480004c 	andi	r18,r18,1
  803c0c:	20bfffc4 	addi	r2,r4,-1
  803c10:	9885883a 	add	r2,r19,r2
  803c14:	d8800415 	stw	r2,16(sp)
  803c18:	dc800615 	stw	r18,24(sp)
  803c1c:	e009883a 	mov	r4,fp
  803c20:	a80b883a 	mov	r5,r21
  803c24:	0802c800 	call	802c80 <quorem>
  803c28:	e009883a 	mov	r4,fp
  803c2c:	880b883a 	mov	r5,r17
  803c30:	102f883a 	mov	r23,r2
  803c34:	0806dec0 	call	806dec <__mcmp>
  803c38:	8009883a 	mov	r4,r16
  803c3c:	a80b883a 	mov	r5,r21
  803c40:	a00d883a 	mov	r6,r20
  803c44:	102d883a 	mov	r22,r2
  803c48:	0806e4c0 	call	806e4c <__mdiff>
  803c4c:	1007883a 	mov	r3,r2
  803c50:	10800317 	ldw	r2,12(r2)
  803c54:	bc800c04 	addi	r18,r23,48
  803c58:	1000971e 	bne	r2,zero,803eb8 <_dtoa_r+0x1038>
  803c5c:	180b883a 	mov	r5,r3
  803c60:	e009883a 	mov	r4,fp
  803c64:	d8c01515 	stw	r3,84(sp)
  803c68:	0806dec0 	call	806dec <__mcmp>
  803c6c:	d8c01517 	ldw	r3,84(sp)
  803c70:	8009883a 	mov	r4,r16
  803c74:	d8801515 	stw	r2,84(sp)
  803c78:	180b883a 	mov	r5,r3
  803c7c:	08065c00 	call	8065c0 <_Bfree>
  803c80:	d8801517 	ldw	r2,84(sp)
  803c84:	1000041e 	bne	r2,zero,803c98 <_dtoa_r+0xe18>
  803c88:	d9800317 	ldw	r6,12(sp)
  803c8c:	3000021e 	bne	r6,zero,803c98 <_dtoa_r+0xe18>
  803c90:	d8c00617 	ldw	r3,24(sp)
  803c94:	18007626 	beq	r3,zero,803e70 <_dtoa_r+0xff0>
  803c98:	b0005b16 	blt	r22,zero,803e08 <_dtoa_r+0xf88>
  803c9c:	b000041e 	bne	r22,zero,803cb0 <_dtoa_r+0xe30>
  803ca0:	d9000317 	ldw	r4,12(sp)
  803ca4:	2000021e 	bne	r4,zero,803cb0 <_dtoa_r+0xe30>
  803ca8:	d8c00617 	ldw	r3,24(sp)
  803cac:	18005626 	beq	r3,zero,803e08 <_dtoa_r+0xf88>
  803cb0:	00814d16 	blt	zero,r2,8041e8 <_dtoa_r+0x1368>
  803cb4:	d8c00417 	ldw	r3,16(sp)
  803cb8:	9d800044 	addi	r22,r19,1
  803cbc:	9c800005 	stb	r18,0(r19)
  803cc0:	b02f883a 	mov	r23,r22
  803cc4:	98c14c26 	beq	r19,r3,8041f8 <_dtoa_r+0x1378>
  803cc8:	e00b883a 	mov	r5,fp
  803ccc:	8009883a 	mov	r4,r16
  803cd0:	01800284 	movi	r6,10
  803cd4:	000f883a 	mov	r7,zero
  803cd8:	08065e80 	call	8065e8 <__multadd>
  803cdc:	1039883a 	mov	fp,r2
  803ce0:	8d006d26 	beq	r17,r20,803e98 <_dtoa_r+0x1018>
  803ce4:	880b883a 	mov	r5,r17
  803ce8:	01800284 	movi	r6,10
  803cec:	000f883a 	mov	r7,zero
  803cf0:	8009883a 	mov	r4,r16
  803cf4:	08065e80 	call	8065e8 <__multadd>
  803cf8:	a00b883a 	mov	r5,r20
  803cfc:	8009883a 	mov	r4,r16
  803d00:	01800284 	movi	r6,10
  803d04:	000f883a 	mov	r7,zero
  803d08:	1023883a 	mov	r17,r2
  803d0c:	08065e80 	call	8065e8 <__multadd>
  803d10:	1029883a 	mov	r20,r2
  803d14:	b027883a 	mov	r19,r22
  803d18:	003fc006 	br	803c1c <__alt_data_end+0xff803c1c>
  803d1c:	a005883a 	mov	r2,r20
  803d20:	003ede06 	br	80389c <__alt_data_end+0xff80389c>
  803d24:	01000044 	movi	r4,1
  803d28:	d9000b15 	stw	r4,44(sp)
  803d2c:	d9802217 	ldw	r6,136(sp)
  803d30:	0180dc0e 	bge	zero,r6,8040a4 <_dtoa_r+0x1224>
  803d34:	3023883a 	mov	r17,r6
  803d38:	d9800c15 	stw	r6,48(sp)
  803d3c:	d9800615 	stw	r6,24(sp)
  803d40:	003d1e06 	br	8031bc <__alt_data_end+0xff8031bc>
  803d44:	d8800617 	ldw	r2,24(sp)
  803d48:	00be3716 	blt	zero,r2,803628 <__alt_data_end+0xff803628>
  803d4c:	1000be1e 	bne	r2,zero,804048 <_dtoa_r+0x11c8>
  803d50:	8809883a 	mov	r4,r17
  803d54:	a00b883a 	mov	r5,r20
  803d58:	000d883a 	mov	r6,zero
  803d5c:	01d00534 	movhi	r7,16404
  803d60:	080baac0 	call	80baac <__muldf3>
  803d64:	1009883a 	mov	r4,r2
  803d68:	180b883a 	mov	r5,r3
  803d6c:	900d883a 	mov	r6,r18
  803d70:	980f883a 	mov	r7,r19
  803d74:	080b8ec0 	call	80b8ec <__gedf2>
  803d78:	002b883a 	mov	r21,zero
  803d7c:	0023883a 	mov	r17,zero
  803d80:	10007a16 	blt	r2,zero,803f6c <_dtoa_r+0x10ec>
  803d84:	d9002217 	ldw	r4,136(sp)
  803d88:	ddc00717 	ldw	r23,28(sp)
  803d8c:	0108303a 	nor	r4,zero,r4
  803d90:	d9000515 	stw	r4,20(sp)
  803d94:	8009883a 	mov	r4,r16
  803d98:	a80b883a 	mov	r5,r21
  803d9c:	08065c00 	call	8065c0 <_Bfree>
  803da0:	883f751e 	bne	r17,zero,803b78 <__alt_data_end+0xff803b78>
  803da4:	003de406 	br	803538 <__alt_data_end+0xff803538>
  803da8:	e00b883a 	mov	r5,fp
  803dac:	8009883a 	mov	r4,r16
  803db0:	0806b5c0 	call	806b5c <__pow5mult>
  803db4:	1039883a 	mov	fp,r2
  803db8:	003ed306 	br	803908 <__alt_data_end+0xff803908>
  803dbc:	903ee01e 	bne	r18,zero,803940 <__alt_data_end+0xff803940>
  803dc0:	00800434 	movhi	r2,16
  803dc4:	10bfffc4 	addi	r2,r2,-1
  803dc8:	9884703a 	and	r2,r19,r2
  803dcc:	103f081e 	bne	r2,zero,8039f0 <__alt_data_end+0xff8039f0>
  803dd0:	9cdffc2c 	andhi	r19,r19,32752
  803dd4:	983f0626 	beq	r19,zero,8039f0 <__alt_data_end+0xff8039f0>
  803dd8:	d8800817 	ldw	r2,32(sp)
  803ddc:	b5800044 	addi	r22,r22,1
  803de0:	04c00044 	movi	r19,1
  803de4:	10800044 	addi	r2,r2,1
  803de8:	d8800815 	stw	r2,32(sp)
  803dec:	003f0106 	br	8039f4 <__alt_data_end+0xff8039f4>
  803df0:	d9800f17 	ldw	r6,60(sp)
  803df4:	30016826 	beq	r6,zero,804398 <_dtoa_r+0x1518>
  803df8:	10810cc4 	addi	r2,r2,1075
  803dfc:	dd400917 	ldw	r21,36(sp)
  803e00:	dd000817 	ldw	r20,32(sp)
  803e04:	003e9906 	br	80386c <__alt_data_end+0xff80386c>
  803e08:	9011883a 	mov	r8,r18
  803e0c:	4007883a 	mov	r3,r8
  803e10:	e02d883a 	mov	r22,fp
  803e14:	0080100e 	bge	zero,r2,803e58 <_dtoa_r+0xfd8>
  803e18:	01800044 	movi	r6,1
  803e1c:	8009883a 	mov	r4,r16
  803e20:	e00b883a 	mov	r5,fp
  803e24:	da001515 	stw	r8,84(sp)
  803e28:	da001715 	stw	r8,92(sp)
  803e2c:	0806c9c0 	call	806c9c <__lshift>
  803e30:	1009883a 	mov	r4,r2
  803e34:	a80b883a 	mov	r5,r21
  803e38:	102d883a 	mov	r22,r2
  803e3c:	0806dec0 	call	806dec <__mcmp>
  803e40:	d8c01517 	ldw	r3,84(sp)
  803e44:	da001717 	ldw	r8,92(sp)
  803e48:	0081a50e 	bge	zero,r2,8044e0 <_dtoa_r+0x1660>
  803e4c:	00800e44 	movi	r2,57
  803e50:	40817b26 	beq	r8,r2,804440 <_dtoa_r+0x15c0>
  803e54:	40c00044 	addi	r3,r8,1
  803e58:	8825883a 	mov	r18,r17
  803e5c:	9dc00044 	addi	r23,r19,1
  803e60:	98c00005 	stb	r3,0(r19)
  803e64:	a023883a 	mov	r17,r20
  803e68:	b039883a 	mov	fp,r22
  803e6c:	003f3906 	br	803b54 <__alt_data_end+0xff803b54>
  803e70:	00800e44 	movi	r2,57
  803e74:	9011883a 	mov	r8,r18
  803e78:	90817226 	beq	r18,r2,804444 <_dtoa_r+0x15c4>
  803e7c:	0580010e 	bge	zero,r22,803e84 <_dtoa_r+0x1004>
  803e80:	ba000c44 	addi	r8,r23,49
  803e84:	8825883a 	mov	r18,r17
  803e88:	9dc00044 	addi	r23,r19,1
  803e8c:	9a000005 	stb	r8,0(r19)
  803e90:	a023883a 	mov	r17,r20
  803e94:	003f2f06 	br	803b54 <__alt_data_end+0xff803b54>
  803e98:	880b883a 	mov	r5,r17
  803e9c:	8009883a 	mov	r4,r16
  803ea0:	01800284 	movi	r6,10
  803ea4:	000f883a 	mov	r7,zero
  803ea8:	08065e80 	call	8065e8 <__multadd>
  803eac:	1023883a 	mov	r17,r2
  803eb0:	1029883a 	mov	r20,r2
  803eb4:	003f9706 	br	803d14 <__alt_data_end+0xff803d14>
  803eb8:	8009883a 	mov	r4,r16
  803ebc:	180b883a 	mov	r5,r3
  803ec0:	08065c00 	call	8065c0 <_Bfree>
  803ec4:	00800044 	movi	r2,1
  803ec8:	003f7306 	br	803c98 <__alt_data_end+0xff803c98>
  803ecc:	e009883a 	mov	r4,fp
  803ed0:	a80b883a 	mov	r5,r21
  803ed4:	0806dec0 	call	806dec <__mcmp>
  803ed8:	103ee60e 	bge	r2,zero,803a74 <__alt_data_end+0xff803a74>
  803edc:	8009883a 	mov	r4,r16
  803ee0:	e00b883a 	mov	r5,fp
  803ee4:	01800284 	movi	r6,10
  803ee8:	000f883a 	mov	r7,zero
  803eec:	08065e80 	call	8065e8 <__multadd>
  803ef0:	d9000517 	ldw	r4,20(sp)
  803ef4:	d9800b17 	ldw	r6,44(sp)
  803ef8:	1039883a 	mov	fp,r2
  803efc:	213fffc4 	addi	r4,r4,-1
  803f00:	d9000515 	stw	r4,20(sp)
  803f04:	303f2d1e 	bne	r6,zero,803bbc <__alt_data_end+0xff803bbc>
  803f08:	d9000c17 	ldw	r4,48(sp)
  803f0c:	0101780e 	bge	zero,r4,8044f0 <_dtoa_r+0x1670>
  803f10:	d9000615 	stw	r4,24(sp)
  803f14:	003edb06 	br	803a84 <__alt_data_end+0xff803a84>
  803f18:	00800084 	movi	r2,2
  803f1c:	30818e1e 	bne	r6,r2,804558 <_dtoa_r+0x16d8>
  803f20:	d8000b15 	stw	zero,44(sp)
  803f24:	003f8106 	br	803d2c <__alt_data_end+0xff803d2c>
  803f28:	d8800717 	ldw	r2,28(sp)
  803f2c:	003c0306 	br	802f3c <__alt_data_end+0xff802f3c>
  803f30:	d9000317 	ldw	r4,12(sp)
  803f34:	00800084 	movi	r2,2
  803f38:	113ed00e 	bge	r2,r4,803a7c <__alt_data_end+0xff803a7c>
  803f3c:	d8c00617 	ldw	r3,24(sp)
  803f40:	183f901e 	bne	r3,zero,803d84 <__alt_data_end+0xff803d84>
  803f44:	a80b883a 	mov	r5,r21
  803f48:	8009883a 	mov	r4,r16
  803f4c:	01800144 	movi	r6,5
  803f50:	000f883a 	mov	r7,zero
  803f54:	08065e80 	call	8065e8 <__multadd>
  803f58:	e009883a 	mov	r4,fp
  803f5c:	100b883a 	mov	r5,r2
  803f60:	102b883a 	mov	r21,r2
  803f64:	0806dec0 	call	806dec <__mcmp>
  803f68:	00bf860e 	bge	zero,r2,803d84 <__alt_data_end+0xff803d84>
  803f6c:	d9800717 	ldw	r6,28(sp)
  803f70:	00800c44 	movi	r2,49
  803f74:	30800005 	stb	r2,0(r6)
  803f78:	d8800517 	ldw	r2,20(sp)
  803f7c:	35c00044 	addi	r23,r6,1
  803f80:	10800044 	addi	r2,r2,1
  803f84:	d8800515 	stw	r2,20(sp)
  803f88:	003f8206 	br	803d94 <__alt_data_end+0xff803d94>
  803f8c:	903e981e 	bne	r18,zero,8039f0 <__alt_data_end+0xff8039f0>
  803f90:	003f8b06 	br	803dc0 <__alt_data_end+0xff803dc0>
  803f94:	d9800517 	ldw	r6,20(sp)
  803f98:	d8c00717 	ldw	r3,28(sp)
  803f9c:	00800c44 	movi	r2,49
  803fa0:	31800044 	addi	r6,r6,1
  803fa4:	d9800515 	stw	r6,20(sp)
  803fa8:	18800005 	stb	r2,0(r3)
  803fac:	003ee906 	br	803b54 <__alt_data_end+0xff803b54>
  803fb0:	dc000317 	ldw	r16,12(sp)
  803fb4:	003d6006 	br	803538 <__alt_data_end+0xff803538>
  803fb8:	8809883a 	mov	r4,r17
  803fbc:	080cb280 	call	80cb28 <__floatsidf>
  803fc0:	a009883a 	mov	r4,r20
  803fc4:	a80b883a 	mov	r5,r21
  803fc8:	100d883a 	mov	r6,r2
  803fcc:	180f883a 	mov	r7,r3
  803fd0:	080baac0 	call	80baac <__muldf3>
  803fd4:	1009883a 	mov	r4,r2
  803fd8:	180b883a 	mov	r5,r3
  803fdc:	000d883a 	mov	r6,zero
  803fe0:	01d00734 	movhi	r7,16412
  803fe4:	080a7000 	call	80a700 <__adddf3>
  803fe8:	1023883a 	mov	r17,r2
  803fec:	00bf3034 	movhi	r2,64704
  803ff0:	1885883a 	add	r2,r3,r2
  803ff4:	d8800e15 	stw	r2,56(sp)
  803ff8:	a009883a 	mov	r4,r20
  803ffc:	a80b883a 	mov	r5,r21
  804000:	000d883a 	mov	r6,zero
  804004:	01d00534 	movhi	r7,16404
  804008:	080c1d00 	call	80c1d0 <__subdf3>
  80400c:	d9c00e17 	ldw	r7,56(sp)
  804010:	1009883a 	mov	r4,r2
  804014:	180b883a 	mov	r5,r3
  804018:	880d883a 	mov	r6,r17
  80401c:	102b883a 	mov	r21,r2
  804020:	1829883a 	mov	r20,r3
  804024:	080b8ec0 	call	80b8ec <__gedf2>
  804028:	00807716 	blt	zero,r2,804208 <_dtoa_r+0x1388>
  80402c:	d8800e17 	ldw	r2,56(sp)
  804030:	a809883a 	mov	r4,r21
  804034:	a00b883a 	mov	r5,r20
  804038:	11e0003c 	xorhi	r7,r2,32768
  80403c:	880d883a 	mov	r6,r17
  804040:	080b9cc0 	call	80b9cc <__ledf2>
  804044:	103d6b0e 	bge	r2,zero,8035f4 <__alt_data_end+0xff8035f4>
  804048:	002b883a 	mov	r21,zero
  80404c:	0023883a 	mov	r17,zero
  804050:	003f4c06 	br	803d84 <__alt_data_end+0xff803d84>
  804054:	d9800917 	ldw	r6,36(sp)
  804058:	e00b883a 	mov	r5,fp
  80405c:	8009883a 	mov	r4,r16
  804060:	0806b5c0 	call	806b5c <__pow5mult>
  804064:	1039883a 	mov	fp,r2
  804068:	003e2706 	br	803908 <__alt_data_end+0xff803908>
  80406c:	d8000b15 	stw	zero,44(sp)
  804070:	003c4906 	br	803198 <__alt_data_end+0xff803198>
  804074:	d9000917 	ldw	r4,36(sp)
  804078:	d9800a17 	ldw	r6,40(sp)
  80407c:	dd400915 	stw	r21,36(sp)
  804080:	a905c83a 	sub	r2,r21,r4
  804084:	308d883a 	add	r6,r6,r2
  804088:	d9800a15 	stw	r6,40(sp)
  80408c:	002b883a 	mov	r21,zero
  804090:	003df206 	br	80385c <__alt_data_end+0xff80385c>
  804094:	dc800e15 	stw	r18,56(sp)
  804098:	982b883a 	mov	r21,r19
  80409c:	04400084 	movi	r17,2
  8040a0:	003c7406 	br	803274 <__alt_data_end+0xff803274>
  8040a4:	04400044 	movi	r17,1
  8040a8:	dc400c15 	stw	r17,48(sp)
  8040ac:	dc400615 	stw	r17,24(sp)
  8040b0:	dc402215 	stw	r17,136(sp)
  8040b4:	80001115 	stw	zero,68(r16)
  8040b8:	000b883a 	mov	r5,zero
  8040bc:	003c4a06 	br	8031e8 <__alt_data_end+0xff8031e8>
  8040c0:	3023883a 	mov	r17,r6
  8040c4:	003ffb06 	br	8040b4 <__alt_data_end+0xff8040b4>
  8040c8:	1000021e 	bne	r2,zero,8040d4 <_dtoa_r+0x1254>
  8040cc:	4200004c 	andi	r8,r8,1
  8040d0:	403e8f1e 	bne	r8,zero,803b10 <__alt_data_end+0xff803b10>
  8040d4:	01000c04 	movi	r4,48
  8040d8:	00000106 	br	8040e0 <_dtoa_r+0x1260>
  8040dc:	102f883a 	mov	r23,r2
  8040e0:	b8bfffc4 	addi	r2,r23,-1
  8040e4:	10c00007 	ldb	r3,0(r2)
  8040e8:	193ffc26 	beq	r3,r4,8040dc <__alt_data_end+0xff8040dc>
  8040ec:	003e9906 	br	803b54 <__alt_data_end+0xff803b54>
  8040f0:	d9000517 	ldw	r4,20(sp)
  8040f4:	012fc83a 	sub	r23,zero,r4
  8040f8:	b800ad26 	beq	r23,zero,8043b0 <_dtoa_r+0x1530>
  8040fc:	b88003cc 	andi	r2,r23,15
  804100:	100490fa 	slli	r2,r2,3
  804104:	00c02074 	movhi	r3,129
  804108:	18c18c04 	addi	r3,r3,1584
  80410c:	1885883a 	add	r2,r3,r2
  804110:	11800017 	ldw	r6,0(r2)
  804114:	11c00117 	ldw	r7,4(r2)
  804118:	b82fd13a 	srai	r23,r23,4
  80411c:	9009883a 	mov	r4,r18
  804120:	980b883a 	mov	r5,r19
  804124:	080baac0 	call	80baac <__muldf3>
  804128:	1029883a 	mov	r20,r2
  80412c:	182b883a 	mov	r21,r3
  804130:	b800f426 	beq	r23,zero,804504 <_dtoa_r+0x1684>
  804134:	02002074 	movhi	r8,129
  804138:	42018204 	addi	r8,r8,1544
  80413c:	8029883a 	mov	r20,r16
  804140:	04400084 	movi	r17,2
  804144:	4021883a 	mov	r16,r8
  804148:	b980004c 	andi	r6,r23,1
  80414c:	1009883a 	mov	r4,r2
  804150:	b82fd07a 	srai	r23,r23,1
  804154:	180b883a 	mov	r5,r3
  804158:	30000426 	beq	r6,zero,80416c <_dtoa_r+0x12ec>
  80415c:	81800017 	ldw	r6,0(r16)
  804160:	81c00117 	ldw	r7,4(r16)
  804164:	8c400044 	addi	r17,r17,1
  804168:	080baac0 	call	80baac <__muldf3>
  80416c:	84000204 	addi	r16,r16,8
  804170:	b83ff51e 	bne	r23,zero,804148 <__alt_data_end+0xff804148>
  804174:	a021883a 	mov	r16,r20
  804178:	182b883a 	mov	r21,r3
  80417c:	1029883a 	mov	r20,r2
  804180:	003c5506 	br	8032d8 <__alt_data_end+0xff8032d8>
  804184:	d9800517 	ldw	r6,20(sp)
  804188:	d9000717 	ldw	r4,28(sp)
  80418c:	00c00c04 	movi	r3,48
  804190:	31800044 	addi	r6,r6,1
  804194:	d9800515 	stw	r6,20(sp)
  804198:	20c00005 	stb	r3,0(r4)
  80419c:	02000c44 	movi	r8,49
  8041a0:	003da206 	br	80382c <__alt_data_end+0xff80382c>
  8041a4:	89400117 	ldw	r5,4(r17)
  8041a8:	8009883a 	mov	r4,r16
  8041ac:	08065180 	call	806518 <_Balloc>
  8041b0:	89800417 	ldw	r6,16(r17)
  8041b4:	11000304 	addi	r4,r2,12
  8041b8:	89400304 	addi	r5,r17,12
  8041bc:	31800084 	addi	r6,r6,2
  8041c0:	318d883a 	add	r6,r6,r6
  8041c4:	318d883a 	add	r6,r6,r6
  8041c8:	1027883a 	mov	r19,r2
  8041cc:	08061600 	call	806160 <memcpy>
  8041d0:	8009883a 	mov	r4,r16
  8041d4:	980b883a 	mov	r5,r19
  8041d8:	01800044 	movi	r6,1
  8041dc:	0806c9c0 	call	806c9c <__lshift>
  8041e0:	1029883a 	mov	r20,r2
  8041e4:	003e8606 	br	803c00 <__alt_data_end+0xff803c00>
  8041e8:	00800e44 	movi	r2,57
  8041ec:	90809526 	beq	r18,r2,804444 <_dtoa_r+0x15c4>
  8041f0:	92000044 	addi	r8,r18,1
  8041f4:	003f2306 	br	803e84 <__alt_data_end+0xff803e84>
  8041f8:	9011883a 	mov	r8,r18
  8041fc:	8825883a 	mov	r18,r17
  804200:	a023883a 	mov	r17,r20
  804204:	003e3706 	br	803ae4 <__alt_data_end+0xff803ae4>
  804208:	002b883a 	mov	r21,zero
  80420c:	0023883a 	mov	r17,zero
  804210:	003f5606 	br	803f6c <__alt_data_end+0xff803f6c>
  804214:	51bfffc4 	addi	r6,r10,-1
  804218:	300490fa 	slli	r2,r6,3
  80421c:	00c02074 	movhi	r3,129
  804220:	18c18c04 	addi	r3,r3,1584
  804224:	1885883a 	add	r2,r3,r2
  804228:	d9c00e17 	ldw	r7,56(sp)
  80422c:	11000017 	ldw	r4,0(r2)
  804230:	11400117 	ldw	r5,4(r2)
  804234:	d8800717 	ldw	r2,28(sp)
  804238:	d9801015 	stw	r6,64(sp)
  80423c:	880d883a 	mov	r6,r17
  804240:	da801615 	stw	r10,88(sp)
  804244:	15c00044 	addi	r23,r2,1
  804248:	080baac0 	call	80baac <__muldf3>
  80424c:	a80b883a 	mov	r5,r21
  804250:	a009883a 	mov	r4,r20
  804254:	d8c01115 	stw	r3,68(sp)
  804258:	d8800e15 	stw	r2,56(sp)
  80425c:	080caa00 	call	80caa0 <__fixdfsi>
  804260:	1009883a 	mov	r4,r2
  804264:	1023883a 	mov	r17,r2
  804268:	080cb280 	call	80cb28 <__floatsidf>
  80426c:	a009883a 	mov	r4,r20
  804270:	a80b883a 	mov	r5,r21
  804274:	100d883a 	mov	r6,r2
  804278:	180f883a 	mov	r7,r3
  80427c:	080c1d00 	call	80c1d0 <__subdf3>
  804280:	1813883a 	mov	r9,r3
  804284:	d8c00717 	ldw	r3,28(sp)
  804288:	8c400c04 	addi	r17,r17,48
  80428c:	1011883a 	mov	r8,r2
  804290:	1c400005 	stb	r17,0(r3)
  804294:	da801617 	ldw	r10,88(sp)
  804298:	00800044 	movi	r2,1
  80429c:	50802326 	beq	r10,r2,80432c <_dtoa_r+0x14ac>
  8042a0:	d8800717 	ldw	r2,28(sp)
  8042a4:	b82b883a 	mov	r21,r23
  8042a8:	dc001315 	stw	r16,76(sp)
  8042ac:	12a9883a 	add	r20,r2,r10
  8042b0:	4807883a 	mov	r3,r9
  8042b4:	4005883a 	mov	r2,r8
  8042b8:	dc801415 	stw	r18,80(sp)
  8042bc:	000d883a 	mov	r6,zero
  8042c0:	01d00934 	movhi	r7,16420
  8042c4:	1009883a 	mov	r4,r2
  8042c8:	180b883a 	mov	r5,r3
  8042cc:	080baac0 	call	80baac <__muldf3>
  8042d0:	180b883a 	mov	r5,r3
  8042d4:	1009883a 	mov	r4,r2
  8042d8:	1821883a 	mov	r16,r3
  8042dc:	1025883a 	mov	r18,r2
  8042e0:	080caa00 	call	80caa0 <__fixdfsi>
  8042e4:	1009883a 	mov	r4,r2
  8042e8:	1023883a 	mov	r17,r2
  8042ec:	080cb280 	call	80cb28 <__floatsidf>
  8042f0:	9009883a 	mov	r4,r18
  8042f4:	800b883a 	mov	r5,r16
  8042f8:	100d883a 	mov	r6,r2
  8042fc:	180f883a 	mov	r7,r3
  804300:	8c400c04 	addi	r17,r17,48
  804304:	080c1d00 	call	80c1d0 <__subdf3>
  804308:	ad400044 	addi	r21,r21,1
  80430c:	ac7fffc5 	stb	r17,-1(r21)
  804310:	ad3fea1e 	bne	r21,r20,8042bc <__alt_data_end+0xff8042bc>
  804314:	1813883a 	mov	r9,r3
  804318:	d8c01017 	ldw	r3,64(sp)
  80431c:	dc001317 	ldw	r16,76(sp)
  804320:	dc801417 	ldw	r18,80(sp)
  804324:	1011883a 	mov	r8,r2
  804328:	b8ef883a 	add	r23,r23,r3
  80432c:	d9000e17 	ldw	r4,56(sp)
  804330:	d9401117 	ldw	r5,68(sp)
  804334:	000d883a 	mov	r6,zero
  804338:	01cff834 	movhi	r7,16352
  80433c:	da001715 	stw	r8,92(sp)
  804340:	da401515 	stw	r9,84(sp)
  804344:	080a7000 	call	80a700 <__adddf3>
  804348:	da001717 	ldw	r8,92(sp)
  80434c:	da401517 	ldw	r9,84(sp)
  804350:	1009883a 	mov	r4,r2
  804354:	400d883a 	mov	r6,r8
  804358:	480f883a 	mov	r7,r9
  80435c:	180b883a 	mov	r5,r3
  804360:	080b9cc0 	call	80b9cc <__ledf2>
  804364:	da001717 	ldw	r8,92(sp)
  804368:	da401517 	ldw	r9,84(sp)
  80436c:	10003b0e 	bge	r2,zero,80445c <_dtoa_r+0x15dc>
  804370:	d9001217 	ldw	r4,72(sp)
  804374:	bd7fffc3 	ldbu	r21,-1(r23)
  804378:	d9000515 	stw	r4,20(sp)
  80437c:	003d1c06 	br	8037f0 <__alt_data_end+0xff8037f0>
  804380:	d8c00817 	ldw	r3,32(sp)
  804384:	18a9c83a 	sub	r20,r3,r2
  804388:	0005883a 	mov	r2,zero
  80438c:	003d3706 	br	80386c <__alt_data_end+0xff80386c>
  804390:	00800044 	movi	r2,1
  804394:	003dd006 	br	803ad8 <__alt_data_end+0xff803ad8>
  804398:	d8c00217 	ldw	r3,8(sp)
  80439c:	00800d84 	movi	r2,54
  8043a0:	dd400917 	ldw	r21,36(sp)
  8043a4:	10c5c83a 	sub	r2,r2,r3
  8043a8:	dd000817 	ldw	r20,32(sp)
  8043ac:	003d2f06 	br	80386c <__alt_data_end+0xff80386c>
  8043b0:	9029883a 	mov	r20,r18
  8043b4:	982b883a 	mov	r21,r19
  8043b8:	04400084 	movi	r17,2
  8043bc:	003bc606 	br	8032d8 <__alt_data_end+0xff8032d8>
  8043c0:	d8800617 	ldw	r2,24(sp)
  8043c4:	103efc26 	beq	r2,zero,803fb8 <__alt_data_end+0xff803fb8>
  8043c8:	d8c00c17 	ldw	r3,48(sp)
  8043cc:	00fc890e 	bge	zero,r3,8035f4 <__alt_data_end+0xff8035f4>
  8043d0:	a80b883a 	mov	r5,r21
  8043d4:	a009883a 	mov	r4,r20
  8043d8:	000d883a 	mov	r6,zero
  8043dc:	01d00934 	movhi	r7,16420
  8043e0:	080baac0 	call	80baac <__muldf3>
  8043e4:	89000044 	addi	r4,r17,1
  8043e8:	1029883a 	mov	r20,r2
  8043ec:	182b883a 	mov	r21,r3
  8043f0:	080cb280 	call	80cb28 <__floatsidf>
  8043f4:	a009883a 	mov	r4,r20
  8043f8:	a80b883a 	mov	r5,r21
  8043fc:	100d883a 	mov	r6,r2
  804400:	180f883a 	mov	r7,r3
  804404:	080baac0 	call	80baac <__muldf3>
  804408:	1009883a 	mov	r4,r2
  80440c:	180b883a 	mov	r5,r3
  804410:	000d883a 	mov	r6,zero
  804414:	01d00734 	movhi	r7,16412
  804418:	080a7000 	call	80a700 <__adddf3>
  80441c:	d9000517 	ldw	r4,20(sp)
  804420:	1023883a 	mov	r17,r2
  804424:	00bf3034 	movhi	r2,64704
  804428:	213fffc4 	addi	r4,r4,-1
  80442c:	1885883a 	add	r2,r3,r2
  804430:	d9001215 	stw	r4,72(sp)
  804434:	d8800e15 	stw	r2,56(sp)
  804438:	da800c17 	ldw	r10,48(sp)
  80443c:	003bc306 	br	80334c <__alt_data_end+0xff80334c>
  804440:	b039883a 	mov	fp,r22
  804444:	01000e44 	movi	r4,57
  804448:	8825883a 	mov	r18,r17
  80444c:	9dc00044 	addi	r23,r19,1
  804450:	99000005 	stb	r4,0(r19)
  804454:	a023883a 	mov	r17,r20
  804458:	003dae06 	br	803b14 <__alt_data_end+0xff803b14>
  80445c:	d9800e17 	ldw	r6,56(sp)
  804460:	d9c01117 	ldw	r7,68(sp)
  804464:	0009883a 	mov	r4,zero
  804468:	014ff834 	movhi	r5,16352
  80446c:	da001715 	stw	r8,92(sp)
  804470:	da401515 	stw	r9,84(sp)
  804474:	080c1d00 	call	80c1d0 <__subdf3>
  804478:	da001717 	ldw	r8,92(sp)
  80447c:	da401517 	ldw	r9,84(sp)
  804480:	1009883a 	mov	r4,r2
  804484:	180b883a 	mov	r5,r3
  804488:	400d883a 	mov	r6,r8
  80448c:	480f883a 	mov	r7,r9
  804490:	080b8ec0 	call	80b8ec <__gedf2>
  804494:	00bc570e 	bge	zero,r2,8035f4 <__alt_data_end+0xff8035f4>
  804498:	01000c04 	movi	r4,48
  80449c:	00000106 	br	8044a4 <_dtoa_r+0x1624>
  8044a0:	102f883a 	mov	r23,r2
  8044a4:	b8bfffc4 	addi	r2,r23,-1
  8044a8:	10c00007 	ldb	r3,0(r2)
  8044ac:	193ffc26 	beq	r3,r4,8044a0 <__alt_data_end+0xff8044a0>
  8044b0:	d9801217 	ldw	r6,72(sp)
  8044b4:	d9800515 	stw	r6,20(sp)
  8044b8:	003c1f06 	br	803538 <__alt_data_end+0xff803538>
  8044bc:	d8801217 	ldw	r2,72(sp)
  8044c0:	dc001117 	ldw	r16,68(sp)
  8044c4:	d8800515 	stw	r2,20(sp)
  8044c8:	003cc906 	br	8037f0 <__alt_data_end+0xff8037f0>
  8044cc:	dd801317 	ldw	r22,76(sp)
  8044d0:	dc001117 	ldw	r16,68(sp)
  8044d4:	dcc01417 	ldw	r19,80(sp)
  8044d8:	dc801017 	ldw	r18,64(sp)
  8044dc:	003c4506 	br	8035f4 <__alt_data_end+0xff8035f4>
  8044e0:	103e5d1e 	bne	r2,zero,803e58 <__alt_data_end+0xff803e58>
  8044e4:	4080004c 	andi	r2,r8,1
  8044e8:	103e5b26 	beq	r2,zero,803e58 <__alt_data_end+0xff803e58>
  8044ec:	003e5706 	br	803e4c <__alt_data_end+0xff803e4c>
  8044f0:	d8c00317 	ldw	r3,12(sp)
  8044f4:	00800084 	movi	r2,2
  8044f8:	10c00a16 	blt	r2,r3,804524 <_dtoa_r+0x16a4>
  8044fc:	d9000c17 	ldw	r4,48(sp)
  804500:	003e8306 	br	803f10 <__alt_data_end+0xff803f10>
  804504:	04400084 	movi	r17,2
  804508:	003b7306 	br	8032d8 <__alt_data_end+0xff8032d8>
  80450c:	d9801217 	ldw	r6,72(sp)
  804510:	d9800515 	stw	r6,20(sp)
  804514:	003cb606 	br	8037f0 <__alt_data_end+0xff8037f0>
  804518:	d9001217 	ldw	r4,72(sp)
  80451c:	d9000515 	stw	r4,20(sp)
  804520:	003c0506 	br	803538 <__alt_data_end+0xff803538>
  804524:	d9800c17 	ldw	r6,48(sp)
  804528:	d9800615 	stw	r6,24(sp)
  80452c:	003e8306 	br	803f3c <__alt_data_end+0xff803f3c>
  804530:	d9800317 	ldw	r6,12(sp)
  804534:	00800084 	movi	r2,2
  804538:	11800216 	blt	r2,r6,804544 <_dtoa_r+0x16c4>
  80453c:	d8800c17 	ldw	r2,48(sp)
  804540:	003da606 	br	803bdc <__alt_data_end+0xff803bdc>
  804544:	d8800c17 	ldw	r2,48(sp)
  804548:	d8800615 	stw	r2,24(sp)
  80454c:	003e7b06 	br	803f3c <__alt_data_end+0xff803f3c>
  804550:	05000044 	movi	r20,1
  804554:	003b0506 	br	80316c <__alt_data_end+0xff80316c>
  804558:	8009883a 	mov	r4,r16
  80455c:	80001115 	stw	zero,68(r16)
  804560:	000b883a 	mov	r5,zero
  804564:	08065180 	call	806518 <_Balloc>
  804568:	d8800715 	stw	r2,28(sp)
  80456c:	d8c00717 	ldw	r3,28(sp)
  804570:	00bfffc4 	movi	r2,-1
  804574:	01000044 	movi	r4,1
  804578:	d8800c15 	stw	r2,48(sp)
  80457c:	80c01015 	stw	r3,64(r16)
  804580:	d9000b15 	stw	r4,44(sp)
  804584:	d8800615 	stw	r2,24(sp)
  804588:	d8002215 	stw	zero,136(sp)
  80458c:	003c1906 	br	8035f4 <__alt_data_end+0xff8035f4>
  804590:	193d2926 	beq	r3,r4,803a38 <__alt_data_end+0xff803a38>
  804594:	00c00f04 	movi	r3,60
  804598:	1885c83a 	sub	r2,r3,r2
  80459c:	003d7b06 	br	803b8c <__alt_data_end+0xff803b8c>
  8045a0:	000b883a 	mov	r5,zero
  8045a4:	003b1006 	br	8031e8 <__alt_data_end+0xff8031e8>

008045a8 <__sflush_r>:
  8045a8:	2880030b 	ldhu	r2,12(r5)
  8045ac:	defffb04 	addi	sp,sp,-20
  8045b0:	dcc00315 	stw	r19,12(sp)
  8045b4:	dc400115 	stw	r17,4(sp)
  8045b8:	dfc00415 	stw	ra,16(sp)
  8045bc:	dc800215 	stw	r18,8(sp)
  8045c0:	dc000015 	stw	r16,0(sp)
  8045c4:	10c0020c 	andi	r3,r2,8
  8045c8:	2823883a 	mov	r17,r5
  8045cc:	2027883a 	mov	r19,r4
  8045d0:	1800311e 	bne	r3,zero,804698 <__sflush_r+0xf0>
  8045d4:	28c00117 	ldw	r3,4(r5)
  8045d8:	10820014 	ori	r2,r2,2048
  8045dc:	2880030d 	sth	r2,12(r5)
  8045e0:	00c04b0e 	bge	zero,r3,804710 <__sflush_r+0x168>
  8045e4:	8a000a17 	ldw	r8,40(r17)
  8045e8:	40002326 	beq	r8,zero,804678 <__sflush_r+0xd0>
  8045ec:	9c000017 	ldw	r16,0(r19)
  8045f0:	10c4000c 	andi	r3,r2,4096
  8045f4:	98000015 	stw	zero,0(r19)
  8045f8:	18004826 	beq	r3,zero,80471c <__sflush_r+0x174>
  8045fc:	89801417 	ldw	r6,80(r17)
  804600:	10c0010c 	andi	r3,r2,4
  804604:	18000626 	beq	r3,zero,804620 <__sflush_r+0x78>
  804608:	88c00117 	ldw	r3,4(r17)
  80460c:	88800c17 	ldw	r2,48(r17)
  804610:	30cdc83a 	sub	r6,r6,r3
  804614:	10000226 	beq	r2,zero,804620 <__sflush_r+0x78>
  804618:	88800f17 	ldw	r2,60(r17)
  80461c:	308dc83a 	sub	r6,r6,r2
  804620:	89400717 	ldw	r5,28(r17)
  804624:	9809883a 	mov	r4,r19
  804628:	000f883a 	mov	r7,zero
  80462c:	403ee83a 	callr	r8
  804630:	00ffffc4 	movi	r3,-1
  804634:	10c04426 	beq	r2,r3,804748 <__sflush_r+0x1a0>
  804638:	88c0030b 	ldhu	r3,12(r17)
  80463c:	89000417 	ldw	r4,16(r17)
  804640:	88000115 	stw	zero,4(r17)
  804644:	197dffcc 	andi	r5,r3,63487
  804648:	8940030d 	sth	r5,12(r17)
  80464c:	89000015 	stw	r4,0(r17)
  804650:	18c4000c 	andi	r3,r3,4096
  804654:	18002c1e 	bne	r3,zero,804708 <__sflush_r+0x160>
  804658:	89400c17 	ldw	r5,48(r17)
  80465c:	9c000015 	stw	r16,0(r19)
  804660:	28000526 	beq	r5,zero,804678 <__sflush_r+0xd0>
  804664:	88801004 	addi	r2,r17,64
  804668:	28800226 	beq	r5,r2,804674 <__sflush_r+0xcc>
  80466c:	9809883a 	mov	r4,r19
  804670:	0804d000 	call	804d00 <_free_r>
  804674:	88000c15 	stw	zero,48(r17)
  804678:	0005883a 	mov	r2,zero
  80467c:	dfc00417 	ldw	ra,16(sp)
  804680:	dcc00317 	ldw	r19,12(sp)
  804684:	dc800217 	ldw	r18,8(sp)
  804688:	dc400117 	ldw	r17,4(sp)
  80468c:	dc000017 	ldw	r16,0(sp)
  804690:	dec00504 	addi	sp,sp,20
  804694:	f800283a 	ret
  804698:	2c800417 	ldw	r18,16(r5)
  80469c:	903ff626 	beq	r18,zero,804678 <__alt_data_end+0xff804678>
  8046a0:	2c000017 	ldw	r16,0(r5)
  8046a4:	108000cc 	andi	r2,r2,3
  8046a8:	2c800015 	stw	r18,0(r5)
  8046ac:	84a1c83a 	sub	r16,r16,r18
  8046b0:	1000131e 	bne	r2,zero,804700 <__sflush_r+0x158>
  8046b4:	28800517 	ldw	r2,20(r5)
  8046b8:	88800215 	stw	r2,8(r17)
  8046bc:	04000316 	blt	zero,r16,8046cc <__sflush_r+0x124>
  8046c0:	003fed06 	br	804678 <__alt_data_end+0xff804678>
  8046c4:	90a5883a 	add	r18,r18,r2
  8046c8:	043feb0e 	bge	zero,r16,804678 <__alt_data_end+0xff804678>
  8046cc:	88800917 	ldw	r2,36(r17)
  8046d0:	89400717 	ldw	r5,28(r17)
  8046d4:	800f883a 	mov	r7,r16
  8046d8:	900d883a 	mov	r6,r18
  8046dc:	9809883a 	mov	r4,r19
  8046e0:	103ee83a 	callr	r2
  8046e4:	80a1c83a 	sub	r16,r16,r2
  8046e8:	00bff616 	blt	zero,r2,8046c4 <__alt_data_end+0xff8046c4>
  8046ec:	88c0030b 	ldhu	r3,12(r17)
  8046f0:	00bfffc4 	movi	r2,-1
  8046f4:	18c01014 	ori	r3,r3,64
  8046f8:	88c0030d 	sth	r3,12(r17)
  8046fc:	003fdf06 	br	80467c <__alt_data_end+0xff80467c>
  804700:	0005883a 	mov	r2,zero
  804704:	003fec06 	br	8046b8 <__alt_data_end+0xff8046b8>
  804708:	88801415 	stw	r2,80(r17)
  80470c:	003fd206 	br	804658 <__alt_data_end+0xff804658>
  804710:	28c00f17 	ldw	r3,60(r5)
  804714:	00ffb316 	blt	zero,r3,8045e4 <__alt_data_end+0xff8045e4>
  804718:	003fd706 	br	804678 <__alt_data_end+0xff804678>
  80471c:	89400717 	ldw	r5,28(r17)
  804720:	000d883a 	mov	r6,zero
  804724:	9809883a 	mov	r4,r19
  804728:	01c00044 	movi	r7,1
  80472c:	403ee83a 	callr	r8
  804730:	100d883a 	mov	r6,r2
  804734:	00bfffc4 	movi	r2,-1
  804738:	30801426 	beq	r6,r2,80478c <__sflush_r+0x1e4>
  80473c:	8880030b 	ldhu	r2,12(r17)
  804740:	8a000a17 	ldw	r8,40(r17)
  804744:	003fae06 	br	804600 <__alt_data_end+0xff804600>
  804748:	98c00017 	ldw	r3,0(r19)
  80474c:	183fba26 	beq	r3,zero,804638 <__alt_data_end+0xff804638>
  804750:	01000744 	movi	r4,29
  804754:	19000626 	beq	r3,r4,804770 <__sflush_r+0x1c8>
  804758:	01000584 	movi	r4,22
  80475c:	19000426 	beq	r3,r4,804770 <__sflush_r+0x1c8>
  804760:	88c0030b 	ldhu	r3,12(r17)
  804764:	18c01014 	ori	r3,r3,64
  804768:	88c0030d 	sth	r3,12(r17)
  80476c:	003fc306 	br	80467c <__alt_data_end+0xff80467c>
  804770:	8880030b 	ldhu	r2,12(r17)
  804774:	88c00417 	ldw	r3,16(r17)
  804778:	88000115 	stw	zero,4(r17)
  80477c:	10bdffcc 	andi	r2,r2,63487
  804780:	8880030d 	sth	r2,12(r17)
  804784:	88c00015 	stw	r3,0(r17)
  804788:	003fb306 	br	804658 <__alt_data_end+0xff804658>
  80478c:	98800017 	ldw	r2,0(r19)
  804790:	103fea26 	beq	r2,zero,80473c <__alt_data_end+0xff80473c>
  804794:	00c00744 	movi	r3,29
  804798:	10c00226 	beq	r2,r3,8047a4 <__sflush_r+0x1fc>
  80479c:	00c00584 	movi	r3,22
  8047a0:	10ffd21e 	bne	r2,r3,8046ec <__alt_data_end+0xff8046ec>
  8047a4:	9c000015 	stw	r16,0(r19)
  8047a8:	0005883a 	mov	r2,zero
  8047ac:	003fb306 	br	80467c <__alt_data_end+0xff80467c>

008047b0 <_fflush_r>:
  8047b0:	defffd04 	addi	sp,sp,-12
  8047b4:	dc000115 	stw	r16,4(sp)
  8047b8:	dfc00215 	stw	ra,8(sp)
  8047bc:	2021883a 	mov	r16,r4
  8047c0:	20000226 	beq	r4,zero,8047cc <_fflush_r+0x1c>
  8047c4:	20800e17 	ldw	r2,56(r4)
  8047c8:	10000c26 	beq	r2,zero,8047fc <_fflush_r+0x4c>
  8047cc:	2880030f 	ldh	r2,12(r5)
  8047d0:	1000051e 	bne	r2,zero,8047e8 <_fflush_r+0x38>
  8047d4:	0005883a 	mov	r2,zero
  8047d8:	dfc00217 	ldw	ra,8(sp)
  8047dc:	dc000117 	ldw	r16,4(sp)
  8047e0:	dec00304 	addi	sp,sp,12
  8047e4:	f800283a 	ret
  8047e8:	8009883a 	mov	r4,r16
  8047ec:	dfc00217 	ldw	ra,8(sp)
  8047f0:	dc000117 	ldw	r16,4(sp)
  8047f4:	dec00304 	addi	sp,sp,12
  8047f8:	08045a81 	jmpi	8045a8 <__sflush_r>
  8047fc:	d9400015 	stw	r5,0(sp)
  804800:	0804b8c0 	call	804b8c <__sinit>
  804804:	d9400017 	ldw	r5,0(sp)
  804808:	003ff006 	br	8047cc <__alt_data_end+0xff8047cc>

0080480c <fflush>:
  80480c:	20000526 	beq	r4,zero,804824 <fflush+0x18>
  804810:	00802074 	movhi	r2,129
  804814:	1085f804 	addi	r2,r2,6112
  804818:	200b883a 	mov	r5,r4
  80481c:	11000017 	ldw	r4,0(r2)
  804820:	08047b01 	jmpi	8047b0 <_fflush_r>
  804824:	00802074 	movhi	r2,129
  804828:	1085f704 	addi	r2,r2,6108
  80482c:	11000017 	ldw	r4,0(r2)
  804830:	01402034 	movhi	r5,128
  804834:	2951ec04 	addi	r5,r5,18352
  804838:	08055741 	jmpi	805574 <_fwalk_reent>

0080483c <__fp_lock>:
  80483c:	0005883a 	mov	r2,zero
  804840:	f800283a 	ret

00804844 <__fp_unlock>:
  804844:	0005883a 	mov	r2,zero
  804848:	f800283a 	ret

0080484c <_cleanup_r>:
  80484c:	01402074 	movhi	r5,129
  804850:	2964c004 	addi	r5,r5,-27904
  804854:	08055741 	jmpi	805574 <_fwalk_reent>

00804858 <__sinit.part.1>:
  804858:	defff704 	addi	sp,sp,-36
  80485c:	00c02034 	movhi	r3,128
  804860:	dfc00815 	stw	ra,32(sp)
  804864:	ddc00715 	stw	r23,28(sp)
  804868:	dd800615 	stw	r22,24(sp)
  80486c:	dd400515 	stw	r21,20(sp)
  804870:	dd000415 	stw	r20,16(sp)
  804874:	dcc00315 	stw	r19,12(sp)
  804878:	dc800215 	stw	r18,8(sp)
  80487c:	dc400115 	stw	r17,4(sp)
  804880:	dc000015 	stw	r16,0(sp)
  804884:	18d21304 	addi	r3,r3,18508
  804888:	24000117 	ldw	r16,4(r4)
  80488c:	20c00f15 	stw	r3,60(r4)
  804890:	2080bb04 	addi	r2,r4,748
  804894:	00c000c4 	movi	r3,3
  804898:	20c0b915 	stw	r3,740(r4)
  80489c:	2080ba15 	stw	r2,744(r4)
  8048a0:	2000b815 	stw	zero,736(r4)
  8048a4:	05c00204 	movi	r23,8
  8048a8:	00800104 	movi	r2,4
  8048ac:	2025883a 	mov	r18,r4
  8048b0:	b80d883a 	mov	r6,r23
  8048b4:	81001704 	addi	r4,r16,92
  8048b8:	000b883a 	mov	r5,zero
  8048bc:	80000015 	stw	zero,0(r16)
  8048c0:	80000115 	stw	zero,4(r16)
  8048c4:	80000215 	stw	zero,8(r16)
  8048c8:	8080030d 	sth	r2,12(r16)
  8048cc:	80001915 	stw	zero,100(r16)
  8048d0:	8000038d 	sth	zero,14(r16)
  8048d4:	80000415 	stw	zero,16(r16)
  8048d8:	80000515 	stw	zero,20(r16)
  8048dc:	80000615 	stw	zero,24(r16)
  8048e0:	08063f40 	call	8063f4 <memset>
  8048e4:	05802034 	movhi	r22,128
  8048e8:	94400217 	ldw	r17,8(r18)
  8048ec:	05402034 	movhi	r21,128
  8048f0:	05002034 	movhi	r20,128
  8048f4:	04c02034 	movhi	r19,128
  8048f8:	b59eba04 	addi	r22,r22,31464
  8048fc:	ad5ed104 	addi	r21,r21,31556
  804900:	a51ef004 	addi	r20,r20,31680
  804904:	9cdf0704 	addi	r19,r19,31772
  804908:	85800815 	stw	r22,32(r16)
  80490c:	85400915 	stw	r21,36(r16)
  804910:	85000a15 	stw	r20,40(r16)
  804914:	84c00b15 	stw	r19,44(r16)
  804918:	84000715 	stw	r16,28(r16)
  80491c:	00800284 	movi	r2,10
  804920:	8880030d 	sth	r2,12(r17)
  804924:	00800044 	movi	r2,1
  804928:	89001704 	addi	r4,r17,92
  80492c:	b80d883a 	mov	r6,r23
  804930:	000b883a 	mov	r5,zero
  804934:	88000015 	stw	zero,0(r17)
  804938:	88000115 	stw	zero,4(r17)
  80493c:	88000215 	stw	zero,8(r17)
  804940:	88001915 	stw	zero,100(r17)
  804944:	8880038d 	sth	r2,14(r17)
  804948:	88000415 	stw	zero,16(r17)
  80494c:	88000515 	stw	zero,20(r17)
  804950:	88000615 	stw	zero,24(r17)
  804954:	08063f40 	call	8063f4 <memset>
  804958:	94000317 	ldw	r16,12(r18)
  80495c:	00800484 	movi	r2,18
  804960:	8c400715 	stw	r17,28(r17)
  804964:	8d800815 	stw	r22,32(r17)
  804968:	8d400915 	stw	r21,36(r17)
  80496c:	8d000a15 	stw	r20,40(r17)
  804970:	8cc00b15 	stw	r19,44(r17)
  804974:	8080030d 	sth	r2,12(r16)
  804978:	00800084 	movi	r2,2
  80497c:	80000015 	stw	zero,0(r16)
  804980:	80000115 	stw	zero,4(r16)
  804984:	80000215 	stw	zero,8(r16)
  804988:	80001915 	stw	zero,100(r16)
  80498c:	8080038d 	sth	r2,14(r16)
  804990:	80000415 	stw	zero,16(r16)
  804994:	80000515 	stw	zero,20(r16)
  804998:	80000615 	stw	zero,24(r16)
  80499c:	81001704 	addi	r4,r16,92
  8049a0:	000b883a 	mov	r5,zero
  8049a4:	b80d883a 	mov	r6,r23
  8049a8:	08063f40 	call	8063f4 <memset>
  8049ac:	00800044 	movi	r2,1
  8049b0:	84000715 	stw	r16,28(r16)
  8049b4:	85800815 	stw	r22,32(r16)
  8049b8:	85400915 	stw	r21,36(r16)
  8049bc:	85000a15 	stw	r20,40(r16)
  8049c0:	84c00b15 	stw	r19,44(r16)
  8049c4:	90800e15 	stw	r2,56(r18)
  8049c8:	dfc00817 	ldw	ra,32(sp)
  8049cc:	ddc00717 	ldw	r23,28(sp)
  8049d0:	dd800617 	ldw	r22,24(sp)
  8049d4:	dd400517 	ldw	r21,20(sp)
  8049d8:	dd000417 	ldw	r20,16(sp)
  8049dc:	dcc00317 	ldw	r19,12(sp)
  8049e0:	dc800217 	ldw	r18,8(sp)
  8049e4:	dc400117 	ldw	r17,4(sp)
  8049e8:	dc000017 	ldw	r16,0(sp)
  8049ec:	dec00904 	addi	sp,sp,36
  8049f0:	f800283a 	ret

008049f4 <__sfmoreglue>:
  8049f4:	defffc04 	addi	sp,sp,-16
  8049f8:	dc400115 	stw	r17,4(sp)
  8049fc:	2c7fffc4 	addi	r17,r5,-1
  804a00:	8c401a24 	muli	r17,r17,104
  804a04:	dc800215 	stw	r18,8(sp)
  804a08:	2825883a 	mov	r18,r5
  804a0c:	89401d04 	addi	r5,r17,116
  804a10:	dc000015 	stw	r16,0(sp)
  804a14:	dfc00315 	stw	ra,12(sp)
  804a18:	08058d00 	call	8058d0 <_malloc_r>
  804a1c:	1021883a 	mov	r16,r2
  804a20:	10000726 	beq	r2,zero,804a40 <__sfmoreglue+0x4c>
  804a24:	11000304 	addi	r4,r2,12
  804a28:	10000015 	stw	zero,0(r2)
  804a2c:	14800115 	stw	r18,4(r2)
  804a30:	11000215 	stw	r4,8(r2)
  804a34:	000b883a 	mov	r5,zero
  804a38:	89801a04 	addi	r6,r17,104
  804a3c:	08063f40 	call	8063f4 <memset>
  804a40:	8005883a 	mov	r2,r16
  804a44:	dfc00317 	ldw	ra,12(sp)
  804a48:	dc800217 	ldw	r18,8(sp)
  804a4c:	dc400117 	ldw	r17,4(sp)
  804a50:	dc000017 	ldw	r16,0(sp)
  804a54:	dec00404 	addi	sp,sp,16
  804a58:	f800283a 	ret

00804a5c <__sfp>:
  804a5c:	00802074 	movhi	r2,129
  804a60:	defffb04 	addi	sp,sp,-20
  804a64:	1085f704 	addi	r2,r2,6108
  804a68:	dc800215 	stw	r18,8(sp)
  804a6c:	14800017 	ldw	r18,0(r2)
  804a70:	dcc00315 	stw	r19,12(sp)
  804a74:	dfc00415 	stw	ra,16(sp)
  804a78:	90800e17 	ldw	r2,56(r18)
  804a7c:	dc400115 	stw	r17,4(sp)
  804a80:	dc000015 	stw	r16,0(sp)
  804a84:	2027883a 	mov	r19,r4
  804a88:	1000021e 	bne	r2,zero,804a94 <__sfp+0x38>
  804a8c:	9009883a 	mov	r4,r18
  804a90:	08048580 	call	804858 <__sinit.part.1>
  804a94:	9480b804 	addi	r18,r18,736
  804a98:	047fffc4 	movi	r17,-1
  804a9c:	91400117 	ldw	r5,4(r18)
  804aa0:	94000217 	ldw	r16,8(r18)
  804aa4:	297fffc4 	addi	r5,r5,-1
  804aa8:	28000a16 	blt	r5,zero,804ad4 <__sfp+0x78>
  804aac:	8080030f 	ldh	r2,12(r16)
  804ab0:	10000c26 	beq	r2,zero,804ae4 <__sfp+0x88>
  804ab4:	80c01d04 	addi	r3,r16,116
  804ab8:	00000206 	br	804ac4 <__sfp+0x68>
  804abc:	18bfe60f 	ldh	r2,-104(r3)
  804ac0:	10000826 	beq	r2,zero,804ae4 <__sfp+0x88>
  804ac4:	297fffc4 	addi	r5,r5,-1
  804ac8:	1c3ffd04 	addi	r16,r3,-12
  804acc:	18c01a04 	addi	r3,r3,104
  804ad0:	2c7ffa1e 	bne	r5,r17,804abc <__alt_data_end+0xff804abc>
  804ad4:	90800017 	ldw	r2,0(r18)
  804ad8:	10001d26 	beq	r2,zero,804b50 <__sfp+0xf4>
  804adc:	1025883a 	mov	r18,r2
  804ae0:	003fee06 	br	804a9c <__alt_data_end+0xff804a9c>
  804ae4:	00bfffc4 	movi	r2,-1
  804ae8:	8080038d 	sth	r2,14(r16)
  804aec:	00800044 	movi	r2,1
  804af0:	8080030d 	sth	r2,12(r16)
  804af4:	80001915 	stw	zero,100(r16)
  804af8:	80000015 	stw	zero,0(r16)
  804afc:	80000215 	stw	zero,8(r16)
  804b00:	80000115 	stw	zero,4(r16)
  804b04:	80000415 	stw	zero,16(r16)
  804b08:	80000515 	stw	zero,20(r16)
  804b0c:	80000615 	stw	zero,24(r16)
  804b10:	81001704 	addi	r4,r16,92
  804b14:	000b883a 	mov	r5,zero
  804b18:	01800204 	movi	r6,8
  804b1c:	08063f40 	call	8063f4 <memset>
  804b20:	8005883a 	mov	r2,r16
  804b24:	80000c15 	stw	zero,48(r16)
  804b28:	80000d15 	stw	zero,52(r16)
  804b2c:	80001115 	stw	zero,68(r16)
  804b30:	80001215 	stw	zero,72(r16)
  804b34:	dfc00417 	ldw	ra,16(sp)
  804b38:	dcc00317 	ldw	r19,12(sp)
  804b3c:	dc800217 	ldw	r18,8(sp)
  804b40:	dc400117 	ldw	r17,4(sp)
  804b44:	dc000017 	ldw	r16,0(sp)
  804b48:	dec00504 	addi	sp,sp,20
  804b4c:	f800283a 	ret
  804b50:	9809883a 	mov	r4,r19
  804b54:	01400104 	movi	r5,4
  804b58:	08049f40 	call	8049f4 <__sfmoreglue>
  804b5c:	90800015 	stw	r2,0(r18)
  804b60:	103fde1e 	bne	r2,zero,804adc <__alt_data_end+0xff804adc>
  804b64:	00800304 	movi	r2,12
  804b68:	98800015 	stw	r2,0(r19)
  804b6c:	0005883a 	mov	r2,zero
  804b70:	003ff006 	br	804b34 <__alt_data_end+0xff804b34>

00804b74 <_cleanup>:
  804b74:	00802074 	movhi	r2,129
  804b78:	1085f704 	addi	r2,r2,6108
  804b7c:	11000017 	ldw	r4,0(r2)
  804b80:	01402074 	movhi	r5,129
  804b84:	2964c004 	addi	r5,r5,-27904
  804b88:	08055741 	jmpi	805574 <_fwalk_reent>

00804b8c <__sinit>:
  804b8c:	20800e17 	ldw	r2,56(r4)
  804b90:	10000126 	beq	r2,zero,804b98 <__sinit+0xc>
  804b94:	f800283a 	ret
  804b98:	08048581 	jmpi	804858 <__sinit.part.1>

00804b9c <__sfp_lock_acquire>:
  804b9c:	f800283a 	ret

00804ba0 <__sfp_lock_release>:
  804ba0:	f800283a 	ret

00804ba4 <__sinit_lock_acquire>:
  804ba4:	f800283a 	ret

00804ba8 <__sinit_lock_release>:
  804ba8:	f800283a 	ret

00804bac <__fp_lock_all>:
  804bac:	00802074 	movhi	r2,129
  804bb0:	1085f804 	addi	r2,r2,6112
  804bb4:	11000017 	ldw	r4,0(r2)
  804bb8:	01402034 	movhi	r5,128
  804bbc:	29520f04 	addi	r5,r5,18492
  804bc0:	08054b01 	jmpi	8054b0 <_fwalk>

00804bc4 <__fp_unlock_all>:
  804bc4:	00802074 	movhi	r2,129
  804bc8:	1085f804 	addi	r2,r2,6112
  804bcc:	11000017 	ldw	r4,0(r2)
  804bd0:	01402034 	movhi	r5,128
  804bd4:	29521104 	addi	r5,r5,18500
  804bd8:	08054b01 	jmpi	8054b0 <_fwalk>

00804bdc <_malloc_trim_r>:
  804bdc:	defffb04 	addi	sp,sp,-20
  804be0:	dcc00315 	stw	r19,12(sp)
  804be4:	04c02074 	movhi	r19,129
  804be8:	dc800215 	stw	r18,8(sp)
  804bec:	dc400115 	stw	r17,4(sp)
  804bf0:	dc000015 	stw	r16,0(sp)
  804bf4:	dfc00415 	stw	ra,16(sp)
  804bf8:	2821883a 	mov	r16,r5
  804bfc:	9cc3ef04 	addi	r19,r19,4028
  804c00:	2025883a 	mov	r18,r4
  804c04:	080d4700 	call	80d470 <__malloc_lock>
  804c08:	98800217 	ldw	r2,8(r19)
  804c0c:	14400117 	ldw	r17,4(r2)
  804c10:	00bfff04 	movi	r2,-4
  804c14:	88a2703a 	and	r17,r17,r2
  804c18:	8c21c83a 	sub	r16,r17,r16
  804c1c:	8403fbc4 	addi	r16,r16,4079
  804c20:	8020d33a 	srli	r16,r16,12
  804c24:	0083ffc4 	movi	r2,4095
  804c28:	843fffc4 	addi	r16,r16,-1
  804c2c:	8020933a 	slli	r16,r16,12
  804c30:	1400060e 	bge	r2,r16,804c4c <_malloc_trim_r+0x70>
  804c34:	9009883a 	mov	r4,r18
  804c38:	000b883a 	mov	r5,zero
  804c3c:	0807a940 	call	807a94 <_sbrk_r>
  804c40:	98c00217 	ldw	r3,8(r19)
  804c44:	1c47883a 	add	r3,r3,r17
  804c48:	10c00a26 	beq	r2,r3,804c74 <_malloc_trim_r+0x98>
  804c4c:	9009883a 	mov	r4,r18
  804c50:	080d4900 	call	80d490 <__malloc_unlock>
  804c54:	0005883a 	mov	r2,zero
  804c58:	dfc00417 	ldw	ra,16(sp)
  804c5c:	dcc00317 	ldw	r19,12(sp)
  804c60:	dc800217 	ldw	r18,8(sp)
  804c64:	dc400117 	ldw	r17,4(sp)
  804c68:	dc000017 	ldw	r16,0(sp)
  804c6c:	dec00504 	addi	sp,sp,20
  804c70:	f800283a 	ret
  804c74:	9009883a 	mov	r4,r18
  804c78:	040bc83a 	sub	r5,zero,r16
  804c7c:	0807a940 	call	807a94 <_sbrk_r>
  804c80:	00ffffc4 	movi	r3,-1
  804c84:	10c00d26 	beq	r2,r3,804cbc <_malloc_trim_r+0xe0>
  804c88:	00c02074 	movhi	r3,129
  804c8c:	18c95c04 	addi	r3,r3,9584
  804c90:	18800017 	ldw	r2,0(r3)
  804c94:	99000217 	ldw	r4,8(r19)
  804c98:	8c23c83a 	sub	r17,r17,r16
  804c9c:	8c400054 	ori	r17,r17,1
  804ca0:	1421c83a 	sub	r16,r2,r16
  804ca4:	24400115 	stw	r17,4(r4)
  804ca8:	9009883a 	mov	r4,r18
  804cac:	1c000015 	stw	r16,0(r3)
  804cb0:	080d4900 	call	80d490 <__malloc_unlock>
  804cb4:	00800044 	movi	r2,1
  804cb8:	003fe706 	br	804c58 <__alt_data_end+0xff804c58>
  804cbc:	9009883a 	mov	r4,r18
  804cc0:	000b883a 	mov	r5,zero
  804cc4:	0807a940 	call	807a94 <_sbrk_r>
  804cc8:	99000217 	ldw	r4,8(r19)
  804ccc:	014003c4 	movi	r5,15
  804cd0:	1107c83a 	sub	r3,r2,r4
  804cd4:	28ffdd0e 	bge	r5,r3,804c4c <__alt_data_end+0xff804c4c>
  804cd8:	01402074 	movhi	r5,129
  804cdc:	2945fa04 	addi	r5,r5,6120
  804ce0:	29400017 	ldw	r5,0(r5)
  804ce4:	18c00054 	ori	r3,r3,1
  804ce8:	20c00115 	stw	r3,4(r4)
  804cec:	00c02074 	movhi	r3,129
  804cf0:	1145c83a 	sub	r2,r2,r5
  804cf4:	18c95c04 	addi	r3,r3,9584
  804cf8:	18800015 	stw	r2,0(r3)
  804cfc:	003fd306 	br	804c4c <__alt_data_end+0xff804c4c>

00804d00 <_free_r>:
  804d00:	28004c26 	beq	r5,zero,804e34 <_free_r+0x134>
  804d04:	defffd04 	addi	sp,sp,-12
  804d08:	dc400115 	stw	r17,4(sp)
  804d0c:	dc000015 	stw	r16,0(sp)
  804d10:	2023883a 	mov	r17,r4
  804d14:	2821883a 	mov	r16,r5
  804d18:	dfc00215 	stw	ra,8(sp)
  804d1c:	080d4700 	call	80d470 <__malloc_lock>
  804d20:	813fff17 	ldw	r4,-4(r16)
  804d24:	00bfff84 	movi	r2,-2
  804d28:	02402074 	movhi	r9,129
  804d2c:	81bffe04 	addi	r6,r16,-8
  804d30:	2084703a 	and	r2,r4,r2
  804d34:	4a43ef04 	addi	r9,r9,4028
  804d38:	308b883a 	add	r5,r6,r2
  804d3c:	2a000117 	ldw	r8,4(r5)
  804d40:	49c00217 	ldw	r7,8(r9)
  804d44:	00ffff04 	movi	r3,-4
  804d48:	40c6703a 	and	r3,r8,r3
  804d4c:	39405326 	beq	r7,r5,804e9c <_free_r+0x19c>
  804d50:	28c00115 	stw	r3,4(r5)
  804d54:	2100004c 	andi	r4,r4,1
  804d58:	2000091e 	bne	r4,zero,804d80 <_free_r+0x80>
  804d5c:	81fffe17 	ldw	r7,-8(r16)
  804d60:	4a000204 	addi	r8,r9,8
  804d64:	31cdc83a 	sub	r6,r6,r7
  804d68:	31000217 	ldw	r4,8(r6)
  804d6c:	11c5883a 	add	r2,r2,r7
  804d70:	22006126 	beq	r4,r8,804ef8 <_free_r+0x1f8>
  804d74:	31c00317 	ldw	r7,12(r6)
  804d78:	21c00315 	stw	r7,12(r4)
  804d7c:	39000215 	stw	r4,8(r7)
  804d80:	28c9883a 	add	r4,r5,r3
  804d84:	21c00117 	ldw	r7,4(r4)
  804d88:	39c0004c 	andi	r7,r7,1
  804d8c:	38000d1e 	bne	r7,zero,804dc4 <_free_r+0xc4>
  804d90:	29000217 	ldw	r4,8(r5)
  804d94:	10c5883a 	add	r2,r2,r3
  804d98:	00c02074 	movhi	r3,129
  804d9c:	18c3f104 	addi	r3,r3,4036
  804da0:	20c07526 	beq	r4,r3,804f78 <_free_r+0x278>
  804da4:	29c00317 	ldw	r7,12(r5)
  804da8:	11400054 	ori	r5,r2,1
  804dac:	3087883a 	add	r3,r6,r2
  804db0:	21c00315 	stw	r7,12(r4)
  804db4:	39000215 	stw	r4,8(r7)
  804db8:	31400115 	stw	r5,4(r6)
  804dbc:	18800015 	stw	r2,0(r3)
  804dc0:	00000406 	br	804dd4 <_free_r+0xd4>
  804dc4:	10c00054 	ori	r3,r2,1
  804dc8:	30c00115 	stw	r3,4(r6)
  804dcc:	3087883a 	add	r3,r6,r2
  804dd0:	18800015 	stw	r2,0(r3)
  804dd4:	00c07fc4 	movi	r3,511
  804dd8:	18801736 	bltu	r3,r2,804e38 <_free_r+0x138>
  804ddc:	1004d0fa 	srli	r2,r2,3
  804de0:	01400044 	movi	r5,1
  804de4:	49000117 	ldw	r4,4(r9)
  804de8:	1087883a 	add	r3,r2,r2
  804dec:	18c7883a 	add	r3,r3,r3
  804df0:	1005d0ba 	srai	r2,r2,2
  804df4:	18c7883a 	add	r3,r3,r3
  804df8:	1a47883a 	add	r3,r3,r9
  804dfc:	19c00217 	ldw	r7,8(r3)
  804e00:	2884983a 	sll	r2,r5,r2
  804e04:	30c00315 	stw	r3,12(r6)
  804e08:	31c00215 	stw	r7,8(r6)
  804e0c:	1104b03a 	or	r2,r2,r4
  804e10:	19800215 	stw	r6,8(r3)
  804e14:	48800115 	stw	r2,4(r9)
  804e18:	39800315 	stw	r6,12(r7)
  804e1c:	8809883a 	mov	r4,r17
  804e20:	dfc00217 	ldw	ra,8(sp)
  804e24:	dc400117 	ldw	r17,4(sp)
  804e28:	dc000017 	ldw	r16,0(sp)
  804e2c:	dec00304 	addi	sp,sp,12
  804e30:	080d4901 	jmpi	80d490 <__malloc_unlock>
  804e34:	f800283a 	ret
  804e38:	1006d27a 	srli	r3,r2,9
  804e3c:	01000104 	movi	r4,4
  804e40:	20c04036 	bltu	r4,r3,804f44 <_free_r+0x244>
  804e44:	1006d1ba 	srli	r3,r2,6
  804e48:	19400e04 	addi	r5,r3,56
  804e4c:	2947883a 	add	r3,r5,r5
  804e50:	18c7883a 	add	r3,r3,r3
  804e54:	18c7883a 	add	r3,r3,r3
  804e58:	1a49883a 	add	r4,r3,r9
  804e5c:	20c00217 	ldw	r3,8(r4)
  804e60:	01c02074 	movhi	r7,129
  804e64:	39c3ef04 	addi	r7,r7,4028
  804e68:	19003b26 	beq	r3,r4,804f58 <_free_r+0x258>
  804e6c:	01ffff04 	movi	r7,-4
  804e70:	19400117 	ldw	r5,4(r3)
  804e74:	29ca703a 	and	r5,r5,r7
  804e78:	1140022e 	bgeu	r2,r5,804e84 <_free_r+0x184>
  804e7c:	18c00217 	ldw	r3,8(r3)
  804e80:	20fffb1e 	bne	r4,r3,804e70 <__alt_data_end+0xff804e70>
  804e84:	18800317 	ldw	r2,12(r3)
  804e88:	30800315 	stw	r2,12(r6)
  804e8c:	30c00215 	stw	r3,8(r6)
  804e90:	11800215 	stw	r6,8(r2)
  804e94:	19800315 	stw	r6,12(r3)
  804e98:	003fe006 	br	804e1c <__alt_data_end+0xff804e1c>
  804e9c:	2100004c 	andi	r4,r4,1
  804ea0:	1885883a 	add	r2,r3,r2
  804ea4:	2000071e 	bne	r4,zero,804ec4 <_free_r+0x1c4>
  804ea8:	817ffe17 	ldw	r5,-8(r16)
  804eac:	314dc83a 	sub	r6,r6,r5
  804eb0:	30c00317 	ldw	r3,12(r6)
  804eb4:	31000217 	ldw	r4,8(r6)
  804eb8:	1145883a 	add	r2,r2,r5
  804ebc:	20c00315 	stw	r3,12(r4)
  804ec0:	19000215 	stw	r4,8(r3)
  804ec4:	10c00054 	ori	r3,r2,1
  804ec8:	30c00115 	stw	r3,4(r6)
  804ecc:	00c02074 	movhi	r3,129
  804ed0:	18c5fb04 	addi	r3,r3,6124
  804ed4:	18c00017 	ldw	r3,0(r3)
  804ed8:	49800215 	stw	r6,8(r9)
  804edc:	10ffcf36 	bltu	r2,r3,804e1c <__alt_data_end+0xff804e1c>
  804ee0:	00802074 	movhi	r2,129
  804ee4:	10895304 	addi	r2,r2,9548
  804ee8:	11400017 	ldw	r5,0(r2)
  804eec:	8809883a 	mov	r4,r17
  804ef0:	0804bdc0 	call	804bdc <_malloc_trim_r>
  804ef4:	003fc906 	br	804e1c <__alt_data_end+0xff804e1c>
  804ef8:	28c9883a 	add	r4,r5,r3
  804efc:	21000117 	ldw	r4,4(r4)
  804f00:	2100004c 	andi	r4,r4,1
  804f04:	20000a1e 	bne	r4,zero,804f30 <_free_r+0x230>
  804f08:	29000317 	ldw	r4,12(r5)
  804f0c:	29400217 	ldw	r5,8(r5)
  804f10:	10c5883a 	add	r2,r2,r3
  804f14:	10c00054 	ori	r3,r2,1
  804f18:	29000315 	stw	r4,12(r5)
  804f1c:	21400215 	stw	r5,8(r4)
  804f20:	30c00115 	stw	r3,4(r6)
  804f24:	308d883a 	add	r6,r6,r2
  804f28:	30800015 	stw	r2,0(r6)
  804f2c:	003fbb06 	br	804e1c <__alt_data_end+0xff804e1c>
  804f30:	10c00054 	ori	r3,r2,1
  804f34:	30c00115 	stw	r3,4(r6)
  804f38:	308d883a 	add	r6,r6,r2
  804f3c:	30800015 	stw	r2,0(r6)
  804f40:	003fb606 	br	804e1c <__alt_data_end+0xff804e1c>
  804f44:	01000504 	movi	r4,20
  804f48:	20c01436 	bltu	r4,r3,804f9c <_free_r+0x29c>
  804f4c:	194016c4 	addi	r5,r3,91
  804f50:	2947883a 	add	r3,r5,r5
  804f54:	003fbe06 	br	804e50 <__alt_data_end+0xff804e50>
  804f58:	280bd0ba 	srai	r5,r5,2
  804f5c:	00800044 	movi	r2,1
  804f60:	39000117 	ldw	r4,4(r7)
  804f64:	114a983a 	sll	r5,r2,r5
  804f68:	1805883a 	mov	r2,r3
  804f6c:	2908b03a 	or	r4,r5,r4
  804f70:	39000115 	stw	r4,4(r7)
  804f74:	003fc406 	br	804e88 <__alt_data_end+0xff804e88>
  804f78:	49800515 	stw	r6,20(r9)
  804f7c:	49800415 	stw	r6,16(r9)
  804f80:	10c00054 	ori	r3,r2,1
  804f84:	31000315 	stw	r4,12(r6)
  804f88:	31000215 	stw	r4,8(r6)
  804f8c:	30c00115 	stw	r3,4(r6)
  804f90:	308d883a 	add	r6,r6,r2
  804f94:	30800015 	stw	r2,0(r6)
  804f98:	003fa006 	br	804e1c <__alt_data_end+0xff804e1c>
  804f9c:	01001504 	movi	r4,84
  804fa0:	20c00436 	bltu	r4,r3,804fb4 <_free_r+0x2b4>
  804fa4:	1006d33a 	srli	r3,r2,12
  804fa8:	19401b84 	addi	r5,r3,110
  804fac:	2947883a 	add	r3,r5,r5
  804fb0:	003fa706 	br	804e50 <__alt_data_end+0xff804e50>
  804fb4:	01005504 	movi	r4,340
  804fb8:	20c00436 	bltu	r4,r3,804fcc <_free_r+0x2cc>
  804fbc:	1006d3fa 	srli	r3,r2,15
  804fc0:	19401dc4 	addi	r5,r3,119
  804fc4:	2947883a 	add	r3,r5,r5
  804fc8:	003fa106 	br	804e50 <__alt_data_end+0xff804e50>
  804fcc:	01015504 	movi	r4,1364
  804fd0:	20c00436 	bltu	r4,r3,804fe4 <_free_r+0x2e4>
  804fd4:	1006d4ba 	srli	r3,r2,18
  804fd8:	19401f04 	addi	r5,r3,124
  804fdc:	2947883a 	add	r3,r5,r5
  804fe0:	003f9b06 	br	804e50 <__alt_data_end+0xff804e50>
  804fe4:	00c03f04 	movi	r3,252
  804fe8:	01401f84 	movi	r5,126
  804fec:	003f9806 	br	804e50 <__alt_data_end+0xff804e50>

00804ff0 <__sfvwrite_r>:
  804ff0:	30800217 	ldw	r2,8(r6)
  804ff4:	10006726 	beq	r2,zero,805194 <__sfvwrite_r+0x1a4>
  804ff8:	defff404 	addi	sp,sp,-48
  804ffc:	dd000615 	stw	r20,24(sp)
  805000:	2029883a 	mov	r20,r4
  805004:	2900030b 	ldhu	r4,12(r5)
  805008:	ddc00915 	stw	r23,36(sp)
  80500c:	dc000215 	stw	r16,8(sp)
  805010:	dfc00b15 	stw	ra,44(sp)
  805014:	df000a15 	stw	fp,40(sp)
  805018:	dd800815 	stw	r22,32(sp)
  80501c:	dd400715 	stw	r21,28(sp)
  805020:	dcc00515 	stw	r19,20(sp)
  805024:	dc800415 	stw	r18,16(sp)
  805028:	dc400315 	stw	r17,12(sp)
  80502c:	2080020c 	andi	r2,r4,8
  805030:	2821883a 	mov	r16,r5
  805034:	302f883a 	mov	r23,r6
  805038:	10002726 	beq	r2,zero,8050d8 <__sfvwrite_r+0xe8>
  80503c:	28800417 	ldw	r2,16(r5)
  805040:	10002526 	beq	r2,zero,8050d8 <__sfvwrite_r+0xe8>
  805044:	2080008c 	andi	r2,r4,2
  805048:	bc400017 	ldw	r17,0(r23)
  80504c:	10002a26 	beq	r2,zero,8050f8 <__sfvwrite_r+0x108>
  805050:	05600034 	movhi	r21,32768
  805054:	0027883a 	mov	r19,zero
  805058:	0025883a 	mov	r18,zero
  80505c:	ad7f0004 	addi	r21,r21,-1024
  805060:	980d883a 	mov	r6,r19
  805064:	a009883a 	mov	r4,r20
  805068:	90004626 	beq	r18,zero,805184 <__sfvwrite_r+0x194>
  80506c:	900f883a 	mov	r7,r18
  805070:	81400717 	ldw	r5,28(r16)
  805074:	ac80022e 	bgeu	r21,r18,805080 <__sfvwrite_r+0x90>
  805078:	01e00034 	movhi	r7,32768
  80507c:	39ff0004 	addi	r7,r7,-1024
  805080:	80800917 	ldw	r2,36(r16)
  805084:	103ee83a 	callr	r2
  805088:	0080520e 	bge	zero,r2,8051d4 <__sfvwrite_r+0x1e4>
  80508c:	b8c00217 	ldw	r3,8(r23)
  805090:	98a7883a 	add	r19,r19,r2
  805094:	90a5c83a 	sub	r18,r18,r2
  805098:	1885c83a 	sub	r2,r3,r2
  80509c:	b8800215 	stw	r2,8(r23)
  8050a0:	103fef1e 	bne	r2,zero,805060 <__alt_data_end+0xff805060>
  8050a4:	0005883a 	mov	r2,zero
  8050a8:	dfc00b17 	ldw	ra,44(sp)
  8050ac:	df000a17 	ldw	fp,40(sp)
  8050b0:	ddc00917 	ldw	r23,36(sp)
  8050b4:	dd800817 	ldw	r22,32(sp)
  8050b8:	dd400717 	ldw	r21,28(sp)
  8050bc:	dd000617 	ldw	r20,24(sp)
  8050c0:	dcc00517 	ldw	r19,20(sp)
  8050c4:	dc800417 	ldw	r18,16(sp)
  8050c8:	dc400317 	ldw	r17,12(sp)
  8050cc:	dc000217 	ldw	r16,8(sp)
  8050d0:	dec00c04 	addi	sp,sp,48
  8050d4:	f800283a 	ret
  8050d8:	a009883a 	mov	r4,r20
  8050dc:	800b883a 	mov	r5,r16
  8050e0:	0802b2c0 	call	802b2c <__swsetup_r>
  8050e4:	1000ec1e 	bne	r2,zero,805498 <__sfvwrite_r+0x4a8>
  8050e8:	8100030b 	ldhu	r4,12(r16)
  8050ec:	bc400017 	ldw	r17,0(r23)
  8050f0:	2080008c 	andi	r2,r4,2
  8050f4:	103fd61e 	bne	r2,zero,805050 <__alt_data_end+0xff805050>
  8050f8:	2080004c 	andi	r2,r4,1
  8050fc:	10003a1e 	bne	r2,zero,8051e8 <__sfvwrite_r+0x1f8>
  805100:	0039883a 	mov	fp,zero
  805104:	0025883a 	mov	r18,zero
  805108:	90001a26 	beq	r18,zero,805174 <__sfvwrite_r+0x184>
  80510c:	2080800c 	andi	r2,r4,512
  805110:	85800217 	ldw	r22,8(r16)
  805114:	10007626 	beq	r2,zero,8052f0 <__sfvwrite_r+0x300>
  805118:	b027883a 	mov	r19,r22
  80511c:	95809436 	bltu	r18,r22,805370 <__sfvwrite_r+0x380>
  805120:	2081200c 	andi	r2,r4,1152
  805124:	10009f1e 	bne	r2,zero,8053a4 <__sfvwrite_r+0x3b4>
  805128:	81000017 	ldw	r4,0(r16)
  80512c:	e00b883a 	mov	r5,fp
  805130:	980d883a 	mov	r6,r19
  805134:	08062980 	call	806298 <memmove>
  805138:	81000217 	ldw	r4,8(r16)
  80513c:	81400017 	ldw	r5,0(r16)
  805140:	9005883a 	mov	r2,r18
  805144:	2587c83a 	sub	r3,r4,r22
  805148:	2ce7883a 	add	r19,r5,r19
  80514c:	80c00215 	stw	r3,8(r16)
  805150:	84c00015 	stw	r19,0(r16)
  805154:	b8c00217 	ldw	r3,8(r23)
  805158:	e0b9883a 	add	fp,fp,r2
  80515c:	90a5c83a 	sub	r18,r18,r2
  805160:	1885c83a 	sub	r2,r3,r2
  805164:	b8800215 	stw	r2,8(r23)
  805168:	103fce26 	beq	r2,zero,8050a4 <__alt_data_end+0xff8050a4>
  80516c:	8100030b 	ldhu	r4,12(r16)
  805170:	903fe61e 	bne	r18,zero,80510c <__alt_data_end+0xff80510c>
  805174:	8f000017 	ldw	fp,0(r17)
  805178:	8c800117 	ldw	r18,4(r17)
  80517c:	8c400204 	addi	r17,r17,8
  805180:	003fe106 	br	805108 <__alt_data_end+0xff805108>
  805184:	8cc00017 	ldw	r19,0(r17)
  805188:	8c800117 	ldw	r18,4(r17)
  80518c:	8c400204 	addi	r17,r17,8
  805190:	003fb306 	br	805060 <__alt_data_end+0xff805060>
  805194:	0005883a 	mov	r2,zero
  805198:	f800283a 	ret
  80519c:	00a00034 	movhi	r2,32768
  8051a0:	10bfffc4 	addi	r2,r2,-1
  8051a4:	9009883a 	mov	r4,r18
  8051a8:	1480012e 	bgeu	r2,r18,8051b0 <__sfvwrite_r+0x1c0>
  8051ac:	1009883a 	mov	r4,r2
  8051b0:	980b883a 	mov	r5,r19
  8051b4:	080a6400 	call	80a640 <__divsi3>
  8051b8:	81400717 	ldw	r5,28(r16)
  8051bc:	80c00917 	ldw	r3,36(r16)
  8051c0:	988f383a 	mul	r7,r19,r2
  8051c4:	a009883a 	mov	r4,r20
  8051c8:	e00d883a 	mov	r6,fp
  8051cc:	183ee83a 	callr	r3
  8051d0:	00bfe016 	blt	zero,r2,805154 <__alt_data_end+0xff805154>
  8051d4:	8080030b 	ldhu	r2,12(r16)
  8051d8:	10801014 	ori	r2,r2,64
  8051dc:	8080030d 	sth	r2,12(r16)
  8051e0:	00bfffc4 	movi	r2,-1
  8051e4:	003fb006 	br	8050a8 <__alt_data_end+0xff8050a8>
  8051e8:	0027883a 	mov	r19,zero
  8051ec:	0011883a 	mov	r8,zero
  8051f0:	0039883a 	mov	fp,zero
  8051f4:	0025883a 	mov	r18,zero
  8051f8:	90001f26 	beq	r18,zero,805278 <__sfvwrite_r+0x288>
  8051fc:	40006026 	beq	r8,zero,805380 <__sfvwrite_r+0x390>
  805200:	982b883a 	mov	r21,r19
  805204:	94c0012e 	bgeu	r18,r19,80520c <__sfvwrite_r+0x21c>
  805208:	902b883a 	mov	r21,r18
  80520c:	81000017 	ldw	r4,0(r16)
  805210:	80800417 	ldw	r2,16(r16)
  805214:	a82d883a 	mov	r22,r21
  805218:	81800217 	ldw	r6,8(r16)
  80521c:	81c00517 	ldw	r7,20(r16)
  805220:	1100022e 	bgeu	r2,r4,80522c <__sfvwrite_r+0x23c>
  805224:	31c7883a 	add	r3,r6,r7
  805228:	1d401816 	blt	r3,r21,80528c <__sfvwrite_r+0x29c>
  80522c:	a9c04416 	blt	r21,r7,805340 <__sfvwrite_r+0x350>
  805230:	80800917 	ldw	r2,36(r16)
  805234:	81400717 	ldw	r5,28(r16)
  805238:	a009883a 	mov	r4,r20
  80523c:	da000115 	stw	r8,4(sp)
  805240:	e00d883a 	mov	r6,fp
  805244:	103ee83a 	callr	r2
  805248:	102d883a 	mov	r22,r2
  80524c:	da000117 	ldw	r8,4(sp)
  805250:	00bfe00e 	bge	zero,r2,8051d4 <__alt_data_end+0xff8051d4>
  805254:	9da7c83a 	sub	r19,r19,r22
  805258:	98001f26 	beq	r19,zero,8052d8 <__sfvwrite_r+0x2e8>
  80525c:	b8800217 	ldw	r2,8(r23)
  805260:	e5b9883a 	add	fp,fp,r22
  805264:	95a5c83a 	sub	r18,r18,r22
  805268:	15adc83a 	sub	r22,r2,r22
  80526c:	bd800215 	stw	r22,8(r23)
  805270:	b03f8c26 	beq	r22,zero,8050a4 <__alt_data_end+0xff8050a4>
  805274:	903fe11e 	bne	r18,zero,8051fc <__alt_data_end+0xff8051fc>
  805278:	8f000017 	ldw	fp,0(r17)
  80527c:	8c800117 	ldw	r18,4(r17)
  805280:	0011883a 	mov	r8,zero
  805284:	8c400204 	addi	r17,r17,8
  805288:	003fdb06 	br	8051f8 <__alt_data_end+0xff8051f8>
  80528c:	180d883a 	mov	r6,r3
  805290:	e00b883a 	mov	r5,fp
  805294:	da000115 	stw	r8,4(sp)
  805298:	d8c00015 	stw	r3,0(sp)
  80529c:	08062980 	call	806298 <memmove>
  8052a0:	d8c00017 	ldw	r3,0(sp)
  8052a4:	80800017 	ldw	r2,0(r16)
  8052a8:	a009883a 	mov	r4,r20
  8052ac:	800b883a 	mov	r5,r16
  8052b0:	10c5883a 	add	r2,r2,r3
  8052b4:	80800015 	stw	r2,0(r16)
  8052b8:	d8c00015 	stw	r3,0(sp)
  8052bc:	08047b00 	call	8047b0 <_fflush_r>
  8052c0:	d8c00017 	ldw	r3,0(sp)
  8052c4:	da000117 	ldw	r8,4(sp)
  8052c8:	103fc21e 	bne	r2,zero,8051d4 <__alt_data_end+0xff8051d4>
  8052cc:	182d883a 	mov	r22,r3
  8052d0:	9da7c83a 	sub	r19,r19,r22
  8052d4:	983fe11e 	bne	r19,zero,80525c <__alt_data_end+0xff80525c>
  8052d8:	a009883a 	mov	r4,r20
  8052dc:	800b883a 	mov	r5,r16
  8052e0:	08047b00 	call	8047b0 <_fflush_r>
  8052e4:	103fbb1e 	bne	r2,zero,8051d4 <__alt_data_end+0xff8051d4>
  8052e8:	0011883a 	mov	r8,zero
  8052ec:	003fdb06 	br	80525c <__alt_data_end+0xff80525c>
  8052f0:	81000017 	ldw	r4,0(r16)
  8052f4:	80800417 	ldw	r2,16(r16)
  8052f8:	11000236 	bltu	r2,r4,805304 <__sfvwrite_r+0x314>
  8052fc:	84c00517 	ldw	r19,20(r16)
  805300:	94ffa62e 	bgeu	r18,r19,80519c <__alt_data_end+0xff80519c>
  805304:	9027883a 	mov	r19,r18
  805308:	b480012e 	bgeu	r22,r18,805310 <__sfvwrite_r+0x320>
  80530c:	b027883a 	mov	r19,r22
  805310:	e00b883a 	mov	r5,fp
  805314:	980d883a 	mov	r6,r19
  805318:	08062980 	call	806298 <memmove>
  80531c:	80800217 	ldw	r2,8(r16)
  805320:	80c00017 	ldw	r3,0(r16)
  805324:	14c5c83a 	sub	r2,r2,r19
  805328:	1cc7883a 	add	r3,r3,r19
  80532c:	80800215 	stw	r2,8(r16)
  805330:	80c00015 	stw	r3,0(r16)
  805334:	10004326 	beq	r2,zero,805444 <__sfvwrite_r+0x454>
  805338:	9805883a 	mov	r2,r19
  80533c:	003f8506 	br	805154 <__alt_data_end+0xff805154>
  805340:	a80d883a 	mov	r6,r21
  805344:	e00b883a 	mov	r5,fp
  805348:	da000115 	stw	r8,4(sp)
  80534c:	08062980 	call	806298 <memmove>
  805350:	80800217 	ldw	r2,8(r16)
  805354:	80c00017 	ldw	r3,0(r16)
  805358:	da000117 	ldw	r8,4(sp)
  80535c:	1545c83a 	sub	r2,r2,r21
  805360:	1d6b883a 	add	r21,r3,r21
  805364:	80800215 	stw	r2,8(r16)
  805368:	85400015 	stw	r21,0(r16)
  80536c:	003fb906 	br	805254 <__alt_data_end+0xff805254>
  805370:	81000017 	ldw	r4,0(r16)
  805374:	902d883a 	mov	r22,r18
  805378:	9027883a 	mov	r19,r18
  80537c:	003f6b06 	br	80512c <__alt_data_end+0xff80512c>
  805380:	e009883a 	mov	r4,fp
  805384:	01400284 	movi	r5,10
  805388:	900d883a 	mov	r6,r18
  80538c:	08060780 	call	806078 <memchr>
  805390:	10003e26 	beq	r2,zero,80548c <__sfvwrite_r+0x49c>
  805394:	10800044 	addi	r2,r2,1
  805398:	1727c83a 	sub	r19,r2,fp
  80539c:	02000044 	movi	r8,1
  8053a0:	003f9706 	br	805200 <__alt_data_end+0xff805200>
  8053a4:	80800517 	ldw	r2,20(r16)
  8053a8:	81400417 	ldw	r5,16(r16)
  8053ac:	80c00017 	ldw	r3,0(r16)
  8053b0:	10a7883a 	add	r19,r2,r2
  8053b4:	9885883a 	add	r2,r19,r2
  8053b8:	1026d7fa 	srli	r19,r2,31
  8053bc:	196bc83a 	sub	r21,r3,r5
  8053c0:	a9800044 	addi	r6,r21,1
  8053c4:	9885883a 	add	r2,r19,r2
  8053c8:	1027d07a 	srai	r19,r2,1
  8053cc:	3485883a 	add	r2,r6,r18
  8053d0:	980d883a 	mov	r6,r19
  8053d4:	9880022e 	bgeu	r19,r2,8053e0 <__sfvwrite_r+0x3f0>
  8053d8:	1027883a 	mov	r19,r2
  8053dc:	100d883a 	mov	r6,r2
  8053e0:	2101000c 	andi	r4,r4,1024
  8053e4:	20001c26 	beq	r4,zero,805458 <__sfvwrite_r+0x468>
  8053e8:	a009883a 	mov	r4,r20
  8053ec:	300b883a 	mov	r5,r6
  8053f0:	08058d00 	call	8058d0 <_malloc_r>
  8053f4:	102d883a 	mov	r22,r2
  8053f8:	10002926 	beq	r2,zero,8054a0 <__sfvwrite_r+0x4b0>
  8053fc:	81400417 	ldw	r5,16(r16)
  805400:	1009883a 	mov	r4,r2
  805404:	a80d883a 	mov	r6,r21
  805408:	08061600 	call	806160 <memcpy>
  80540c:	8080030b 	ldhu	r2,12(r16)
  805410:	00fedfc4 	movi	r3,-1153
  805414:	10c4703a 	and	r2,r2,r3
  805418:	10802014 	ori	r2,r2,128
  80541c:	8080030d 	sth	r2,12(r16)
  805420:	b549883a 	add	r4,r22,r21
  805424:	9d4bc83a 	sub	r5,r19,r21
  805428:	85800415 	stw	r22,16(r16)
  80542c:	84c00515 	stw	r19,20(r16)
  805430:	81000015 	stw	r4,0(r16)
  805434:	902d883a 	mov	r22,r18
  805438:	81400215 	stw	r5,8(r16)
  80543c:	9027883a 	mov	r19,r18
  805440:	003f3a06 	br	80512c <__alt_data_end+0xff80512c>
  805444:	a009883a 	mov	r4,r20
  805448:	800b883a 	mov	r5,r16
  80544c:	08047b00 	call	8047b0 <_fflush_r>
  805450:	103fb926 	beq	r2,zero,805338 <__alt_data_end+0xff805338>
  805454:	003f5f06 	br	8051d4 <__alt_data_end+0xff8051d4>
  805458:	a009883a 	mov	r4,r20
  80545c:	08074b80 	call	8074b8 <_realloc_r>
  805460:	102d883a 	mov	r22,r2
  805464:	103fee1e 	bne	r2,zero,805420 <__alt_data_end+0xff805420>
  805468:	81400417 	ldw	r5,16(r16)
  80546c:	a009883a 	mov	r4,r20
  805470:	0804d000 	call	804d00 <_free_r>
  805474:	8080030b 	ldhu	r2,12(r16)
  805478:	00ffdfc4 	movi	r3,-129
  80547c:	1884703a 	and	r2,r3,r2
  805480:	00c00304 	movi	r3,12
  805484:	a0c00015 	stw	r3,0(r20)
  805488:	003f5306 	br	8051d8 <__alt_data_end+0xff8051d8>
  80548c:	94c00044 	addi	r19,r18,1
  805490:	02000044 	movi	r8,1
  805494:	003f5a06 	br	805200 <__alt_data_end+0xff805200>
  805498:	00bfffc4 	movi	r2,-1
  80549c:	003f0206 	br	8050a8 <__alt_data_end+0xff8050a8>
  8054a0:	00800304 	movi	r2,12
  8054a4:	a0800015 	stw	r2,0(r20)
  8054a8:	8080030b 	ldhu	r2,12(r16)
  8054ac:	003f4a06 	br	8051d8 <__alt_data_end+0xff8051d8>

008054b0 <_fwalk>:
  8054b0:	defff704 	addi	sp,sp,-36
  8054b4:	dd000415 	stw	r20,16(sp)
  8054b8:	dfc00815 	stw	ra,32(sp)
  8054bc:	ddc00715 	stw	r23,28(sp)
  8054c0:	dd800615 	stw	r22,24(sp)
  8054c4:	dd400515 	stw	r21,20(sp)
  8054c8:	dcc00315 	stw	r19,12(sp)
  8054cc:	dc800215 	stw	r18,8(sp)
  8054d0:	dc400115 	stw	r17,4(sp)
  8054d4:	dc000015 	stw	r16,0(sp)
  8054d8:	2500b804 	addi	r20,r4,736
  8054dc:	a0002326 	beq	r20,zero,80556c <_fwalk+0xbc>
  8054e0:	282b883a 	mov	r21,r5
  8054e4:	002f883a 	mov	r23,zero
  8054e8:	05800044 	movi	r22,1
  8054ec:	04ffffc4 	movi	r19,-1
  8054f0:	a4400117 	ldw	r17,4(r20)
  8054f4:	a4800217 	ldw	r18,8(r20)
  8054f8:	8c7fffc4 	addi	r17,r17,-1
  8054fc:	88000d16 	blt	r17,zero,805534 <_fwalk+0x84>
  805500:	94000304 	addi	r16,r18,12
  805504:	94800384 	addi	r18,r18,14
  805508:	80c0000b 	ldhu	r3,0(r16)
  80550c:	8c7fffc4 	addi	r17,r17,-1
  805510:	813ffd04 	addi	r4,r16,-12
  805514:	b0c0042e 	bgeu	r22,r3,805528 <_fwalk+0x78>
  805518:	90c0000f 	ldh	r3,0(r18)
  80551c:	1cc00226 	beq	r3,r19,805528 <_fwalk+0x78>
  805520:	a83ee83a 	callr	r21
  805524:	b8aeb03a 	or	r23,r23,r2
  805528:	84001a04 	addi	r16,r16,104
  80552c:	94801a04 	addi	r18,r18,104
  805530:	8cfff51e 	bne	r17,r19,805508 <__alt_data_end+0xff805508>
  805534:	a5000017 	ldw	r20,0(r20)
  805538:	a03fed1e 	bne	r20,zero,8054f0 <__alt_data_end+0xff8054f0>
  80553c:	b805883a 	mov	r2,r23
  805540:	dfc00817 	ldw	ra,32(sp)
  805544:	ddc00717 	ldw	r23,28(sp)
  805548:	dd800617 	ldw	r22,24(sp)
  80554c:	dd400517 	ldw	r21,20(sp)
  805550:	dd000417 	ldw	r20,16(sp)
  805554:	dcc00317 	ldw	r19,12(sp)
  805558:	dc800217 	ldw	r18,8(sp)
  80555c:	dc400117 	ldw	r17,4(sp)
  805560:	dc000017 	ldw	r16,0(sp)
  805564:	dec00904 	addi	sp,sp,36
  805568:	f800283a 	ret
  80556c:	002f883a 	mov	r23,zero
  805570:	003ff206 	br	80553c <__alt_data_end+0xff80553c>

00805574 <_fwalk_reent>:
  805574:	defff704 	addi	sp,sp,-36
  805578:	dd400515 	stw	r21,20(sp)
  80557c:	dfc00815 	stw	ra,32(sp)
  805580:	ddc00715 	stw	r23,28(sp)
  805584:	dd800615 	stw	r22,24(sp)
  805588:	dd000415 	stw	r20,16(sp)
  80558c:	dcc00315 	stw	r19,12(sp)
  805590:	dc800215 	stw	r18,8(sp)
  805594:	dc400115 	stw	r17,4(sp)
  805598:	dc000015 	stw	r16,0(sp)
  80559c:	2540b804 	addi	r21,r4,736
  8055a0:	a8002326 	beq	r21,zero,805630 <_fwalk_reent+0xbc>
  8055a4:	2829883a 	mov	r20,r5
  8055a8:	202d883a 	mov	r22,r4
  8055ac:	002f883a 	mov	r23,zero
  8055b0:	04c00044 	movi	r19,1
  8055b4:	04bfffc4 	movi	r18,-1
  8055b8:	ac400117 	ldw	r17,4(r21)
  8055bc:	ac000217 	ldw	r16,8(r21)
  8055c0:	8c7fffc4 	addi	r17,r17,-1
  8055c4:	88000c16 	blt	r17,zero,8055f8 <_fwalk_reent+0x84>
  8055c8:	84000304 	addi	r16,r16,12
  8055cc:	80c0000b 	ldhu	r3,0(r16)
  8055d0:	8c7fffc4 	addi	r17,r17,-1
  8055d4:	817ffd04 	addi	r5,r16,-12
  8055d8:	98c0052e 	bgeu	r19,r3,8055f0 <_fwalk_reent+0x7c>
  8055dc:	80c0008f 	ldh	r3,2(r16)
  8055e0:	b009883a 	mov	r4,r22
  8055e4:	1c800226 	beq	r3,r18,8055f0 <_fwalk_reent+0x7c>
  8055e8:	a03ee83a 	callr	r20
  8055ec:	b8aeb03a 	or	r23,r23,r2
  8055f0:	84001a04 	addi	r16,r16,104
  8055f4:	8cbff51e 	bne	r17,r18,8055cc <__alt_data_end+0xff8055cc>
  8055f8:	ad400017 	ldw	r21,0(r21)
  8055fc:	a83fee1e 	bne	r21,zero,8055b8 <__alt_data_end+0xff8055b8>
  805600:	b805883a 	mov	r2,r23
  805604:	dfc00817 	ldw	ra,32(sp)
  805608:	ddc00717 	ldw	r23,28(sp)
  80560c:	dd800617 	ldw	r22,24(sp)
  805610:	dd400517 	ldw	r21,20(sp)
  805614:	dd000417 	ldw	r20,16(sp)
  805618:	dcc00317 	ldw	r19,12(sp)
  80561c:	dc800217 	ldw	r18,8(sp)
  805620:	dc400117 	ldw	r17,4(sp)
  805624:	dc000017 	ldw	r16,0(sp)
  805628:	dec00904 	addi	sp,sp,36
  80562c:	f800283a 	ret
  805630:	002f883a 	mov	r23,zero
  805634:	003ff206 	br	805600 <__alt_data_end+0xff805600>

00805638 <_setlocale_r>:
  805638:	30001b26 	beq	r6,zero,8056a8 <_setlocale_r+0x70>
  80563c:	01402074 	movhi	r5,129
  805640:	defffe04 	addi	sp,sp,-8
  805644:	29417204 	addi	r5,r5,1480
  805648:	3009883a 	mov	r4,r6
  80564c:	dc000015 	stw	r16,0(sp)
  805650:	dfc00115 	stw	ra,4(sp)
  805654:	3021883a 	mov	r16,r6
  805658:	0807c240 	call	807c24 <strcmp>
  80565c:	1000061e 	bne	r2,zero,805678 <_setlocale_r+0x40>
  805660:	00802074 	movhi	r2,129
  805664:	10817104 	addi	r2,r2,1476
  805668:	dfc00117 	ldw	ra,4(sp)
  80566c:	dc000017 	ldw	r16,0(sp)
  805670:	dec00204 	addi	sp,sp,8
  805674:	f800283a 	ret
  805678:	01402074 	movhi	r5,129
  80567c:	29417104 	addi	r5,r5,1476
  805680:	8009883a 	mov	r4,r16
  805684:	0807c240 	call	807c24 <strcmp>
  805688:	103ff526 	beq	r2,zero,805660 <__alt_data_end+0xff805660>
  80568c:	01402074 	movhi	r5,129
  805690:	29415c04 	addi	r5,r5,1392
  805694:	8009883a 	mov	r4,r16
  805698:	0807c240 	call	807c24 <strcmp>
  80569c:	103ff026 	beq	r2,zero,805660 <__alt_data_end+0xff805660>
  8056a0:	0005883a 	mov	r2,zero
  8056a4:	003ff006 	br	805668 <__alt_data_end+0xff805668>
  8056a8:	00802074 	movhi	r2,129
  8056ac:	10817104 	addi	r2,r2,1476
  8056b0:	f800283a 	ret

008056b4 <__locale_charset>:
  8056b4:	00802074 	movhi	r2,129
  8056b8:	1083d904 	addi	r2,r2,3940
  8056bc:	f800283a 	ret

008056c0 <__locale_mb_cur_max>:
  8056c0:	00802074 	movhi	r2,129
  8056c4:	1085f904 	addi	r2,r2,6116
  8056c8:	10800017 	ldw	r2,0(r2)
  8056cc:	f800283a 	ret

008056d0 <__locale_msgcharset>:
  8056d0:	00802074 	movhi	r2,129
  8056d4:	1083d104 	addi	r2,r2,3908
  8056d8:	f800283a 	ret

008056dc <__locale_cjk_lang>:
  8056dc:	0005883a 	mov	r2,zero
  8056e0:	f800283a 	ret

008056e4 <_localeconv_r>:
  8056e4:	00802074 	movhi	r2,129
  8056e8:	1083e104 	addi	r2,r2,3972
  8056ec:	f800283a 	ret

008056f0 <setlocale>:
  8056f0:	00c02074 	movhi	r3,129
  8056f4:	18c5f804 	addi	r3,r3,6112
  8056f8:	2005883a 	mov	r2,r4
  8056fc:	19000017 	ldw	r4,0(r3)
  805700:	280d883a 	mov	r6,r5
  805704:	100b883a 	mov	r5,r2
  805708:	08056381 	jmpi	805638 <_setlocale_r>

0080570c <localeconv>:
  80570c:	00802074 	movhi	r2,129
  805710:	1083e104 	addi	r2,r2,3972
  805714:	f800283a 	ret

00805718 <__smakebuf_r>:
  805718:	2880030b 	ldhu	r2,12(r5)
  80571c:	10c0008c 	andi	r3,r2,2
  805720:	1800401e 	bne	r3,zero,805824 <__smakebuf_r+0x10c>
  805724:	deffec04 	addi	sp,sp,-80
  805728:	dc000f15 	stw	r16,60(sp)
  80572c:	2821883a 	mov	r16,r5
  805730:	2940038f 	ldh	r5,14(r5)
  805734:	dc401015 	stw	r17,64(sp)
  805738:	dfc01315 	stw	ra,76(sp)
  80573c:	dcc01215 	stw	r19,72(sp)
  805740:	dc801115 	stw	r18,68(sp)
  805744:	2023883a 	mov	r17,r4
  805748:	28001b16 	blt	r5,zero,8057b8 <__smakebuf_r+0xa0>
  80574c:	d80d883a 	mov	r6,sp
  805750:	08095e40 	call	8095e4 <_fstat_r>
  805754:	10001716 	blt	r2,zero,8057b4 <__smakebuf_r+0x9c>
  805758:	d8800117 	ldw	r2,4(sp)
  80575c:	00e00014 	movui	r3,32768
  805760:	10bc000c 	andi	r2,r2,61440
  805764:	10c03726 	beq	r2,r3,805844 <__smakebuf_r+0x12c>
  805768:	80c0030b 	ldhu	r3,12(r16)
  80576c:	18c20014 	ori	r3,r3,2048
  805770:	80c0030d 	sth	r3,12(r16)
  805774:	00c80004 	movi	r3,8192
  805778:	10c03c1e 	bne	r2,r3,80586c <__smakebuf_r+0x154>
  80577c:	8140038f 	ldh	r5,14(r16)
  805780:	8809883a 	mov	r4,r17
  805784:	080963c0 	call	80963c <_isatty_r>
  805788:	10004e26 	beq	r2,zero,8058c4 <__smakebuf_r+0x1ac>
  80578c:	8080030b 	ldhu	r2,12(r16)
  805790:	04c00044 	movi	r19,1
  805794:	80c010c4 	addi	r3,r16,67
  805798:	14c4b03a 	or	r2,r2,r19
  80579c:	8080030d 	sth	r2,12(r16)
  8057a0:	80c00015 	stw	r3,0(r16)
  8057a4:	80c00415 	stw	r3,16(r16)
  8057a8:	84c00515 	stw	r19,20(r16)
  8057ac:	04810004 	movi	r18,1024
  8057b0:	00000706 	br	8057d0 <__smakebuf_r+0xb8>
  8057b4:	8080030b 	ldhu	r2,12(r16)
  8057b8:	10c0200c 	andi	r3,r2,128
  8057bc:	18001f1e 	bne	r3,zero,80583c <__smakebuf_r+0x124>
  8057c0:	04810004 	movi	r18,1024
  8057c4:	10820014 	ori	r2,r2,2048
  8057c8:	8080030d 	sth	r2,12(r16)
  8057cc:	0027883a 	mov	r19,zero
  8057d0:	8809883a 	mov	r4,r17
  8057d4:	900b883a 	mov	r5,r18
  8057d8:	08058d00 	call	8058d0 <_malloc_r>
  8057dc:	10002e26 	beq	r2,zero,805898 <__smakebuf_r+0x180>
  8057e0:	80c0030b 	ldhu	r3,12(r16)
  8057e4:	01002034 	movhi	r4,128
  8057e8:	21121304 	addi	r4,r4,18508
  8057ec:	89000f15 	stw	r4,60(r17)
  8057f0:	18c02014 	ori	r3,r3,128
  8057f4:	80c0030d 	sth	r3,12(r16)
  8057f8:	80800015 	stw	r2,0(r16)
  8057fc:	80800415 	stw	r2,16(r16)
  805800:	84800515 	stw	r18,20(r16)
  805804:	98001c1e 	bne	r19,zero,805878 <__smakebuf_r+0x160>
  805808:	dfc01317 	ldw	ra,76(sp)
  80580c:	dcc01217 	ldw	r19,72(sp)
  805810:	dc801117 	ldw	r18,68(sp)
  805814:	dc401017 	ldw	r17,64(sp)
  805818:	dc000f17 	ldw	r16,60(sp)
  80581c:	dec01404 	addi	sp,sp,80
  805820:	f800283a 	ret
  805824:	288010c4 	addi	r2,r5,67
  805828:	28800015 	stw	r2,0(r5)
  80582c:	28800415 	stw	r2,16(r5)
  805830:	00800044 	movi	r2,1
  805834:	28800515 	stw	r2,20(r5)
  805838:	f800283a 	ret
  80583c:	04801004 	movi	r18,64
  805840:	003fe006 	br	8057c4 <__alt_data_end+0xff8057c4>
  805844:	81000a17 	ldw	r4,40(r16)
  805848:	00c02034 	movhi	r3,128
  80584c:	18def004 	addi	r3,r3,31680
  805850:	20ffc51e 	bne	r4,r3,805768 <__alt_data_end+0xff805768>
  805854:	80c0030b 	ldhu	r3,12(r16)
  805858:	01010004 	movi	r4,1024
  80585c:	81001315 	stw	r4,76(r16)
  805860:	1906b03a 	or	r3,r3,r4
  805864:	80c0030d 	sth	r3,12(r16)
  805868:	003fc206 	br	805774 <__alt_data_end+0xff805774>
  80586c:	0027883a 	mov	r19,zero
  805870:	04810004 	movi	r18,1024
  805874:	003fd606 	br	8057d0 <__alt_data_end+0xff8057d0>
  805878:	8140038f 	ldh	r5,14(r16)
  80587c:	8809883a 	mov	r4,r17
  805880:	080963c0 	call	80963c <_isatty_r>
  805884:	103fe026 	beq	r2,zero,805808 <__alt_data_end+0xff805808>
  805888:	8080030b 	ldhu	r2,12(r16)
  80588c:	10800054 	ori	r2,r2,1
  805890:	8080030d 	sth	r2,12(r16)
  805894:	003fdc06 	br	805808 <__alt_data_end+0xff805808>
  805898:	8080030b 	ldhu	r2,12(r16)
  80589c:	10c0800c 	andi	r3,r2,512
  8058a0:	183fd91e 	bne	r3,zero,805808 <__alt_data_end+0xff805808>
  8058a4:	10800094 	ori	r2,r2,2
  8058a8:	80c010c4 	addi	r3,r16,67
  8058ac:	8080030d 	sth	r2,12(r16)
  8058b0:	00800044 	movi	r2,1
  8058b4:	80c00015 	stw	r3,0(r16)
  8058b8:	80c00415 	stw	r3,16(r16)
  8058bc:	80800515 	stw	r2,20(r16)
  8058c0:	003fd106 	br	805808 <__alt_data_end+0xff805808>
  8058c4:	04c00044 	movi	r19,1
  8058c8:	04810004 	movi	r18,1024
  8058cc:	003fc006 	br	8057d0 <__alt_data_end+0xff8057d0>

008058d0 <_malloc_r>:
  8058d0:	defff504 	addi	sp,sp,-44
  8058d4:	dc800315 	stw	r18,12(sp)
  8058d8:	dfc00a15 	stw	ra,40(sp)
  8058dc:	df000915 	stw	fp,36(sp)
  8058e0:	ddc00815 	stw	r23,32(sp)
  8058e4:	dd800715 	stw	r22,28(sp)
  8058e8:	dd400615 	stw	r21,24(sp)
  8058ec:	dd000515 	stw	r20,20(sp)
  8058f0:	dcc00415 	stw	r19,16(sp)
  8058f4:	dc400215 	stw	r17,8(sp)
  8058f8:	dc000115 	stw	r16,4(sp)
  8058fc:	288002c4 	addi	r2,r5,11
  805900:	00c00584 	movi	r3,22
  805904:	2025883a 	mov	r18,r4
  805908:	18802a2e 	bgeu	r3,r2,8059b4 <_malloc_r+0xe4>
  80590c:	047ffe04 	movi	r17,-8
  805910:	1462703a 	and	r17,r2,r17
  805914:	88009e16 	blt	r17,zero,805b90 <_malloc_r+0x2c0>
  805918:	89409d36 	bltu	r17,r5,805b90 <_malloc_r+0x2c0>
  80591c:	080d4700 	call	80d470 <__malloc_lock>
  805920:	00807dc4 	movi	r2,503
  805924:	14402736 	bltu	r2,r17,8059c4 <_malloc_r+0xf4>
  805928:	8806d0fa 	srli	r3,r17,3
  80592c:	04c02074 	movhi	r19,129
  805930:	9cc3ef04 	addi	r19,r19,4028
  805934:	18c5883a 	add	r2,r3,r3
  805938:	1085883a 	add	r2,r2,r2
  80593c:	1085883a 	add	r2,r2,r2
  805940:	9885883a 	add	r2,r19,r2
  805944:	14000317 	ldw	r16,12(r2)
  805948:	80814a26 	beq	r16,r2,805e74 <_malloc_r+0x5a4>
  80594c:	80c00117 	ldw	r3,4(r16)
  805950:	81000317 	ldw	r4,12(r16)
  805954:	00bfff04 	movi	r2,-4
  805958:	1884703a 	and	r2,r3,r2
  80595c:	81400217 	ldw	r5,8(r16)
  805960:	8085883a 	add	r2,r16,r2
  805964:	10c00117 	ldw	r3,4(r2)
  805968:	29000315 	stw	r4,12(r5)
  80596c:	21400215 	stw	r5,8(r4)
  805970:	18c00054 	ori	r3,r3,1
  805974:	10c00115 	stw	r3,4(r2)
  805978:	9009883a 	mov	r4,r18
  80597c:	080d4900 	call	80d490 <__malloc_unlock>
  805980:	80800204 	addi	r2,r16,8
  805984:	dfc00a17 	ldw	ra,40(sp)
  805988:	df000917 	ldw	fp,36(sp)
  80598c:	ddc00817 	ldw	r23,32(sp)
  805990:	dd800717 	ldw	r22,28(sp)
  805994:	dd400617 	ldw	r21,24(sp)
  805998:	dd000517 	ldw	r20,20(sp)
  80599c:	dcc00417 	ldw	r19,16(sp)
  8059a0:	dc800317 	ldw	r18,12(sp)
  8059a4:	dc400217 	ldw	r17,8(sp)
  8059a8:	dc000117 	ldw	r16,4(sp)
  8059ac:	dec00b04 	addi	sp,sp,44
  8059b0:	f800283a 	ret
  8059b4:	04400404 	movi	r17,16
  8059b8:	89407536 	bltu	r17,r5,805b90 <_malloc_r+0x2c0>
  8059bc:	080d4700 	call	80d470 <__malloc_lock>
  8059c0:	003fd906 	br	805928 <__alt_data_end+0xff805928>
  8059c4:	8806d27a 	srli	r3,r17,9
  8059c8:	18007526 	beq	r3,zero,805ba0 <_malloc_r+0x2d0>
  8059cc:	00800104 	movi	r2,4
  8059d0:	10c0ef36 	bltu	r2,r3,805d90 <_malloc_r+0x4c0>
  8059d4:	8806d1ba 	srli	r3,r17,6
  8059d8:	19c00e04 	addi	r7,r3,56
  8059dc:	39cb883a 	add	r5,r7,r7
  8059e0:	04c02074 	movhi	r19,129
  8059e4:	294b883a 	add	r5,r5,r5
  8059e8:	9cc3ef04 	addi	r19,r19,4028
  8059ec:	294b883a 	add	r5,r5,r5
  8059f0:	994b883a 	add	r5,r19,r5
  8059f4:	2c000317 	ldw	r16,12(r5)
  8059f8:	2c000e26 	beq	r5,r16,805a34 <_malloc_r+0x164>
  8059fc:	80800117 	ldw	r2,4(r16)
  805a00:	01bfff04 	movi	r6,-4
  805a04:	010003c4 	movi	r4,15
  805a08:	1184703a 	and	r2,r2,r6
  805a0c:	1447c83a 	sub	r3,r2,r17
  805a10:	20c00716 	blt	r4,r3,805a30 <_malloc_r+0x160>
  805a14:	1800650e 	bge	r3,zero,805bac <_malloc_r+0x2dc>
  805a18:	84000317 	ldw	r16,12(r16)
  805a1c:	2c000526 	beq	r5,r16,805a34 <_malloc_r+0x164>
  805a20:	80800117 	ldw	r2,4(r16)
  805a24:	1184703a 	and	r2,r2,r6
  805a28:	1447c83a 	sub	r3,r2,r17
  805a2c:	20fff90e 	bge	r4,r3,805a14 <__alt_data_end+0xff805a14>
  805a30:	39ffffc4 	addi	r7,r7,-1
  805a34:	38c00044 	addi	r3,r7,1
  805a38:	01802074 	movhi	r6,129
  805a3c:	9c000417 	ldw	r16,16(r19)
  805a40:	3183ef04 	addi	r6,r6,4028
  805a44:	32400204 	addi	r9,r6,8
  805a48:	82410326 	beq	r16,r9,805e58 <_malloc_r+0x588>
  805a4c:	81000117 	ldw	r4,4(r16)
  805a50:	00bfff04 	movi	r2,-4
  805a54:	208e703a 	and	r7,r4,r2
  805a58:	3c45c83a 	sub	r2,r7,r17
  805a5c:	010003c4 	movi	r4,15
  805a60:	2080ee16 	blt	r4,r2,805e1c <_malloc_r+0x54c>
  805a64:	32400515 	stw	r9,20(r6)
  805a68:	32400415 	stw	r9,16(r6)
  805a6c:	1000510e 	bge	r2,zero,805bb4 <_malloc_r+0x2e4>
  805a70:	00807fc4 	movi	r2,511
  805a74:	11c0ce36 	bltu	r2,r7,805db0 <_malloc_r+0x4e0>
  805a78:	3808d0fa 	srli	r4,r7,3
  805a7c:	01c00044 	movi	r7,1
  805a80:	30800117 	ldw	r2,4(r6)
  805a84:	210b883a 	add	r5,r4,r4
  805a88:	294b883a 	add	r5,r5,r5
  805a8c:	2009d0ba 	srai	r4,r4,2
  805a90:	294b883a 	add	r5,r5,r5
  805a94:	298b883a 	add	r5,r5,r6
  805a98:	2a000217 	ldw	r8,8(r5)
  805a9c:	3908983a 	sll	r4,r7,r4
  805aa0:	81400315 	stw	r5,12(r16)
  805aa4:	82000215 	stw	r8,8(r16)
  805aa8:	2088b03a 	or	r4,r4,r2
  805aac:	2c000215 	stw	r16,8(r5)
  805ab0:	31000115 	stw	r4,4(r6)
  805ab4:	44000315 	stw	r16,12(r8)
  805ab8:	1805d0ba 	srai	r2,r3,2
  805abc:	01400044 	movi	r5,1
  805ac0:	288a983a 	sll	r5,r5,r2
  805ac4:	21404336 	bltu	r4,r5,805bd4 <_malloc_r+0x304>
  805ac8:	2144703a 	and	r2,r4,r5
  805acc:	10000a1e 	bne	r2,zero,805af8 <_malloc_r+0x228>
  805ad0:	00bfff04 	movi	r2,-4
  805ad4:	294b883a 	add	r5,r5,r5
  805ad8:	1886703a 	and	r3,r3,r2
  805adc:	2144703a 	and	r2,r4,r5
  805ae0:	18c00104 	addi	r3,r3,4
  805ae4:	1000041e 	bne	r2,zero,805af8 <_malloc_r+0x228>
  805ae8:	294b883a 	add	r5,r5,r5
  805aec:	2144703a 	and	r2,r4,r5
  805af0:	18c00104 	addi	r3,r3,4
  805af4:	103ffc26 	beq	r2,zero,805ae8 <__alt_data_end+0xff805ae8>
  805af8:	023fff04 	movi	r8,-4
  805afc:	01c003c4 	movi	r7,15
  805b00:	18c5883a 	add	r2,r3,r3
  805b04:	1085883a 	add	r2,r2,r2
  805b08:	1085883a 	add	r2,r2,r2
  805b0c:	9895883a 	add	r10,r19,r2
  805b10:	52c00304 	addi	r11,r10,12
  805b14:	1819883a 	mov	r12,r3
  805b18:	5c000017 	ldw	r16,0(r11)
  805b1c:	59bffd04 	addi	r6,r11,-12
  805b20:	8180041e 	bne	r16,r6,805b34 <_malloc_r+0x264>
  805b24:	0000ce06 	br	805e60 <_malloc_r+0x590>
  805b28:	2000d70e 	bge	r4,zero,805e88 <_malloc_r+0x5b8>
  805b2c:	84000317 	ldw	r16,12(r16)
  805b30:	8180cb26 	beq	r16,r6,805e60 <_malloc_r+0x590>
  805b34:	80800117 	ldw	r2,4(r16)
  805b38:	1204703a 	and	r2,r2,r8
  805b3c:	1449c83a 	sub	r4,r2,r17
  805b40:	393ff90e 	bge	r7,r4,805b28 <__alt_data_end+0xff805b28>
  805b44:	80800317 	ldw	r2,12(r16)
  805b48:	80c00217 	ldw	r3,8(r16)
  805b4c:	89400054 	ori	r5,r17,1
  805b50:	81400115 	stw	r5,4(r16)
  805b54:	18800315 	stw	r2,12(r3)
  805b58:	10c00215 	stw	r3,8(r2)
  805b5c:	8463883a 	add	r17,r16,r17
  805b60:	9c400515 	stw	r17,20(r19)
  805b64:	9c400415 	stw	r17,16(r19)
  805b68:	20800054 	ori	r2,r4,1
  805b6c:	88800115 	stw	r2,4(r17)
  805b70:	8a400315 	stw	r9,12(r17)
  805b74:	8a400215 	stw	r9,8(r17)
  805b78:	8923883a 	add	r17,r17,r4
  805b7c:	89000015 	stw	r4,0(r17)
  805b80:	9009883a 	mov	r4,r18
  805b84:	080d4900 	call	80d490 <__malloc_unlock>
  805b88:	80800204 	addi	r2,r16,8
  805b8c:	003f7d06 	br	805984 <__alt_data_end+0xff805984>
  805b90:	00800304 	movi	r2,12
  805b94:	90800015 	stw	r2,0(r18)
  805b98:	0005883a 	mov	r2,zero
  805b9c:	003f7906 	br	805984 <__alt_data_end+0xff805984>
  805ba0:	01401f84 	movi	r5,126
  805ba4:	01c00fc4 	movi	r7,63
  805ba8:	003f8d06 	br	8059e0 <__alt_data_end+0xff8059e0>
  805bac:	81000317 	ldw	r4,12(r16)
  805bb0:	003f6a06 	br	80595c <__alt_data_end+0xff80595c>
  805bb4:	81c5883a 	add	r2,r16,r7
  805bb8:	10c00117 	ldw	r3,4(r2)
  805bbc:	9009883a 	mov	r4,r18
  805bc0:	18c00054 	ori	r3,r3,1
  805bc4:	10c00115 	stw	r3,4(r2)
  805bc8:	080d4900 	call	80d490 <__malloc_unlock>
  805bcc:	80800204 	addi	r2,r16,8
  805bd0:	003f6c06 	br	805984 <__alt_data_end+0xff805984>
  805bd4:	9c000217 	ldw	r16,8(r19)
  805bd8:	00bfff04 	movi	r2,-4
  805bdc:	85800117 	ldw	r22,4(r16)
  805be0:	b0ac703a 	and	r22,r22,r2
  805be4:	b4400336 	bltu	r22,r17,805bf4 <_malloc_r+0x324>
  805be8:	b445c83a 	sub	r2,r22,r17
  805bec:	00c003c4 	movi	r3,15
  805bf0:	18805d16 	blt	r3,r2,805d68 <_malloc_r+0x498>
  805bf4:	05c02074 	movhi	r23,129
  805bf8:	00802074 	movhi	r2,129
  805bfc:	bdc5fa04 	addi	r23,r23,6120
  805c00:	10895304 	addi	r2,r2,9548
  805c04:	15400017 	ldw	r21,0(r2)
  805c08:	b9000017 	ldw	r4,0(r23)
  805c0c:	00ffffc4 	movi	r3,-1
  805c10:	858d883a 	add	r6,r16,r22
  805c14:	8d6b883a 	add	r21,r17,r21
  805c18:	20c0e426 	beq	r4,r3,805fac <_malloc_r+0x6dc>
  805c1c:	ad4403c4 	addi	r21,r21,4111
  805c20:	00fc0004 	movi	r3,-4096
  805c24:	a8ea703a 	and	r21,r21,r3
  805c28:	9009883a 	mov	r4,r18
  805c2c:	a80b883a 	mov	r5,r21
  805c30:	d9800015 	stw	r6,0(sp)
  805c34:	0807a940 	call	807a94 <_sbrk_r>
  805c38:	00ffffc4 	movi	r3,-1
  805c3c:	1029883a 	mov	r20,r2
  805c40:	d9800017 	ldw	r6,0(sp)
  805c44:	10c0a426 	beq	r2,r3,805ed8 <_malloc_r+0x608>
  805c48:	1180a236 	bltu	r2,r6,805ed4 <_malloc_r+0x604>
  805c4c:	07002074 	movhi	fp,129
  805c50:	e7095c04 	addi	fp,fp,9584
  805c54:	e0c00017 	ldw	r3,0(fp)
  805c58:	a8c7883a 	add	r3,r21,r3
  805c5c:	e0c00015 	stw	r3,0(fp)
  805c60:	3500da26 	beq	r6,r20,805fcc <_malloc_r+0x6fc>
  805c64:	b9000017 	ldw	r4,0(r23)
  805c68:	00bfffc4 	movi	r2,-1
  805c6c:	2080e426 	beq	r4,r2,806000 <_malloc_r+0x730>
  805c70:	a185c83a 	sub	r2,r20,r6
  805c74:	1885883a 	add	r2,r3,r2
  805c78:	e0800015 	stw	r2,0(fp)
  805c7c:	a0c001cc 	andi	r3,r20,7
  805c80:	1800b526 	beq	r3,zero,805f58 <_malloc_r+0x688>
  805c84:	a0e9c83a 	sub	r20,r20,r3
  805c88:	00840204 	movi	r2,4104
  805c8c:	a5000204 	addi	r20,r20,8
  805c90:	10c7c83a 	sub	r3,r2,r3
  805c94:	a545883a 	add	r2,r20,r21
  805c98:	1083ffcc 	andi	r2,r2,4095
  805c9c:	18abc83a 	sub	r21,r3,r2
  805ca0:	9009883a 	mov	r4,r18
  805ca4:	a80b883a 	mov	r5,r21
  805ca8:	0807a940 	call	807a94 <_sbrk_r>
  805cac:	00ffffc4 	movi	r3,-1
  805cb0:	10c0d026 	beq	r2,r3,805ff4 <_malloc_r+0x724>
  805cb4:	1507c83a 	sub	r3,r2,r20
  805cb8:	a8c7883a 	add	r3,r21,r3
  805cbc:	18c00054 	ori	r3,r3,1
  805cc0:	e0800017 	ldw	r2,0(fp)
  805cc4:	9d000215 	stw	r20,8(r19)
  805cc8:	a0c00115 	stw	r3,4(r20)
  805ccc:	a887883a 	add	r3,r21,r2
  805cd0:	e0c00015 	stw	r3,0(fp)
  805cd4:	84c00e26 	beq	r16,r19,805d10 <_malloc_r+0x440>
  805cd8:	018003c4 	movi	r6,15
  805cdc:	3580a02e 	bgeu	r6,r22,805f60 <_malloc_r+0x690>
  805ce0:	81400117 	ldw	r5,4(r16)
  805ce4:	013ffe04 	movi	r4,-8
  805ce8:	b0bffd04 	addi	r2,r22,-12
  805cec:	1104703a 	and	r2,r2,r4
  805cf0:	2900004c 	andi	r4,r5,1
  805cf4:	1108b03a 	or	r4,r2,r4
  805cf8:	81000115 	stw	r4,4(r16)
  805cfc:	01400144 	movi	r5,5
  805d00:	8089883a 	add	r4,r16,r2
  805d04:	21400115 	stw	r5,4(r4)
  805d08:	21400215 	stw	r5,8(r4)
  805d0c:	3080c036 	bltu	r6,r2,806010 <_malloc_r+0x740>
  805d10:	00802074 	movhi	r2,129
  805d14:	10895204 	addi	r2,r2,9544
  805d18:	11000017 	ldw	r4,0(r2)
  805d1c:	20c0012e 	bgeu	r4,r3,805d24 <_malloc_r+0x454>
  805d20:	10c00015 	stw	r3,0(r2)
  805d24:	00802074 	movhi	r2,129
  805d28:	10895104 	addi	r2,r2,9540
  805d2c:	11000017 	ldw	r4,0(r2)
  805d30:	9c000217 	ldw	r16,8(r19)
  805d34:	20c0012e 	bgeu	r4,r3,805d3c <_malloc_r+0x46c>
  805d38:	10c00015 	stw	r3,0(r2)
  805d3c:	80c00117 	ldw	r3,4(r16)
  805d40:	00bfff04 	movi	r2,-4
  805d44:	1886703a 	and	r3,r3,r2
  805d48:	1c45c83a 	sub	r2,r3,r17
  805d4c:	1c400236 	bltu	r3,r17,805d58 <_malloc_r+0x488>
  805d50:	00c003c4 	movi	r3,15
  805d54:	18800416 	blt	r3,r2,805d68 <_malloc_r+0x498>
  805d58:	9009883a 	mov	r4,r18
  805d5c:	080d4900 	call	80d490 <__malloc_unlock>
  805d60:	0005883a 	mov	r2,zero
  805d64:	003f0706 	br	805984 <__alt_data_end+0xff805984>
  805d68:	88c00054 	ori	r3,r17,1
  805d6c:	80c00115 	stw	r3,4(r16)
  805d70:	8463883a 	add	r17,r16,r17
  805d74:	10800054 	ori	r2,r2,1
  805d78:	9c400215 	stw	r17,8(r19)
  805d7c:	88800115 	stw	r2,4(r17)
  805d80:	9009883a 	mov	r4,r18
  805d84:	080d4900 	call	80d490 <__malloc_unlock>
  805d88:	80800204 	addi	r2,r16,8
  805d8c:	003efd06 	br	805984 <__alt_data_end+0xff805984>
  805d90:	00800504 	movi	r2,20
  805d94:	10c0482e 	bgeu	r2,r3,805eb8 <_malloc_r+0x5e8>
  805d98:	00801504 	movi	r2,84
  805d9c:	10c06836 	bltu	r2,r3,805f40 <_malloc_r+0x670>
  805da0:	8806d33a 	srli	r3,r17,12
  805da4:	19c01b84 	addi	r7,r3,110
  805da8:	39cb883a 	add	r5,r7,r7
  805dac:	003f0c06 	br	8059e0 <__alt_data_end+0xff8059e0>
  805db0:	3804d27a 	srli	r2,r7,9
  805db4:	01000104 	movi	r4,4
  805db8:	2080422e 	bgeu	r4,r2,805ec4 <_malloc_r+0x5f4>
  805dbc:	01000504 	movi	r4,20
  805dc0:	20807c36 	bltu	r4,r2,805fb4 <_malloc_r+0x6e4>
  805dc4:	110016c4 	addi	r4,r2,91
  805dc8:	210b883a 	add	r5,r4,r4
  805dcc:	294b883a 	add	r5,r5,r5
  805dd0:	294b883a 	add	r5,r5,r5
  805dd4:	994b883a 	add	r5,r19,r5
  805dd8:	28800217 	ldw	r2,8(r5)
  805ddc:	02002074 	movhi	r8,129
  805de0:	4203ef04 	addi	r8,r8,4028
  805de4:	11406326 	beq	r2,r5,805f74 <_malloc_r+0x6a4>
  805de8:	01bfff04 	movi	r6,-4
  805dec:	11000117 	ldw	r4,4(r2)
  805df0:	2188703a 	and	r4,r4,r6
  805df4:	3900022e 	bgeu	r7,r4,805e00 <_malloc_r+0x530>
  805df8:	10800217 	ldw	r2,8(r2)
  805dfc:	28bffb1e 	bne	r5,r2,805dec <__alt_data_end+0xff805dec>
  805e00:	11800317 	ldw	r6,12(r2)
  805e04:	99000117 	ldw	r4,4(r19)
  805e08:	81800315 	stw	r6,12(r16)
  805e0c:	80800215 	stw	r2,8(r16)
  805e10:	34000215 	stw	r16,8(r6)
  805e14:	14000315 	stw	r16,12(r2)
  805e18:	003f2706 	br	805ab8 <__alt_data_end+0xff805ab8>
  805e1c:	88c00054 	ori	r3,r17,1
  805e20:	80c00115 	stw	r3,4(r16)
  805e24:	8463883a 	add	r17,r16,r17
  805e28:	34400515 	stw	r17,20(r6)
  805e2c:	34400415 	stw	r17,16(r6)
  805e30:	10c00054 	ori	r3,r2,1
  805e34:	8a400315 	stw	r9,12(r17)
  805e38:	8a400215 	stw	r9,8(r17)
  805e3c:	88c00115 	stw	r3,4(r17)
  805e40:	88a3883a 	add	r17,r17,r2
  805e44:	88800015 	stw	r2,0(r17)
  805e48:	9009883a 	mov	r4,r18
  805e4c:	080d4900 	call	80d490 <__malloc_unlock>
  805e50:	80800204 	addi	r2,r16,8
  805e54:	003ecb06 	br	805984 <__alt_data_end+0xff805984>
  805e58:	31000117 	ldw	r4,4(r6)
  805e5c:	003f1606 	br	805ab8 <__alt_data_end+0xff805ab8>
  805e60:	63000044 	addi	r12,r12,1
  805e64:	608000cc 	andi	r2,r12,3
  805e68:	5ac00204 	addi	r11,r11,8
  805e6c:	103f2a1e 	bne	r2,zero,805b18 <__alt_data_end+0xff805b18>
  805e70:	00002106 	br	805ef8 <_malloc_r+0x628>
  805e74:	80800204 	addi	r2,r16,8
  805e78:	84000517 	ldw	r16,20(r16)
  805e7c:	143eb31e 	bne	r2,r16,80594c <__alt_data_end+0xff80594c>
  805e80:	18c00084 	addi	r3,r3,2
  805e84:	003eec06 	br	805a38 <__alt_data_end+0xff805a38>
  805e88:	8085883a 	add	r2,r16,r2
  805e8c:	10c00117 	ldw	r3,4(r2)
  805e90:	81000317 	ldw	r4,12(r16)
  805e94:	81400217 	ldw	r5,8(r16)
  805e98:	18c00054 	ori	r3,r3,1
  805e9c:	10c00115 	stw	r3,4(r2)
  805ea0:	29000315 	stw	r4,12(r5)
  805ea4:	21400215 	stw	r5,8(r4)
  805ea8:	9009883a 	mov	r4,r18
  805eac:	080d4900 	call	80d490 <__malloc_unlock>
  805eb0:	80800204 	addi	r2,r16,8
  805eb4:	003eb306 	br	805984 <__alt_data_end+0xff805984>
  805eb8:	19c016c4 	addi	r7,r3,91
  805ebc:	39cb883a 	add	r5,r7,r7
  805ec0:	003ec706 	br	8059e0 <__alt_data_end+0xff8059e0>
  805ec4:	3804d1ba 	srli	r2,r7,6
  805ec8:	11000e04 	addi	r4,r2,56
  805ecc:	210b883a 	add	r5,r4,r4
  805ed0:	003fbe06 	br	805dcc <__alt_data_end+0xff805dcc>
  805ed4:	84ff5d26 	beq	r16,r19,805c4c <__alt_data_end+0xff805c4c>
  805ed8:	9c000217 	ldw	r16,8(r19)
  805edc:	00bfff04 	movi	r2,-4
  805ee0:	80c00117 	ldw	r3,4(r16)
  805ee4:	1886703a 	and	r3,r3,r2
  805ee8:	003f9706 	br	805d48 <__alt_data_end+0xff805d48>
  805eec:	52800017 	ldw	r10,0(r10)
  805ef0:	18ffffc4 	addi	r3,r3,-1
  805ef4:	50805c1e 	bne	r10,r2,806068 <_malloc_r+0x798>
  805ef8:	190000cc 	andi	r4,r3,3
  805efc:	50bffe04 	addi	r2,r10,-8
  805f00:	203ffa1e 	bne	r4,zero,805eec <__alt_data_end+0xff805eec>
  805f04:	98800117 	ldw	r2,4(r19)
  805f08:	0146303a 	nor	r3,zero,r5
  805f0c:	1884703a 	and	r2,r3,r2
  805f10:	98800115 	stw	r2,4(r19)
  805f14:	294b883a 	add	r5,r5,r5
  805f18:	117f2e36 	bltu	r2,r5,805bd4 <__alt_data_end+0xff805bd4>
  805f1c:	283f2d26 	beq	r5,zero,805bd4 <__alt_data_end+0xff805bd4>
  805f20:	1146703a 	and	r3,r2,r5
  805f24:	1800521e 	bne	r3,zero,806070 <_malloc_r+0x7a0>
  805f28:	6007883a 	mov	r3,r12
  805f2c:	294b883a 	add	r5,r5,r5
  805f30:	1148703a 	and	r4,r2,r5
  805f34:	18c00104 	addi	r3,r3,4
  805f38:	203ffc26 	beq	r4,zero,805f2c <__alt_data_end+0xff805f2c>
  805f3c:	003ef006 	br	805b00 <__alt_data_end+0xff805b00>
  805f40:	00805504 	movi	r2,340
  805f44:	10c01336 	bltu	r2,r3,805f94 <_malloc_r+0x6c4>
  805f48:	8806d3fa 	srli	r3,r17,15
  805f4c:	19c01dc4 	addi	r7,r3,119
  805f50:	39cb883a 	add	r5,r7,r7
  805f54:	003ea206 	br	8059e0 <__alt_data_end+0xff8059e0>
  805f58:	00c40004 	movi	r3,4096
  805f5c:	003f4d06 	br	805c94 <__alt_data_end+0xff805c94>
  805f60:	00800044 	movi	r2,1
  805f64:	a0800115 	stw	r2,4(r20)
  805f68:	a021883a 	mov	r16,r20
  805f6c:	0007883a 	mov	r3,zero
  805f70:	003f7506 	br	805d48 <__alt_data_end+0xff805d48>
  805f74:	200bd0ba 	srai	r5,r4,2
  805f78:	01800044 	movi	r6,1
  805f7c:	41000117 	ldw	r4,4(r8)
  805f80:	314a983a 	sll	r5,r6,r5
  805f84:	100d883a 	mov	r6,r2
  805f88:	2908b03a 	or	r4,r5,r4
  805f8c:	41000115 	stw	r4,4(r8)
  805f90:	003f9d06 	br	805e08 <__alt_data_end+0xff805e08>
  805f94:	00815504 	movi	r2,1364
  805f98:	10c01336 	bltu	r2,r3,805fe8 <_malloc_r+0x718>
  805f9c:	8806d4ba 	srli	r3,r17,18
  805fa0:	19c01f04 	addi	r7,r3,124
  805fa4:	39cb883a 	add	r5,r7,r7
  805fa8:	003e8d06 	br	8059e0 <__alt_data_end+0xff8059e0>
  805fac:	ad400404 	addi	r21,r21,16
  805fb0:	003f1d06 	br	805c28 <__alt_data_end+0xff805c28>
  805fb4:	01001504 	movi	r4,84
  805fb8:	20801c36 	bltu	r4,r2,80602c <_malloc_r+0x75c>
  805fbc:	3804d33a 	srli	r2,r7,12
  805fc0:	11001b84 	addi	r4,r2,110
  805fc4:	210b883a 	add	r5,r4,r4
  805fc8:	003f8006 	br	805dcc <__alt_data_end+0xff805dcc>
  805fcc:	3083ffcc 	andi	r2,r6,4095
  805fd0:	103f241e 	bne	r2,zero,805c64 <__alt_data_end+0xff805c64>
  805fd4:	99000217 	ldw	r4,8(r19)
  805fd8:	ad85883a 	add	r2,r21,r22
  805fdc:	10800054 	ori	r2,r2,1
  805fe0:	20800115 	stw	r2,4(r4)
  805fe4:	003f4a06 	br	805d10 <__alt_data_end+0xff805d10>
  805fe8:	01403f04 	movi	r5,252
  805fec:	01c01f84 	movi	r7,126
  805ff0:	003e7b06 	br	8059e0 <__alt_data_end+0xff8059e0>
  805ff4:	00c00044 	movi	r3,1
  805ff8:	002b883a 	mov	r21,zero
  805ffc:	003f3006 	br	805cc0 <__alt_data_end+0xff805cc0>
  806000:	00802074 	movhi	r2,129
  806004:	1085fa04 	addi	r2,r2,6120
  806008:	15000015 	stw	r20,0(r2)
  80600c:	003f1b06 	br	805c7c <__alt_data_end+0xff805c7c>
  806010:	9009883a 	mov	r4,r18
  806014:	81400204 	addi	r5,r16,8
  806018:	0804d000 	call	804d00 <_free_r>
  80601c:	00802074 	movhi	r2,129
  806020:	10895c04 	addi	r2,r2,9584
  806024:	10c00017 	ldw	r3,0(r2)
  806028:	003f3906 	br	805d10 <__alt_data_end+0xff805d10>
  80602c:	01005504 	movi	r4,340
  806030:	20800436 	bltu	r4,r2,806044 <_malloc_r+0x774>
  806034:	3804d3fa 	srli	r2,r7,15
  806038:	11001dc4 	addi	r4,r2,119
  80603c:	210b883a 	add	r5,r4,r4
  806040:	003f6206 	br	805dcc <__alt_data_end+0xff805dcc>
  806044:	01015504 	movi	r4,1364
  806048:	20800436 	bltu	r4,r2,80605c <_malloc_r+0x78c>
  80604c:	3804d4ba 	srli	r2,r7,18
  806050:	11001f04 	addi	r4,r2,124
  806054:	210b883a 	add	r5,r4,r4
  806058:	003f5c06 	br	805dcc <__alt_data_end+0xff805dcc>
  80605c:	01403f04 	movi	r5,252
  806060:	01001f84 	movi	r4,126
  806064:	003f5906 	br	805dcc <__alt_data_end+0xff805dcc>
  806068:	98800117 	ldw	r2,4(r19)
  80606c:	003fa906 	br	805f14 <__alt_data_end+0xff805f14>
  806070:	6007883a 	mov	r3,r12
  806074:	003ea206 	br	805b00 <__alt_data_end+0xff805b00>

00806078 <memchr>:
  806078:	208000cc 	andi	r2,r4,3
  80607c:	280f883a 	mov	r7,r5
  806080:	10003526 	beq	r2,zero,806158 <memchr+0xe0>
  806084:	30bfffc4 	addi	r2,r6,-1
  806088:	30001b26 	beq	r6,zero,8060f8 <memchr+0x80>
  80608c:	21800003 	ldbu	r6,0(r4)
  806090:	28c03fcc 	andi	r3,r5,255
  806094:	30c01a26 	beq	r6,r3,806100 <memchr+0x88>
  806098:	180d883a 	mov	r6,r3
  80609c:	00000406 	br	8060b0 <memchr+0x38>
  8060a0:	10001526 	beq	r2,zero,8060f8 <memchr+0x80>
  8060a4:	20c00003 	ldbu	r3,0(r4)
  8060a8:	10bfffc4 	addi	r2,r2,-1
  8060ac:	19801426 	beq	r3,r6,806100 <memchr+0x88>
  8060b0:	21000044 	addi	r4,r4,1
  8060b4:	20c000cc 	andi	r3,r4,3
  8060b8:	183ff91e 	bne	r3,zero,8060a0 <__alt_data_end+0xff8060a0>
  8060bc:	024000c4 	movi	r9,3
  8060c0:	48801136 	bltu	r9,r2,806108 <memchr+0x90>
  8060c4:	10000c26 	beq	r2,zero,8060f8 <memchr+0x80>
  8060c8:	20c00003 	ldbu	r3,0(r4)
  8060cc:	29403fcc 	andi	r5,r5,255
  8060d0:	19400b26 	beq	r3,r5,806100 <memchr+0x88>
  8060d4:	20c00044 	addi	r3,r4,1
  8060d8:	2085883a 	add	r2,r4,r2
  8060dc:	39803fcc 	andi	r6,r7,255
  8060e0:	00000306 	br	8060f0 <memchr+0x78>
  8060e4:	18c00044 	addi	r3,r3,1
  8060e8:	197fffc3 	ldbu	r5,-1(r3)
  8060ec:	29800426 	beq	r5,r6,806100 <memchr+0x88>
  8060f0:	1809883a 	mov	r4,r3
  8060f4:	18bffb1e 	bne	r3,r2,8060e4 <__alt_data_end+0xff8060e4>
  8060f8:	0005883a 	mov	r2,zero
  8060fc:	f800283a 	ret
  806100:	2005883a 	mov	r2,r4
  806104:	f800283a 	ret
  806108:	28c03fcc 	andi	r3,r5,255
  80610c:	1810923a 	slli	r8,r3,8
  806110:	02ffbff4 	movhi	r11,65279
  806114:	02a02074 	movhi	r10,32897
  806118:	40c6b03a 	or	r3,r8,r3
  80611c:	1810943a 	slli	r8,r3,16
  806120:	5affbfc4 	addi	r11,r11,-257
  806124:	52a02004 	addi	r10,r10,-32640
  806128:	40d0b03a 	or	r8,r8,r3
  80612c:	20c00017 	ldw	r3,0(r4)
  806130:	40c6f03a 	xor	r3,r8,r3
  806134:	1acd883a 	add	r6,r3,r11
  806138:	00c6303a 	nor	r3,zero,r3
  80613c:	30c6703a 	and	r3,r6,r3
  806140:	1a86703a 	and	r3,r3,r10
  806144:	183fdf1e 	bne	r3,zero,8060c4 <__alt_data_end+0xff8060c4>
  806148:	10bfff04 	addi	r2,r2,-4
  80614c:	21000104 	addi	r4,r4,4
  806150:	48bff636 	bltu	r9,r2,80612c <__alt_data_end+0xff80612c>
  806154:	003fdb06 	br	8060c4 <__alt_data_end+0xff8060c4>
  806158:	3005883a 	mov	r2,r6
  80615c:	003fd706 	br	8060bc <__alt_data_end+0xff8060bc>

00806160 <memcpy>:
  806160:	deffff04 	addi	sp,sp,-4
  806164:	dc000015 	stw	r16,0(sp)
  806168:	00c003c4 	movi	r3,15
  80616c:	2005883a 	mov	r2,r4
  806170:	1980432e 	bgeu	r3,r6,806280 <memcpy+0x120>
  806174:	2146b03a 	or	r3,r4,r5
  806178:	18c000cc 	andi	r3,r3,3
  80617c:	1800421e 	bne	r3,zero,806288 <memcpy+0x128>
  806180:	343ffc04 	addi	r16,r6,-16
  806184:	8020d13a 	srli	r16,r16,4
  806188:	28c00104 	addi	r3,r5,4
  80618c:	23400104 	addi	r13,r4,4
  806190:	801e913a 	slli	r15,r16,4
  806194:	2b000204 	addi	r12,r5,8
  806198:	22c00204 	addi	r11,r4,8
  80619c:	7bc00504 	addi	r15,r15,20
  8061a0:	2a800304 	addi	r10,r5,12
  8061a4:	22400304 	addi	r9,r4,12
  8061a8:	2bdf883a 	add	r15,r5,r15
  8061ac:	2811883a 	mov	r8,r5
  8061b0:	200f883a 	mov	r7,r4
  8061b4:	41000017 	ldw	r4,0(r8)
  8061b8:	39c00404 	addi	r7,r7,16
  8061bc:	18c00404 	addi	r3,r3,16
  8061c0:	393ffc15 	stw	r4,-16(r7)
  8061c4:	1bbffc17 	ldw	r14,-16(r3)
  8061c8:	6b400404 	addi	r13,r13,16
  8061cc:	5ac00404 	addi	r11,r11,16
  8061d0:	6bbffc15 	stw	r14,-16(r13)
  8061d4:	63800017 	ldw	r14,0(r12)
  8061d8:	4a400404 	addi	r9,r9,16
  8061dc:	42000404 	addi	r8,r8,16
  8061e0:	5bbffc15 	stw	r14,-16(r11)
  8061e4:	53800017 	ldw	r14,0(r10)
  8061e8:	63000404 	addi	r12,r12,16
  8061ec:	52800404 	addi	r10,r10,16
  8061f0:	4bbffc15 	stw	r14,-16(r9)
  8061f4:	1bffef1e 	bne	r3,r15,8061b4 <__alt_data_end+0xff8061b4>
  8061f8:	81c00044 	addi	r7,r16,1
  8061fc:	380e913a 	slli	r7,r7,4
  806200:	310003cc 	andi	r4,r6,15
  806204:	02c000c4 	movi	r11,3
  806208:	11c7883a 	add	r3,r2,r7
  80620c:	29cb883a 	add	r5,r5,r7
  806210:	59001f2e 	bgeu	r11,r4,806290 <memcpy+0x130>
  806214:	1813883a 	mov	r9,r3
  806218:	2811883a 	mov	r8,r5
  80621c:	200f883a 	mov	r7,r4
  806220:	42800017 	ldw	r10,0(r8)
  806224:	4a400104 	addi	r9,r9,4
  806228:	39ffff04 	addi	r7,r7,-4
  80622c:	4abfff15 	stw	r10,-4(r9)
  806230:	42000104 	addi	r8,r8,4
  806234:	59fffa36 	bltu	r11,r7,806220 <__alt_data_end+0xff806220>
  806238:	213fff04 	addi	r4,r4,-4
  80623c:	2008d0ba 	srli	r4,r4,2
  806240:	318000cc 	andi	r6,r6,3
  806244:	21000044 	addi	r4,r4,1
  806248:	2109883a 	add	r4,r4,r4
  80624c:	2109883a 	add	r4,r4,r4
  806250:	1907883a 	add	r3,r3,r4
  806254:	290b883a 	add	r5,r5,r4
  806258:	30000626 	beq	r6,zero,806274 <memcpy+0x114>
  80625c:	198d883a 	add	r6,r3,r6
  806260:	29c00003 	ldbu	r7,0(r5)
  806264:	18c00044 	addi	r3,r3,1
  806268:	29400044 	addi	r5,r5,1
  80626c:	19ffffc5 	stb	r7,-1(r3)
  806270:	19bffb1e 	bne	r3,r6,806260 <__alt_data_end+0xff806260>
  806274:	dc000017 	ldw	r16,0(sp)
  806278:	dec00104 	addi	sp,sp,4
  80627c:	f800283a 	ret
  806280:	2007883a 	mov	r3,r4
  806284:	003ff406 	br	806258 <__alt_data_end+0xff806258>
  806288:	2007883a 	mov	r3,r4
  80628c:	003ff306 	br	80625c <__alt_data_end+0xff80625c>
  806290:	200d883a 	mov	r6,r4
  806294:	003ff006 	br	806258 <__alt_data_end+0xff806258>

00806298 <memmove>:
  806298:	2005883a 	mov	r2,r4
  80629c:	29000b2e 	bgeu	r5,r4,8062cc <memmove+0x34>
  8062a0:	298f883a 	add	r7,r5,r6
  8062a4:	21c0092e 	bgeu	r4,r7,8062cc <memmove+0x34>
  8062a8:	2187883a 	add	r3,r4,r6
  8062ac:	198bc83a 	sub	r5,r3,r6
  8062b0:	30004b26 	beq	r6,zero,8063e0 <memmove+0x148>
  8062b4:	39ffffc4 	addi	r7,r7,-1
  8062b8:	39000003 	ldbu	r4,0(r7)
  8062bc:	18ffffc4 	addi	r3,r3,-1
  8062c0:	19000005 	stb	r4,0(r3)
  8062c4:	197ffb1e 	bne	r3,r5,8062b4 <__alt_data_end+0xff8062b4>
  8062c8:	f800283a 	ret
  8062cc:	00c003c4 	movi	r3,15
  8062d0:	1980412e 	bgeu	r3,r6,8063d8 <memmove+0x140>
  8062d4:	1146b03a 	or	r3,r2,r5
  8062d8:	18c000cc 	andi	r3,r3,3
  8062dc:	1800411e 	bne	r3,zero,8063e4 <memmove+0x14c>
  8062e0:	33fffc04 	addi	r15,r6,-16
  8062e4:	781ed13a 	srli	r15,r15,4
  8062e8:	28c00104 	addi	r3,r5,4
  8062ec:	13400104 	addi	r13,r2,4
  8062f0:	781c913a 	slli	r14,r15,4
  8062f4:	2b000204 	addi	r12,r5,8
  8062f8:	12c00204 	addi	r11,r2,8
  8062fc:	73800504 	addi	r14,r14,20
  806300:	2a800304 	addi	r10,r5,12
  806304:	12400304 	addi	r9,r2,12
  806308:	2b9d883a 	add	r14,r5,r14
  80630c:	2811883a 	mov	r8,r5
  806310:	100f883a 	mov	r7,r2
  806314:	41000017 	ldw	r4,0(r8)
  806318:	39c00404 	addi	r7,r7,16
  80631c:	18c00404 	addi	r3,r3,16
  806320:	393ffc15 	stw	r4,-16(r7)
  806324:	193ffc17 	ldw	r4,-16(r3)
  806328:	6b400404 	addi	r13,r13,16
  80632c:	5ac00404 	addi	r11,r11,16
  806330:	693ffc15 	stw	r4,-16(r13)
  806334:	61000017 	ldw	r4,0(r12)
  806338:	4a400404 	addi	r9,r9,16
  80633c:	42000404 	addi	r8,r8,16
  806340:	593ffc15 	stw	r4,-16(r11)
  806344:	51000017 	ldw	r4,0(r10)
  806348:	63000404 	addi	r12,r12,16
  80634c:	52800404 	addi	r10,r10,16
  806350:	493ffc15 	stw	r4,-16(r9)
  806354:	1bbfef1e 	bne	r3,r14,806314 <__alt_data_end+0xff806314>
  806358:	79000044 	addi	r4,r15,1
  80635c:	2008913a 	slli	r4,r4,4
  806360:	328003cc 	andi	r10,r6,15
  806364:	02c000c4 	movi	r11,3
  806368:	1107883a 	add	r3,r2,r4
  80636c:	290b883a 	add	r5,r5,r4
  806370:	5a801e2e 	bgeu	r11,r10,8063ec <memmove+0x154>
  806374:	1813883a 	mov	r9,r3
  806378:	2811883a 	mov	r8,r5
  80637c:	500f883a 	mov	r7,r10
  806380:	41000017 	ldw	r4,0(r8)
  806384:	4a400104 	addi	r9,r9,4
  806388:	39ffff04 	addi	r7,r7,-4
  80638c:	493fff15 	stw	r4,-4(r9)
  806390:	42000104 	addi	r8,r8,4
  806394:	59fffa36 	bltu	r11,r7,806380 <__alt_data_end+0xff806380>
  806398:	513fff04 	addi	r4,r10,-4
  80639c:	2008d0ba 	srli	r4,r4,2
  8063a0:	318000cc 	andi	r6,r6,3
  8063a4:	21000044 	addi	r4,r4,1
  8063a8:	2109883a 	add	r4,r4,r4
  8063ac:	2109883a 	add	r4,r4,r4
  8063b0:	1907883a 	add	r3,r3,r4
  8063b4:	290b883a 	add	r5,r5,r4
  8063b8:	30000926 	beq	r6,zero,8063e0 <memmove+0x148>
  8063bc:	198d883a 	add	r6,r3,r6
  8063c0:	29c00003 	ldbu	r7,0(r5)
  8063c4:	18c00044 	addi	r3,r3,1
  8063c8:	29400044 	addi	r5,r5,1
  8063cc:	19ffffc5 	stb	r7,-1(r3)
  8063d0:	19bffb1e 	bne	r3,r6,8063c0 <__alt_data_end+0xff8063c0>
  8063d4:	f800283a 	ret
  8063d8:	1007883a 	mov	r3,r2
  8063dc:	003ff606 	br	8063b8 <__alt_data_end+0xff8063b8>
  8063e0:	f800283a 	ret
  8063e4:	1007883a 	mov	r3,r2
  8063e8:	003ff406 	br	8063bc <__alt_data_end+0xff8063bc>
  8063ec:	500d883a 	mov	r6,r10
  8063f0:	003ff106 	br	8063b8 <__alt_data_end+0xff8063b8>

008063f4 <memset>:
  8063f4:	20c000cc 	andi	r3,r4,3
  8063f8:	2005883a 	mov	r2,r4
  8063fc:	18004326 	beq	r3,zero,80650c <memset+0x118>
  806400:	31ffffc4 	addi	r7,r6,-1
  806404:	30004026 	beq	r6,zero,806508 <memset+0x114>
  806408:	2813883a 	mov	r9,r5
  80640c:	200d883a 	mov	r6,r4
  806410:	2007883a 	mov	r3,r4
  806414:	00000406 	br	806428 <memset+0x34>
  806418:	3a3fffc4 	addi	r8,r7,-1
  80641c:	31800044 	addi	r6,r6,1
  806420:	38003926 	beq	r7,zero,806508 <memset+0x114>
  806424:	400f883a 	mov	r7,r8
  806428:	18c00044 	addi	r3,r3,1
  80642c:	32400005 	stb	r9,0(r6)
  806430:	1a0000cc 	andi	r8,r3,3
  806434:	403ff81e 	bne	r8,zero,806418 <__alt_data_end+0xff806418>
  806438:	010000c4 	movi	r4,3
  80643c:	21c02d2e 	bgeu	r4,r7,8064f4 <memset+0x100>
  806440:	29803fcc 	andi	r6,r5,255
  806444:	3008923a 	slli	r4,r6,8
  806448:	218cb03a 	or	r6,r4,r6
  80644c:	3008943a 	slli	r4,r6,16
  806450:	218cb03a 	or	r6,r4,r6
  806454:	010003c4 	movi	r4,15
  806458:	21c0182e 	bgeu	r4,r7,8064bc <memset+0xc8>
  80645c:	3b3ffc04 	addi	r12,r7,-16
  806460:	6018d13a 	srli	r12,r12,4
  806464:	1a000104 	addi	r8,r3,4
  806468:	1ac00204 	addi	r11,r3,8
  80646c:	6008913a 	slli	r4,r12,4
  806470:	1a800304 	addi	r10,r3,12
  806474:	1813883a 	mov	r9,r3
  806478:	21000504 	addi	r4,r4,20
  80647c:	1909883a 	add	r4,r3,r4
  806480:	49800015 	stw	r6,0(r9)
  806484:	41800015 	stw	r6,0(r8)
  806488:	59800015 	stw	r6,0(r11)
  80648c:	51800015 	stw	r6,0(r10)
  806490:	42000404 	addi	r8,r8,16
  806494:	4a400404 	addi	r9,r9,16
  806498:	5ac00404 	addi	r11,r11,16
  80649c:	52800404 	addi	r10,r10,16
  8064a0:	413ff71e 	bne	r8,r4,806480 <__alt_data_end+0xff806480>
  8064a4:	63000044 	addi	r12,r12,1
  8064a8:	6018913a 	slli	r12,r12,4
  8064ac:	39c003cc 	andi	r7,r7,15
  8064b0:	010000c4 	movi	r4,3
  8064b4:	1b07883a 	add	r3,r3,r12
  8064b8:	21c00e2e 	bgeu	r4,r7,8064f4 <memset+0x100>
  8064bc:	1813883a 	mov	r9,r3
  8064c0:	3811883a 	mov	r8,r7
  8064c4:	010000c4 	movi	r4,3
  8064c8:	49800015 	stw	r6,0(r9)
  8064cc:	423fff04 	addi	r8,r8,-4
  8064d0:	4a400104 	addi	r9,r9,4
  8064d4:	223ffc36 	bltu	r4,r8,8064c8 <__alt_data_end+0xff8064c8>
  8064d8:	393fff04 	addi	r4,r7,-4
  8064dc:	2008d0ba 	srli	r4,r4,2
  8064e0:	39c000cc 	andi	r7,r7,3
  8064e4:	21000044 	addi	r4,r4,1
  8064e8:	2109883a 	add	r4,r4,r4
  8064ec:	2109883a 	add	r4,r4,r4
  8064f0:	1907883a 	add	r3,r3,r4
  8064f4:	38000426 	beq	r7,zero,806508 <memset+0x114>
  8064f8:	19cf883a 	add	r7,r3,r7
  8064fc:	19400005 	stb	r5,0(r3)
  806500:	18c00044 	addi	r3,r3,1
  806504:	19fffd1e 	bne	r3,r7,8064fc <__alt_data_end+0xff8064fc>
  806508:	f800283a 	ret
  80650c:	2007883a 	mov	r3,r4
  806510:	300f883a 	mov	r7,r6
  806514:	003fc806 	br	806438 <__alt_data_end+0xff806438>

00806518 <_Balloc>:
  806518:	20801317 	ldw	r2,76(r4)
  80651c:	defffc04 	addi	sp,sp,-16
  806520:	dc400115 	stw	r17,4(sp)
  806524:	dc000015 	stw	r16,0(sp)
  806528:	dfc00315 	stw	ra,12(sp)
  80652c:	dc800215 	stw	r18,8(sp)
  806530:	2023883a 	mov	r17,r4
  806534:	2821883a 	mov	r16,r5
  806538:	10000f26 	beq	r2,zero,806578 <_Balloc+0x60>
  80653c:	8407883a 	add	r3,r16,r16
  806540:	18c7883a 	add	r3,r3,r3
  806544:	10c7883a 	add	r3,r2,r3
  806548:	18800017 	ldw	r2,0(r3)
  80654c:	10001126 	beq	r2,zero,806594 <_Balloc+0x7c>
  806550:	11000017 	ldw	r4,0(r2)
  806554:	19000015 	stw	r4,0(r3)
  806558:	10000415 	stw	zero,16(r2)
  80655c:	10000315 	stw	zero,12(r2)
  806560:	dfc00317 	ldw	ra,12(sp)
  806564:	dc800217 	ldw	r18,8(sp)
  806568:	dc400117 	ldw	r17,4(sp)
  80656c:	dc000017 	ldw	r16,0(sp)
  806570:	dec00404 	addi	sp,sp,16
  806574:	f800283a 	ret
  806578:	01400104 	movi	r5,4
  80657c:	01800844 	movi	r6,33
  806580:	080923c0 	call	80923c <_calloc_r>
  806584:	88801315 	stw	r2,76(r17)
  806588:	103fec1e 	bne	r2,zero,80653c <__alt_data_end+0xff80653c>
  80658c:	0005883a 	mov	r2,zero
  806590:	003ff306 	br	806560 <__alt_data_end+0xff806560>
  806594:	01400044 	movi	r5,1
  806598:	2c24983a 	sll	r18,r5,r16
  80659c:	8809883a 	mov	r4,r17
  8065a0:	91800144 	addi	r6,r18,5
  8065a4:	318d883a 	add	r6,r6,r6
  8065a8:	318d883a 	add	r6,r6,r6
  8065ac:	080923c0 	call	80923c <_calloc_r>
  8065b0:	103ff626 	beq	r2,zero,80658c <__alt_data_end+0xff80658c>
  8065b4:	14000115 	stw	r16,4(r2)
  8065b8:	14800215 	stw	r18,8(r2)
  8065bc:	003fe606 	br	806558 <__alt_data_end+0xff806558>

008065c0 <_Bfree>:
  8065c0:	28000826 	beq	r5,zero,8065e4 <_Bfree+0x24>
  8065c4:	28c00117 	ldw	r3,4(r5)
  8065c8:	20801317 	ldw	r2,76(r4)
  8065cc:	18c7883a 	add	r3,r3,r3
  8065d0:	18c7883a 	add	r3,r3,r3
  8065d4:	10c5883a 	add	r2,r2,r3
  8065d8:	10c00017 	ldw	r3,0(r2)
  8065dc:	28c00015 	stw	r3,0(r5)
  8065e0:	11400015 	stw	r5,0(r2)
  8065e4:	f800283a 	ret

008065e8 <__multadd>:
  8065e8:	defffa04 	addi	sp,sp,-24
  8065ec:	dc000115 	stw	r16,4(sp)
  8065f0:	2c000417 	ldw	r16,16(r5)
  8065f4:	dc800315 	stw	r18,12(sp)
  8065f8:	dc400215 	stw	r17,8(sp)
  8065fc:	dfc00515 	stw	ra,20(sp)
  806600:	dcc00415 	stw	r19,16(sp)
  806604:	2823883a 	mov	r17,r5
  806608:	2025883a 	mov	r18,r4
  80660c:	2a400504 	addi	r9,r5,20
  806610:	0015883a 	mov	r10,zero
  806614:	4a000017 	ldw	r8,0(r9)
  806618:	4a400104 	addi	r9,r9,4
  80661c:	52800044 	addi	r10,r10,1
  806620:	40ffffcc 	andi	r3,r8,65535
  806624:	1987383a 	mul	r3,r3,r6
  806628:	4010d43a 	srli	r8,r8,16
  80662c:	19cf883a 	add	r7,r3,r7
  806630:	4191383a 	mul	r8,r8,r6
  806634:	3816d43a 	srli	r11,r7,16
  806638:	38ffffcc 	andi	r3,r7,65535
  80663c:	5a0f883a 	add	r7,r11,r8
  806640:	3810943a 	slli	r8,r7,16
  806644:	380ed43a 	srli	r7,r7,16
  806648:	40c7883a 	add	r3,r8,r3
  80664c:	48ffff15 	stw	r3,-4(r9)
  806650:	543ff016 	blt	r10,r16,806614 <__alt_data_end+0xff806614>
  806654:	38000926 	beq	r7,zero,80667c <__multadd+0x94>
  806658:	88800217 	ldw	r2,8(r17)
  80665c:	80800f0e 	bge	r16,r2,80669c <__multadd+0xb4>
  806660:	80800144 	addi	r2,r16,5
  806664:	1085883a 	add	r2,r2,r2
  806668:	1085883a 	add	r2,r2,r2
  80666c:	8885883a 	add	r2,r17,r2
  806670:	11c00015 	stw	r7,0(r2)
  806674:	84000044 	addi	r16,r16,1
  806678:	8c000415 	stw	r16,16(r17)
  80667c:	8805883a 	mov	r2,r17
  806680:	dfc00517 	ldw	ra,20(sp)
  806684:	dcc00417 	ldw	r19,16(sp)
  806688:	dc800317 	ldw	r18,12(sp)
  80668c:	dc400217 	ldw	r17,8(sp)
  806690:	dc000117 	ldw	r16,4(sp)
  806694:	dec00604 	addi	sp,sp,24
  806698:	f800283a 	ret
  80669c:	89400117 	ldw	r5,4(r17)
  8066a0:	9009883a 	mov	r4,r18
  8066a4:	d9c00015 	stw	r7,0(sp)
  8066a8:	29400044 	addi	r5,r5,1
  8066ac:	08065180 	call	806518 <_Balloc>
  8066b0:	89800417 	ldw	r6,16(r17)
  8066b4:	11000304 	addi	r4,r2,12
  8066b8:	89400304 	addi	r5,r17,12
  8066bc:	31800084 	addi	r6,r6,2
  8066c0:	318d883a 	add	r6,r6,r6
  8066c4:	318d883a 	add	r6,r6,r6
  8066c8:	1027883a 	mov	r19,r2
  8066cc:	08061600 	call	806160 <memcpy>
  8066d0:	d9c00017 	ldw	r7,0(sp)
  8066d4:	88000a26 	beq	r17,zero,806700 <__multadd+0x118>
  8066d8:	89000117 	ldw	r4,4(r17)
  8066dc:	90c01317 	ldw	r3,76(r18)
  8066e0:	2109883a 	add	r4,r4,r4
  8066e4:	2109883a 	add	r4,r4,r4
  8066e8:	1907883a 	add	r3,r3,r4
  8066ec:	18800017 	ldw	r2,0(r3)
  8066f0:	88800015 	stw	r2,0(r17)
  8066f4:	1c400015 	stw	r17,0(r3)
  8066f8:	9823883a 	mov	r17,r19
  8066fc:	003fd806 	br	806660 <__alt_data_end+0xff806660>
  806700:	9823883a 	mov	r17,r19
  806704:	003fd606 	br	806660 <__alt_data_end+0xff806660>

00806708 <__s2b>:
  806708:	defff904 	addi	sp,sp,-28
  80670c:	dc400115 	stw	r17,4(sp)
  806710:	dc000015 	stw	r16,0(sp)
  806714:	2023883a 	mov	r17,r4
  806718:	2821883a 	mov	r16,r5
  80671c:	39000204 	addi	r4,r7,8
  806720:	01400244 	movi	r5,9
  806724:	dcc00315 	stw	r19,12(sp)
  806728:	dc800215 	stw	r18,8(sp)
  80672c:	dfc00615 	stw	ra,24(sp)
  806730:	dd400515 	stw	r21,20(sp)
  806734:	dd000415 	stw	r20,16(sp)
  806738:	3825883a 	mov	r18,r7
  80673c:	3027883a 	mov	r19,r6
  806740:	080a6400 	call	80a640 <__divsi3>
  806744:	00c00044 	movi	r3,1
  806748:	000b883a 	mov	r5,zero
  80674c:	1880030e 	bge	r3,r2,80675c <__s2b+0x54>
  806750:	18c7883a 	add	r3,r3,r3
  806754:	29400044 	addi	r5,r5,1
  806758:	18bffd16 	blt	r3,r2,806750 <__alt_data_end+0xff806750>
  80675c:	8809883a 	mov	r4,r17
  806760:	08065180 	call	806518 <_Balloc>
  806764:	d8c00717 	ldw	r3,28(sp)
  806768:	10c00515 	stw	r3,20(r2)
  80676c:	00c00044 	movi	r3,1
  806770:	10c00415 	stw	r3,16(r2)
  806774:	00c00244 	movi	r3,9
  806778:	1cc0210e 	bge	r3,r19,806800 <__s2b+0xf8>
  80677c:	80eb883a 	add	r21,r16,r3
  806780:	a829883a 	mov	r20,r21
  806784:	84e1883a 	add	r16,r16,r19
  806788:	a1c00007 	ldb	r7,0(r20)
  80678c:	8809883a 	mov	r4,r17
  806790:	a5000044 	addi	r20,r20,1
  806794:	100b883a 	mov	r5,r2
  806798:	01800284 	movi	r6,10
  80679c:	39fff404 	addi	r7,r7,-48
  8067a0:	08065e80 	call	8065e8 <__multadd>
  8067a4:	a43ff81e 	bne	r20,r16,806788 <__alt_data_end+0xff806788>
  8067a8:	ace1883a 	add	r16,r21,r19
  8067ac:	843ffe04 	addi	r16,r16,-8
  8067b0:	9c800a0e 	bge	r19,r18,8067dc <__s2b+0xd4>
  8067b4:	94e5c83a 	sub	r18,r18,r19
  8067b8:	84a5883a 	add	r18,r16,r18
  8067bc:	81c00007 	ldb	r7,0(r16)
  8067c0:	8809883a 	mov	r4,r17
  8067c4:	84000044 	addi	r16,r16,1
  8067c8:	100b883a 	mov	r5,r2
  8067cc:	01800284 	movi	r6,10
  8067d0:	39fff404 	addi	r7,r7,-48
  8067d4:	08065e80 	call	8065e8 <__multadd>
  8067d8:	84bff81e 	bne	r16,r18,8067bc <__alt_data_end+0xff8067bc>
  8067dc:	dfc00617 	ldw	ra,24(sp)
  8067e0:	dd400517 	ldw	r21,20(sp)
  8067e4:	dd000417 	ldw	r20,16(sp)
  8067e8:	dcc00317 	ldw	r19,12(sp)
  8067ec:	dc800217 	ldw	r18,8(sp)
  8067f0:	dc400117 	ldw	r17,4(sp)
  8067f4:	dc000017 	ldw	r16,0(sp)
  8067f8:	dec00704 	addi	sp,sp,28
  8067fc:	f800283a 	ret
  806800:	84000284 	addi	r16,r16,10
  806804:	1827883a 	mov	r19,r3
  806808:	003fe906 	br	8067b0 <__alt_data_end+0xff8067b0>

0080680c <__hi0bits>:
  80680c:	20bfffec 	andhi	r2,r4,65535
  806810:	1000141e 	bne	r2,zero,806864 <__hi0bits+0x58>
  806814:	2008943a 	slli	r4,r4,16
  806818:	00800404 	movi	r2,16
  80681c:	20ffc02c 	andhi	r3,r4,65280
  806820:	1800021e 	bne	r3,zero,80682c <__hi0bits+0x20>
  806824:	2008923a 	slli	r4,r4,8
  806828:	10800204 	addi	r2,r2,8
  80682c:	20fc002c 	andhi	r3,r4,61440
  806830:	1800021e 	bne	r3,zero,80683c <__hi0bits+0x30>
  806834:	2008913a 	slli	r4,r4,4
  806838:	10800104 	addi	r2,r2,4
  80683c:	20f0002c 	andhi	r3,r4,49152
  806840:	1800031e 	bne	r3,zero,806850 <__hi0bits+0x44>
  806844:	2109883a 	add	r4,r4,r4
  806848:	10800084 	addi	r2,r2,2
  80684c:	2109883a 	add	r4,r4,r4
  806850:	20000316 	blt	r4,zero,806860 <__hi0bits+0x54>
  806854:	2110002c 	andhi	r4,r4,16384
  806858:	2000041e 	bne	r4,zero,80686c <__hi0bits+0x60>
  80685c:	00800804 	movi	r2,32
  806860:	f800283a 	ret
  806864:	0005883a 	mov	r2,zero
  806868:	003fec06 	br	80681c <__alt_data_end+0xff80681c>
  80686c:	10800044 	addi	r2,r2,1
  806870:	f800283a 	ret

00806874 <__lo0bits>:
  806874:	20c00017 	ldw	r3,0(r4)
  806878:	188001cc 	andi	r2,r3,7
  80687c:	10000826 	beq	r2,zero,8068a0 <__lo0bits+0x2c>
  806880:	1880004c 	andi	r2,r3,1
  806884:	1000211e 	bne	r2,zero,80690c <__lo0bits+0x98>
  806888:	1880008c 	andi	r2,r3,2
  80688c:	1000211e 	bne	r2,zero,806914 <__lo0bits+0xa0>
  806890:	1806d0ba 	srli	r3,r3,2
  806894:	00800084 	movi	r2,2
  806898:	20c00015 	stw	r3,0(r4)
  80689c:	f800283a 	ret
  8068a0:	18bfffcc 	andi	r2,r3,65535
  8068a4:	10001326 	beq	r2,zero,8068f4 <__lo0bits+0x80>
  8068a8:	0005883a 	mov	r2,zero
  8068ac:	19403fcc 	andi	r5,r3,255
  8068b0:	2800021e 	bne	r5,zero,8068bc <__lo0bits+0x48>
  8068b4:	1806d23a 	srli	r3,r3,8
  8068b8:	10800204 	addi	r2,r2,8
  8068bc:	194003cc 	andi	r5,r3,15
  8068c0:	2800021e 	bne	r5,zero,8068cc <__lo0bits+0x58>
  8068c4:	1806d13a 	srli	r3,r3,4
  8068c8:	10800104 	addi	r2,r2,4
  8068cc:	194000cc 	andi	r5,r3,3
  8068d0:	2800021e 	bne	r5,zero,8068dc <__lo0bits+0x68>
  8068d4:	1806d0ba 	srli	r3,r3,2
  8068d8:	10800084 	addi	r2,r2,2
  8068dc:	1940004c 	andi	r5,r3,1
  8068e0:	2800081e 	bne	r5,zero,806904 <__lo0bits+0x90>
  8068e4:	1806d07a 	srli	r3,r3,1
  8068e8:	1800051e 	bne	r3,zero,806900 <__lo0bits+0x8c>
  8068ec:	00800804 	movi	r2,32
  8068f0:	f800283a 	ret
  8068f4:	1806d43a 	srli	r3,r3,16
  8068f8:	00800404 	movi	r2,16
  8068fc:	003feb06 	br	8068ac <__alt_data_end+0xff8068ac>
  806900:	10800044 	addi	r2,r2,1
  806904:	20c00015 	stw	r3,0(r4)
  806908:	f800283a 	ret
  80690c:	0005883a 	mov	r2,zero
  806910:	f800283a 	ret
  806914:	1806d07a 	srli	r3,r3,1
  806918:	00800044 	movi	r2,1
  80691c:	20c00015 	stw	r3,0(r4)
  806920:	f800283a 	ret

00806924 <__i2b>:
  806924:	defffd04 	addi	sp,sp,-12
  806928:	dc000015 	stw	r16,0(sp)
  80692c:	04000044 	movi	r16,1
  806930:	dc400115 	stw	r17,4(sp)
  806934:	2823883a 	mov	r17,r5
  806938:	800b883a 	mov	r5,r16
  80693c:	dfc00215 	stw	ra,8(sp)
  806940:	08065180 	call	806518 <_Balloc>
  806944:	14400515 	stw	r17,20(r2)
  806948:	14000415 	stw	r16,16(r2)
  80694c:	dfc00217 	ldw	ra,8(sp)
  806950:	dc400117 	ldw	r17,4(sp)
  806954:	dc000017 	ldw	r16,0(sp)
  806958:	dec00304 	addi	sp,sp,12
  80695c:	f800283a 	ret

00806960 <__multiply>:
  806960:	defffa04 	addi	sp,sp,-24
  806964:	dcc00315 	stw	r19,12(sp)
  806968:	dc800215 	stw	r18,8(sp)
  80696c:	2cc00417 	ldw	r19,16(r5)
  806970:	34800417 	ldw	r18,16(r6)
  806974:	dd000415 	stw	r20,16(sp)
  806978:	dc400115 	stw	r17,4(sp)
  80697c:	dfc00515 	stw	ra,20(sp)
  806980:	dc000015 	stw	r16,0(sp)
  806984:	2829883a 	mov	r20,r5
  806988:	3023883a 	mov	r17,r6
  80698c:	9c807016 	blt	r19,r18,806b50 <__multiply+0x1f0>
  806990:	9005883a 	mov	r2,r18
  806994:	9825883a 	mov	r18,r19
  806998:	1027883a 	mov	r19,r2
  80699c:	a0800217 	ldw	r2,8(r20)
  8069a0:	94e1883a 	add	r16,r18,r19
  8069a4:	a1400117 	ldw	r5,4(r20)
  8069a8:	1400010e 	bge	r2,r16,8069b0 <__multiply+0x50>
  8069ac:	29400044 	addi	r5,r5,1
  8069b0:	08065180 	call	806518 <_Balloc>
  8069b4:	8417883a 	add	r11,r16,r16
  8069b8:	13000504 	addi	r12,r2,20
  8069bc:	5ad7883a 	add	r11,r11,r11
  8069c0:	62d7883a 	add	r11,r12,r11
  8069c4:	6007883a 	mov	r3,r12
  8069c8:	62c0032e 	bgeu	r12,r11,8069d8 <__multiply+0x78>
  8069cc:	18000015 	stw	zero,0(r3)
  8069d0:	18c00104 	addi	r3,r3,4
  8069d4:	1afffd36 	bltu	r3,r11,8069cc <__alt_data_end+0xff8069cc>
  8069d8:	9ce7883a 	add	r19,r19,r19
  8069dc:	94a5883a 	add	r18,r18,r18
  8069e0:	89800504 	addi	r6,r17,20
  8069e4:	9ce7883a 	add	r19,r19,r19
  8069e8:	a3800504 	addi	r14,r20,20
  8069ec:	94a5883a 	add	r18,r18,r18
  8069f0:	34db883a 	add	r13,r6,r19
  8069f4:	7495883a 	add	r10,r14,r18
  8069f8:	3340422e 	bgeu	r6,r13,806b04 <__multiply+0x1a4>
  8069fc:	34400017 	ldw	r17,0(r6)
  806a00:	8cbfffcc 	andi	r18,r17,65535
  806a04:	90001b26 	beq	r18,zero,806a74 <__multiply+0x114>
  806a08:	6013883a 	mov	r9,r12
  806a0c:	7023883a 	mov	r17,r14
  806a10:	0011883a 	mov	r8,zero
  806a14:	88c00017 	ldw	r3,0(r17)
  806a18:	4bc00017 	ldw	r15,0(r9)
  806a1c:	8c400104 	addi	r17,r17,4
  806a20:	19ffffcc 	andi	r7,r3,65535
  806a24:	3c8f383a 	mul	r7,r7,r18
  806a28:	1808d43a 	srli	r4,r3,16
  806a2c:	797fffcc 	andi	r5,r15,65535
  806a30:	29cb883a 	add	r5,r5,r7
  806a34:	2a0b883a 	add	r5,r5,r8
  806a38:	2489383a 	mul	r4,r4,r18
  806a3c:	7806d43a 	srli	r3,r15,16
  806a40:	2810d43a 	srli	r8,r5,16
  806a44:	297fffcc 	andi	r5,r5,65535
  806a48:	1907883a 	add	r3,r3,r4
  806a4c:	1a07883a 	add	r3,r3,r8
  806a50:	1808943a 	slli	r4,r3,16
  806a54:	480f883a 	mov	r7,r9
  806a58:	1810d43a 	srli	r8,r3,16
  806a5c:	214ab03a 	or	r5,r4,r5
  806a60:	49400015 	stw	r5,0(r9)
  806a64:	4a400104 	addi	r9,r9,4
  806a68:	8abfea36 	bltu	r17,r10,806a14 <__alt_data_end+0xff806a14>
  806a6c:	3a000115 	stw	r8,4(r7)
  806a70:	34400017 	ldw	r17,0(r6)
  806a74:	8822d43a 	srli	r17,r17,16
  806a78:	88001f26 	beq	r17,zero,806af8 <__multiply+0x198>
  806a7c:	60c00017 	ldw	r3,0(r12)
  806a80:	7013883a 	mov	r9,r14
  806a84:	601f883a 	mov	r15,r12
  806a88:	1811883a 	mov	r8,r3
  806a8c:	6027883a 	mov	r19,r12
  806a90:	000f883a 	mov	r7,zero
  806a94:	00000106 	br	806a9c <__multiply+0x13c>
  806a98:	9027883a 	mov	r19,r18
  806a9c:	4940000b 	ldhu	r5,0(r9)
  806aa0:	4010d43a 	srli	r8,r8,16
  806aa4:	193fffcc 	andi	r4,r3,65535
  806aa8:	2c4b383a 	mul	r5,r5,r17
  806aac:	7bc00104 	addi	r15,r15,4
  806ab0:	4a400104 	addi	r9,r9,4
  806ab4:	2a0b883a 	add	r5,r5,r8
  806ab8:	29cb883a 	add	r5,r5,r7
  806abc:	2806943a 	slli	r3,r5,16
  806ac0:	9c800104 	addi	r18,r19,4
  806ac4:	280ad43a 	srli	r5,r5,16
  806ac8:	1908b03a 	or	r4,r3,r4
  806acc:	793fff15 	stw	r4,-4(r15)
  806ad0:	48ffff17 	ldw	r3,-4(r9)
  806ad4:	92000017 	ldw	r8,0(r18)
  806ad8:	1806d43a 	srli	r3,r3,16
  806adc:	413fffcc 	andi	r4,r8,65535
  806ae0:	1c47383a 	mul	r3,r3,r17
  806ae4:	1907883a 	add	r3,r3,r4
  806ae8:	1947883a 	add	r3,r3,r5
  806aec:	180ed43a 	srli	r7,r3,16
  806af0:	4abfe936 	bltu	r9,r10,806a98 <__alt_data_end+0xff806a98>
  806af4:	98c00115 	stw	r3,4(r19)
  806af8:	31800104 	addi	r6,r6,4
  806afc:	63000104 	addi	r12,r12,4
  806b00:	337fbe36 	bltu	r6,r13,8069fc <__alt_data_end+0xff8069fc>
  806b04:	0400090e 	bge	zero,r16,806b2c <__multiply+0x1cc>
  806b08:	58ffff17 	ldw	r3,-4(r11)
  806b0c:	5affff04 	addi	r11,r11,-4
  806b10:	18000326 	beq	r3,zero,806b20 <__multiply+0x1c0>
  806b14:	00000506 	br	806b2c <__multiply+0x1cc>
  806b18:	58c00017 	ldw	r3,0(r11)
  806b1c:	1800031e 	bne	r3,zero,806b2c <__multiply+0x1cc>
  806b20:	843fffc4 	addi	r16,r16,-1
  806b24:	5affff04 	addi	r11,r11,-4
  806b28:	803ffb1e 	bne	r16,zero,806b18 <__alt_data_end+0xff806b18>
  806b2c:	14000415 	stw	r16,16(r2)
  806b30:	dfc00517 	ldw	ra,20(sp)
  806b34:	dd000417 	ldw	r20,16(sp)
  806b38:	dcc00317 	ldw	r19,12(sp)
  806b3c:	dc800217 	ldw	r18,8(sp)
  806b40:	dc400117 	ldw	r17,4(sp)
  806b44:	dc000017 	ldw	r16,0(sp)
  806b48:	dec00604 	addi	sp,sp,24
  806b4c:	f800283a 	ret
  806b50:	3029883a 	mov	r20,r6
  806b54:	2823883a 	mov	r17,r5
  806b58:	003f9006 	br	80699c <__alt_data_end+0xff80699c>

00806b5c <__pow5mult>:
  806b5c:	defffa04 	addi	sp,sp,-24
  806b60:	dcc00315 	stw	r19,12(sp)
  806b64:	dc800215 	stw	r18,8(sp)
  806b68:	dc000015 	stw	r16,0(sp)
  806b6c:	dfc00515 	stw	ra,20(sp)
  806b70:	dd000415 	stw	r20,16(sp)
  806b74:	dc400115 	stw	r17,4(sp)
  806b78:	308000cc 	andi	r2,r6,3
  806b7c:	3021883a 	mov	r16,r6
  806b80:	2027883a 	mov	r19,r4
  806b84:	2825883a 	mov	r18,r5
  806b88:	10002e1e 	bne	r2,zero,806c44 <__pow5mult+0xe8>
  806b8c:	8021d0ba 	srai	r16,r16,2
  806b90:	80001a26 	beq	r16,zero,806bfc <__pow5mult+0xa0>
  806b94:	9c401217 	ldw	r17,72(r19)
  806b98:	8800061e 	bne	r17,zero,806bb4 <__pow5mult+0x58>
  806b9c:	00003406 	br	806c70 <__pow5mult+0x114>
  806ba0:	8021d07a 	srai	r16,r16,1
  806ba4:	80001526 	beq	r16,zero,806bfc <__pow5mult+0xa0>
  806ba8:	88800017 	ldw	r2,0(r17)
  806bac:	10001c26 	beq	r2,zero,806c20 <__pow5mult+0xc4>
  806bb0:	1023883a 	mov	r17,r2
  806bb4:	80c0004c 	andi	r3,r16,1
  806bb8:	183ff926 	beq	r3,zero,806ba0 <__alt_data_end+0xff806ba0>
  806bbc:	900b883a 	mov	r5,r18
  806bc0:	880d883a 	mov	r6,r17
  806bc4:	9809883a 	mov	r4,r19
  806bc8:	08069600 	call	806960 <__multiply>
  806bcc:	90001b26 	beq	r18,zero,806c3c <__pow5mult+0xe0>
  806bd0:	91c00117 	ldw	r7,4(r18)
  806bd4:	98c01317 	ldw	r3,76(r19)
  806bd8:	8021d07a 	srai	r16,r16,1
  806bdc:	39cf883a 	add	r7,r7,r7
  806be0:	39cf883a 	add	r7,r7,r7
  806be4:	19c7883a 	add	r3,r3,r7
  806be8:	19000017 	ldw	r4,0(r3)
  806bec:	91000015 	stw	r4,0(r18)
  806bf0:	1c800015 	stw	r18,0(r3)
  806bf4:	1025883a 	mov	r18,r2
  806bf8:	803feb1e 	bne	r16,zero,806ba8 <__alt_data_end+0xff806ba8>
  806bfc:	9005883a 	mov	r2,r18
  806c00:	dfc00517 	ldw	ra,20(sp)
  806c04:	dd000417 	ldw	r20,16(sp)
  806c08:	dcc00317 	ldw	r19,12(sp)
  806c0c:	dc800217 	ldw	r18,8(sp)
  806c10:	dc400117 	ldw	r17,4(sp)
  806c14:	dc000017 	ldw	r16,0(sp)
  806c18:	dec00604 	addi	sp,sp,24
  806c1c:	f800283a 	ret
  806c20:	9809883a 	mov	r4,r19
  806c24:	880b883a 	mov	r5,r17
  806c28:	880d883a 	mov	r6,r17
  806c2c:	08069600 	call	806960 <__multiply>
  806c30:	88800015 	stw	r2,0(r17)
  806c34:	10000015 	stw	zero,0(r2)
  806c38:	003fdd06 	br	806bb0 <__alt_data_end+0xff806bb0>
  806c3c:	1025883a 	mov	r18,r2
  806c40:	003fd706 	br	806ba0 <__alt_data_end+0xff806ba0>
  806c44:	10bfffc4 	addi	r2,r2,-1
  806c48:	1085883a 	add	r2,r2,r2
  806c4c:	00c02074 	movhi	r3,129
  806c50:	18c17504 	addi	r3,r3,1492
  806c54:	1085883a 	add	r2,r2,r2
  806c58:	1885883a 	add	r2,r3,r2
  806c5c:	11800017 	ldw	r6,0(r2)
  806c60:	000f883a 	mov	r7,zero
  806c64:	08065e80 	call	8065e8 <__multadd>
  806c68:	1025883a 	mov	r18,r2
  806c6c:	003fc706 	br	806b8c <__alt_data_end+0xff806b8c>
  806c70:	05000044 	movi	r20,1
  806c74:	9809883a 	mov	r4,r19
  806c78:	a00b883a 	mov	r5,r20
  806c7c:	08065180 	call	806518 <_Balloc>
  806c80:	1023883a 	mov	r17,r2
  806c84:	00809c44 	movi	r2,625
  806c88:	88800515 	stw	r2,20(r17)
  806c8c:	8d000415 	stw	r20,16(r17)
  806c90:	9c401215 	stw	r17,72(r19)
  806c94:	88000015 	stw	zero,0(r17)
  806c98:	003fc606 	br	806bb4 <__alt_data_end+0xff806bb4>

00806c9c <__lshift>:
  806c9c:	defff904 	addi	sp,sp,-28
  806ca0:	dd000415 	stw	r20,16(sp)
  806ca4:	dcc00315 	stw	r19,12(sp)
  806ca8:	3029d17a 	srai	r20,r6,5
  806cac:	2cc00417 	ldw	r19,16(r5)
  806cb0:	28800217 	ldw	r2,8(r5)
  806cb4:	dd400515 	stw	r21,20(sp)
  806cb8:	a4e7883a 	add	r19,r20,r19
  806cbc:	dc800215 	stw	r18,8(sp)
  806cc0:	dc400115 	stw	r17,4(sp)
  806cc4:	dc000015 	stw	r16,0(sp)
  806cc8:	dfc00615 	stw	ra,24(sp)
  806ccc:	9c000044 	addi	r16,r19,1
  806cd0:	2823883a 	mov	r17,r5
  806cd4:	302b883a 	mov	r21,r6
  806cd8:	2025883a 	mov	r18,r4
  806cdc:	29400117 	ldw	r5,4(r5)
  806ce0:	1400030e 	bge	r2,r16,806cf0 <__lshift+0x54>
  806ce4:	1085883a 	add	r2,r2,r2
  806ce8:	29400044 	addi	r5,r5,1
  806cec:	143ffd16 	blt	r2,r16,806ce4 <__alt_data_end+0xff806ce4>
  806cf0:	9009883a 	mov	r4,r18
  806cf4:	08065180 	call	806518 <_Balloc>
  806cf8:	11c00504 	addi	r7,r2,20
  806cfc:	0500090e 	bge	zero,r20,806d24 <__lshift+0x88>
  806d00:	3811883a 	mov	r8,r7
  806d04:	0007883a 	mov	r3,zero
  806d08:	40000015 	stw	zero,0(r8)
  806d0c:	18c00044 	addi	r3,r3,1
  806d10:	42000104 	addi	r8,r8,4
  806d14:	1d3ffc1e 	bne	r3,r20,806d08 <__alt_data_end+0xff806d08>
  806d18:	18c7883a 	add	r3,r3,r3
  806d1c:	18c7883a 	add	r3,r3,r3
  806d20:	38cf883a 	add	r7,r7,r3
  806d24:	89000417 	ldw	r4,16(r17)
  806d28:	88c00504 	addi	r3,r17,20
  806d2c:	a98007cc 	andi	r6,r21,31
  806d30:	2109883a 	add	r4,r4,r4
  806d34:	2109883a 	add	r4,r4,r4
  806d38:	1909883a 	add	r4,r3,r4
  806d3c:	30002326 	beq	r6,zero,806dcc <__lshift+0x130>
  806d40:	01400804 	movi	r5,32
  806d44:	298bc83a 	sub	r5,r5,r6
  806d48:	0013883a 	mov	r9,zero
  806d4c:	1a000017 	ldw	r8,0(r3)
  806d50:	3815883a 	mov	r10,r7
  806d54:	39c00104 	addi	r7,r7,4
  806d58:	4190983a 	sll	r8,r8,r6
  806d5c:	18c00104 	addi	r3,r3,4
  806d60:	4a10b03a 	or	r8,r9,r8
  806d64:	3a3fff15 	stw	r8,-4(r7)
  806d68:	1a3fff17 	ldw	r8,-4(r3)
  806d6c:	4152d83a 	srl	r9,r8,r5
  806d70:	193ff636 	bltu	r3,r4,806d4c <__alt_data_end+0xff806d4c>
  806d74:	52400115 	stw	r9,4(r10)
  806d78:	48001a1e 	bne	r9,zero,806de4 <__lshift+0x148>
  806d7c:	843fffc4 	addi	r16,r16,-1
  806d80:	14000415 	stw	r16,16(r2)
  806d84:	88000826 	beq	r17,zero,806da8 <__lshift+0x10c>
  806d88:	89000117 	ldw	r4,4(r17)
  806d8c:	90c01317 	ldw	r3,76(r18)
  806d90:	2109883a 	add	r4,r4,r4
  806d94:	2109883a 	add	r4,r4,r4
  806d98:	1907883a 	add	r3,r3,r4
  806d9c:	19000017 	ldw	r4,0(r3)
  806da0:	89000015 	stw	r4,0(r17)
  806da4:	1c400015 	stw	r17,0(r3)
  806da8:	dfc00617 	ldw	ra,24(sp)
  806dac:	dd400517 	ldw	r21,20(sp)
  806db0:	dd000417 	ldw	r20,16(sp)
  806db4:	dcc00317 	ldw	r19,12(sp)
  806db8:	dc800217 	ldw	r18,8(sp)
  806dbc:	dc400117 	ldw	r17,4(sp)
  806dc0:	dc000017 	ldw	r16,0(sp)
  806dc4:	dec00704 	addi	sp,sp,28
  806dc8:	f800283a 	ret
  806dcc:	19400017 	ldw	r5,0(r3)
  806dd0:	39c00104 	addi	r7,r7,4
  806dd4:	18c00104 	addi	r3,r3,4
  806dd8:	397fff15 	stw	r5,-4(r7)
  806ddc:	193ffb36 	bltu	r3,r4,806dcc <__alt_data_end+0xff806dcc>
  806de0:	003fe606 	br	806d7c <__alt_data_end+0xff806d7c>
  806de4:	9c000084 	addi	r16,r19,2
  806de8:	003fe406 	br	806d7c <__alt_data_end+0xff806d7c>

00806dec <__mcmp>:
  806dec:	20800417 	ldw	r2,16(r4)
  806df0:	28c00417 	ldw	r3,16(r5)
  806df4:	10c5c83a 	sub	r2,r2,r3
  806df8:	1000111e 	bne	r2,zero,806e40 <__mcmp+0x54>
  806dfc:	18c7883a 	add	r3,r3,r3
  806e00:	18c7883a 	add	r3,r3,r3
  806e04:	21000504 	addi	r4,r4,20
  806e08:	29400504 	addi	r5,r5,20
  806e0c:	20c5883a 	add	r2,r4,r3
  806e10:	28cb883a 	add	r5,r5,r3
  806e14:	00000106 	br	806e1c <__mcmp+0x30>
  806e18:	20800a2e 	bgeu	r4,r2,806e44 <__mcmp+0x58>
  806e1c:	10bfff04 	addi	r2,r2,-4
  806e20:	297fff04 	addi	r5,r5,-4
  806e24:	11800017 	ldw	r6,0(r2)
  806e28:	28c00017 	ldw	r3,0(r5)
  806e2c:	30fffa26 	beq	r6,r3,806e18 <__alt_data_end+0xff806e18>
  806e30:	30c00236 	bltu	r6,r3,806e3c <__mcmp+0x50>
  806e34:	00800044 	movi	r2,1
  806e38:	f800283a 	ret
  806e3c:	00bfffc4 	movi	r2,-1
  806e40:	f800283a 	ret
  806e44:	0005883a 	mov	r2,zero
  806e48:	f800283a 	ret

00806e4c <__mdiff>:
  806e4c:	defffb04 	addi	sp,sp,-20
  806e50:	dc000015 	stw	r16,0(sp)
  806e54:	2821883a 	mov	r16,r5
  806e58:	dcc00315 	stw	r19,12(sp)
  806e5c:	300b883a 	mov	r5,r6
  806e60:	2027883a 	mov	r19,r4
  806e64:	8009883a 	mov	r4,r16
  806e68:	dc800215 	stw	r18,8(sp)
  806e6c:	dfc00415 	stw	ra,16(sp)
  806e70:	dc400115 	stw	r17,4(sp)
  806e74:	3025883a 	mov	r18,r6
  806e78:	0806dec0 	call	806dec <__mcmp>
  806e7c:	10005226 	beq	r2,zero,806fc8 <__mdiff+0x17c>
  806e80:	10004c16 	blt	r2,zero,806fb4 <__mdiff+0x168>
  806e84:	0023883a 	mov	r17,zero
  806e88:	81400117 	ldw	r5,4(r16)
  806e8c:	9809883a 	mov	r4,r19
  806e90:	08065180 	call	806518 <_Balloc>
  806e94:	83400417 	ldw	r13,16(r16)
  806e98:	93800417 	ldw	r14,16(r18)
  806e9c:	81000504 	addi	r4,r16,20
  806ea0:	6b59883a 	add	r12,r13,r13
  806ea4:	739d883a 	add	r14,r14,r14
  806ea8:	6319883a 	add	r12,r12,r12
  806eac:	91800504 	addi	r6,r18,20
  806eb0:	739d883a 	add	r14,r14,r14
  806eb4:	14400315 	stw	r17,12(r2)
  806eb8:	2319883a 	add	r12,r4,r12
  806ebc:	339d883a 	add	r14,r6,r14
  806ec0:	12400504 	addi	r9,r2,20
  806ec4:	0007883a 	mov	r3,zero
  806ec8:	22000017 	ldw	r8,0(r4)
  806ecc:	32800017 	ldw	r10,0(r6)
  806ed0:	4ac00104 	addi	r11,r9,4
  806ed4:	41ffffcc 	andi	r7,r8,65535
  806ed8:	38c7883a 	add	r3,r7,r3
  806edc:	51ffffcc 	andi	r7,r10,65535
  806ee0:	19cfc83a 	sub	r7,r3,r7
  806ee4:	4010d43a 	srli	r8,r8,16
  806ee8:	5014d43a 	srli	r10,r10,16
  806eec:	3807d43a 	srai	r3,r7,16
  806ef0:	39ffffcc 	andi	r7,r7,65535
  806ef4:	4291c83a 	sub	r8,r8,r10
  806ef8:	40c7883a 	add	r3,r8,r3
  806efc:	1810943a 	slli	r8,r3,16
  806f00:	31800104 	addi	r6,r6,4
  806f04:	21000104 	addi	r4,r4,4
  806f08:	41ceb03a 	or	r7,r8,r7
  806f0c:	49c00015 	stw	r7,0(r9)
  806f10:	1807d43a 	srai	r3,r3,16
  806f14:	580b883a 	mov	r5,r11
  806f18:	5813883a 	mov	r9,r11
  806f1c:	33bfea36 	bltu	r6,r14,806ec8 <__alt_data_end+0xff806ec8>
  806f20:	2011883a 	mov	r8,r4
  806f24:	2300152e 	bgeu	r4,r12,806f7c <__mdiff+0x130>
  806f28:	21400017 	ldw	r5,0(r4)
  806f2c:	4a400104 	addi	r9,r9,4
  806f30:	21000104 	addi	r4,r4,4
  806f34:	29ffffcc 	andi	r7,r5,65535
  806f38:	38c7883a 	add	r3,r7,r3
  806f3c:	280ad43a 	srli	r5,r5,16
  806f40:	180dd43a 	srai	r6,r3,16
  806f44:	19ffffcc 	andi	r7,r3,65535
  806f48:	3147883a 	add	r3,r6,r5
  806f4c:	180a943a 	slli	r5,r3,16
  806f50:	1807d43a 	srai	r3,r3,16
  806f54:	29ceb03a 	or	r7,r5,r7
  806f58:	49ffff15 	stw	r7,-4(r9)
  806f5c:	233ff236 	bltu	r4,r12,806f28 <__alt_data_end+0xff806f28>
  806f60:	0206303a 	nor	r3,zero,r8
  806f64:	1b07883a 	add	r3,r3,r12
  806f68:	1806d0ba 	srli	r3,r3,2
  806f6c:	18c00044 	addi	r3,r3,1
  806f70:	18c7883a 	add	r3,r3,r3
  806f74:	18c7883a 	add	r3,r3,r3
  806f78:	58cb883a 	add	r5,r11,r3
  806f7c:	28ffff04 	addi	r3,r5,-4
  806f80:	3800041e 	bne	r7,zero,806f94 <__mdiff+0x148>
  806f84:	18ffff04 	addi	r3,r3,-4
  806f88:	19000017 	ldw	r4,0(r3)
  806f8c:	6b7fffc4 	addi	r13,r13,-1
  806f90:	203ffc26 	beq	r4,zero,806f84 <__alt_data_end+0xff806f84>
  806f94:	13400415 	stw	r13,16(r2)
  806f98:	dfc00417 	ldw	ra,16(sp)
  806f9c:	dcc00317 	ldw	r19,12(sp)
  806fa0:	dc800217 	ldw	r18,8(sp)
  806fa4:	dc400117 	ldw	r17,4(sp)
  806fa8:	dc000017 	ldw	r16,0(sp)
  806fac:	dec00504 	addi	sp,sp,20
  806fb0:	f800283a 	ret
  806fb4:	8005883a 	mov	r2,r16
  806fb8:	04400044 	movi	r17,1
  806fbc:	9021883a 	mov	r16,r18
  806fc0:	1025883a 	mov	r18,r2
  806fc4:	003fb006 	br	806e88 <__alt_data_end+0xff806e88>
  806fc8:	9809883a 	mov	r4,r19
  806fcc:	000b883a 	mov	r5,zero
  806fd0:	08065180 	call	806518 <_Balloc>
  806fd4:	00c00044 	movi	r3,1
  806fd8:	10c00415 	stw	r3,16(r2)
  806fdc:	10000515 	stw	zero,20(r2)
  806fe0:	003fed06 	br	806f98 <__alt_data_end+0xff806f98>

00806fe4 <__ulp>:
  806fe4:	295ffc2c 	andhi	r5,r5,32752
  806fe8:	00bf3034 	movhi	r2,64704
  806fec:	2887883a 	add	r3,r5,r2
  806ff0:	00c0020e 	bge	zero,r3,806ffc <__ulp+0x18>
  806ff4:	0005883a 	mov	r2,zero
  806ff8:	f800283a 	ret
  806ffc:	00c7c83a 	sub	r3,zero,r3
  807000:	180bd53a 	srai	r5,r3,20
  807004:	008004c4 	movi	r2,19
  807008:	11400a0e 	bge	r2,r5,807034 <__ulp+0x50>
  80700c:	00800c84 	movi	r2,50
  807010:	0007883a 	mov	r3,zero
  807014:	11400516 	blt	r2,r5,80702c <__ulp+0x48>
  807018:	00800cc4 	movi	r2,51
  80701c:	114bc83a 	sub	r5,r2,r5
  807020:	00800044 	movi	r2,1
  807024:	1144983a 	sll	r2,r2,r5
  807028:	f800283a 	ret
  80702c:	00800044 	movi	r2,1
  807030:	f800283a 	ret
  807034:	00800234 	movhi	r2,8
  807038:	1147d83a 	sra	r3,r2,r5
  80703c:	0005883a 	mov	r2,zero
  807040:	f800283a 	ret

00807044 <__b2d>:
  807044:	defffa04 	addi	sp,sp,-24
  807048:	dc000015 	stw	r16,0(sp)
  80704c:	24000417 	ldw	r16,16(r4)
  807050:	dc400115 	stw	r17,4(sp)
  807054:	24400504 	addi	r17,r4,20
  807058:	8421883a 	add	r16,r16,r16
  80705c:	8421883a 	add	r16,r16,r16
  807060:	8c21883a 	add	r16,r17,r16
  807064:	dc800215 	stw	r18,8(sp)
  807068:	84bfff17 	ldw	r18,-4(r16)
  80706c:	dd000415 	stw	r20,16(sp)
  807070:	dcc00315 	stw	r19,12(sp)
  807074:	9009883a 	mov	r4,r18
  807078:	2829883a 	mov	r20,r5
  80707c:	dfc00515 	stw	ra,20(sp)
  807080:	080680c0 	call	80680c <__hi0bits>
  807084:	00c00804 	movi	r3,32
  807088:	1887c83a 	sub	r3,r3,r2
  80708c:	a0c00015 	stw	r3,0(r20)
  807090:	00c00284 	movi	r3,10
  807094:	84ffff04 	addi	r19,r16,-4
  807098:	18801216 	blt	r3,r2,8070e4 <__b2d+0xa0>
  80709c:	014002c4 	movi	r5,11
  8070a0:	2889c83a 	sub	r4,r5,r2
  8070a4:	9106d83a 	srl	r3,r18,r4
  8070a8:	18cffc34 	orhi	r3,r3,16368
  8070ac:	8cc0282e 	bgeu	r17,r19,807150 <__b2d+0x10c>
  8070b0:	817ffe17 	ldw	r5,-8(r16)
  8070b4:	290ad83a 	srl	r5,r5,r4
  8070b8:	10800544 	addi	r2,r2,21
  8070bc:	9084983a 	sll	r2,r18,r2
  8070c0:	2884b03a 	or	r2,r5,r2
  8070c4:	dfc00517 	ldw	ra,20(sp)
  8070c8:	dd000417 	ldw	r20,16(sp)
  8070cc:	dcc00317 	ldw	r19,12(sp)
  8070d0:	dc800217 	ldw	r18,8(sp)
  8070d4:	dc400117 	ldw	r17,4(sp)
  8070d8:	dc000017 	ldw	r16,0(sp)
  8070dc:	dec00604 	addi	sp,sp,24
  8070e0:	f800283a 	ret
  8070e4:	113ffd44 	addi	r4,r2,-11
  8070e8:	8cc00f2e 	bgeu	r17,r19,807128 <__b2d+0xe4>
  8070ec:	81bffe04 	addi	r6,r16,-8
  8070f0:	817ffe17 	ldw	r5,-8(r16)
  8070f4:	20001326 	beq	r4,zero,807144 <__b2d+0x100>
  8070f8:	00c00ac4 	movi	r3,43
  8070fc:	1885c83a 	sub	r2,r3,r2
  807100:	2886d83a 	srl	r3,r5,r2
  807104:	9124983a 	sll	r18,r18,r4
  807108:	90e4b03a 	or	r18,r18,r3
  80710c:	90cffc34 	orhi	r3,r18,16368
  807110:	8980112e 	bgeu	r17,r6,807158 <__b2d+0x114>
  807114:	81bffd17 	ldw	r6,-12(r16)
  807118:	308cd83a 	srl	r6,r6,r2
  80711c:	2904983a 	sll	r2,r5,r4
  807120:	1184b03a 	or	r2,r2,r6
  807124:	003fe706 	br	8070c4 <__alt_data_end+0xff8070c4>
  807128:	20000526 	beq	r4,zero,807140 <__b2d+0xfc>
  80712c:	9124983a 	sll	r18,r18,r4
  807130:	000d883a 	mov	r6,zero
  807134:	000b883a 	mov	r5,zero
  807138:	90cffc34 	orhi	r3,r18,16368
  80713c:	003ff706 	br	80711c <__alt_data_end+0xff80711c>
  807140:	000b883a 	mov	r5,zero
  807144:	90cffc34 	orhi	r3,r18,16368
  807148:	2805883a 	mov	r2,r5
  80714c:	003fdd06 	br	8070c4 <__alt_data_end+0xff8070c4>
  807150:	000b883a 	mov	r5,zero
  807154:	003fd806 	br	8070b8 <__alt_data_end+0xff8070b8>
  807158:	000d883a 	mov	r6,zero
  80715c:	003fef06 	br	80711c <__alt_data_end+0xff80711c>

00807160 <__d2b>:
  807160:	defff704 	addi	sp,sp,-36
  807164:	dc000215 	stw	r16,8(sp)
  807168:	3021883a 	mov	r16,r6
  80716c:	dc400315 	stw	r17,12(sp)
  807170:	8022907a 	slli	r17,r16,1
  807174:	dd400715 	stw	r21,28(sp)
  807178:	282b883a 	mov	r21,r5
  80717c:	01400044 	movi	r5,1
  807180:	dd000615 	stw	r20,24(sp)
  807184:	dcc00515 	stw	r19,20(sp)
  807188:	dc800415 	stw	r18,16(sp)
  80718c:	dfc00815 	stw	ra,32(sp)
  807190:	3829883a 	mov	r20,r7
  807194:	dc800917 	ldw	r18,36(sp)
  807198:	8822d57a 	srli	r17,r17,21
  80719c:	08065180 	call	806518 <_Balloc>
  8071a0:	1027883a 	mov	r19,r2
  8071a4:	00800434 	movhi	r2,16
  8071a8:	10bfffc4 	addi	r2,r2,-1
  8071ac:	808c703a 	and	r6,r16,r2
  8071b0:	88000126 	beq	r17,zero,8071b8 <__d2b+0x58>
  8071b4:	31800434 	orhi	r6,r6,16
  8071b8:	d9800015 	stw	r6,0(sp)
  8071bc:	a8001f26 	beq	r21,zero,80723c <__d2b+0xdc>
  8071c0:	d9000104 	addi	r4,sp,4
  8071c4:	dd400115 	stw	r21,4(sp)
  8071c8:	08068740 	call	806874 <__lo0bits>
  8071cc:	d8c00017 	ldw	r3,0(sp)
  8071d0:	1000291e 	bne	r2,zero,807278 <__d2b+0x118>
  8071d4:	d9000117 	ldw	r4,4(sp)
  8071d8:	99000515 	stw	r4,20(r19)
  8071dc:	1820c03a 	cmpne	r16,r3,zero
  8071e0:	84000044 	addi	r16,r16,1
  8071e4:	98c00615 	stw	r3,24(r19)
  8071e8:	9c000415 	stw	r16,16(r19)
  8071ec:	88001b1e 	bne	r17,zero,80725c <__d2b+0xfc>
  8071f0:	800690ba 	slli	r3,r16,2
  8071f4:	10bef384 	addi	r2,r2,-1074
  8071f8:	a0800015 	stw	r2,0(r20)
  8071fc:	98c5883a 	add	r2,r19,r3
  807200:	11000417 	ldw	r4,16(r2)
  807204:	8020917a 	slli	r16,r16,5
  807208:	080680c0 	call	80680c <__hi0bits>
  80720c:	8085c83a 	sub	r2,r16,r2
  807210:	90800015 	stw	r2,0(r18)
  807214:	9805883a 	mov	r2,r19
  807218:	dfc00817 	ldw	ra,32(sp)
  80721c:	dd400717 	ldw	r21,28(sp)
  807220:	dd000617 	ldw	r20,24(sp)
  807224:	dcc00517 	ldw	r19,20(sp)
  807228:	dc800417 	ldw	r18,16(sp)
  80722c:	dc400317 	ldw	r17,12(sp)
  807230:	dc000217 	ldw	r16,8(sp)
  807234:	dec00904 	addi	sp,sp,36
  807238:	f800283a 	ret
  80723c:	d809883a 	mov	r4,sp
  807240:	08068740 	call	806874 <__lo0bits>
  807244:	d8c00017 	ldw	r3,0(sp)
  807248:	04000044 	movi	r16,1
  80724c:	9c000415 	stw	r16,16(r19)
  807250:	98c00515 	stw	r3,20(r19)
  807254:	10800804 	addi	r2,r2,32
  807258:	883fe526 	beq	r17,zero,8071f0 <__alt_data_end+0xff8071f0>
  80725c:	8c7ef344 	addi	r17,r17,-1075
  807260:	88a3883a 	add	r17,r17,r2
  807264:	00c00d44 	movi	r3,53
  807268:	a4400015 	stw	r17,0(r20)
  80726c:	1885c83a 	sub	r2,r3,r2
  807270:	90800015 	stw	r2,0(r18)
  807274:	003fe706 	br	807214 <__alt_data_end+0xff807214>
  807278:	01000804 	movi	r4,32
  80727c:	2089c83a 	sub	r4,r4,r2
  807280:	1908983a 	sll	r4,r3,r4
  807284:	d9400117 	ldw	r5,4(sp)
  807288:	1886d83a 	srl	r3,r3,r2
  80728c:	2148b03a 	or	r4,r4,r5
  807290:	99000515 	stw	r4,20(r19)
  807294:	d8c00015 	stw	r3,0(sp)
  807298:	003fd006 	br	8071dc <__alt_data_end+0xff8071dc>

0080729c <__ratio>:
  80729c:	defff904 	addi	sp,sp,-28
  8072a0:	dc400315 	stw	r17,12(sp)
  8072a4:	2823883a 	mov	r17,r5
  8072a8:	d9400104 	addi	r5,sp,4
  8072ac:	dfc00615 	stw	ra,24(sp)
  8072b0:	dcc00515 	stw	r19,20(sp)
  8072b4:	dc800415 	stw	r18,16(sp)
  8072b8:	2027883a 	mov	r19,r4
  8072bc:	dc000215 	stw	r16,8(sp)
  8072c0:	08070440 	call	807044 <__b2d>
  8072c4:	8809883a 	mov	r4,r17
  8072c8:	d80b883a 	mov	r5,sp
  8072cc:	1025883a 	mov	r18,r2
  8072d0:	1821883a 	mov	r16,r3
  8072d4:	08070440 	call	807044 <__b2d>
  8072d8:	8a400417 	ldw	r9,16(r17)
  8072dc:	9a000417 	ldw	r8,16(r19)
  8072e0:	100d883a 	mov	r6,r2
  8072e4:	d8800017 	ldw	r2,0(sp)
  8072e8:	4251c83a 	sub	r8,r8,r9
  8072ec:	4012917a 	slli	r9,r8,5
  8072f0:	da000117 	ldw	r8,4(sp)
  8072f4:	4091c83a 	sub	r8,r8,r2
  8072f8:	4251883a 	add	r8,r8,r9
  8072fc:	02000d0e 	bge	zero,r8,807334 <__ratio+0x98>
  807300:	4010953a 	slli	r8,r8,20
  807304:	4421883a 	add	r16,r8,r16
  807308:	9009883a 	mov	r4,r18
  80730c:	800b883a 	mov	r5,r16
  807310:	180f883a 	mov	r7,r3
  807314:	080af9c0 	call	80af9c <__divdf3>
  807318:	dfc00617 	ldw	ra,24(sp)
  80731c:	dcc00517 	ldw	r19,20(sp)
  807320:	dc800417 	ldw	r18,16(sp)
  807324:	dc400317 	ldw	r17,12(sp)
  807328:	dc000217 	ldw	r16,8(sp)
  80732c:	dec00704 	addi	sp,sp,28
  807330:	f800283a 	ret
  807334:	4010953a 	slli	r8,r8,20
  807338:	1a07c83a 	sub	r3,r3,r8
  80733c:	003ff206 	br	807308 <__alt_data_end+0xff807308>

00807340 <_mprec_log10>:
  807340:	defffe04 	addi	sp,sp,-8
  807344:	dc000015 	stw	r16,0(sp)
  807348:	dfc00115 	stw	ra,4(sp)
  80734c:	008005c4 	movi	r2,23
  807350:	2021883a 	mov	r16,r4
  807354:	11000d0e 	bge	r2,r4,80738c <_mprec_log10+0x4c>
  807358:	0005883a 	mov	r2,zero
  80735c:	00cffc34 	movhi	r3,16368
  807360:	843fffc4 	addi	r16,r16,-1
  807364:	1009883a 	mov	r4,r2
  807368:	180b883a 	mov	r5,r3
  80736c:	000d883a 	mov	r6,zero
  807370:	01d00934 	movhi	r7,16420
  807374:	080baac0 	call	80baac <__muldf3>
  807378:	803ff91e 	bne	r16,zero,807360 <__alt_data_end+0xff807360>
  80737c:	dfc00117 	ldw	ra,4(sp)
  807380:	dc000017 	ldw	r16,0(sp)
  807384:	dec00204 	addi	sp,sp,8
  807388:	f800283a 	ret
  80738c:	202090fa 	slli	r16,r4,3
  807390:	00802074 	movhi	r2,129
  807394:	10818c04 	addi	r2,r2,1584
  807398:	1421883a 	add	r16,r2,r16
  80739c:	80800017 	ldw	r2,0(r16)
  8073a0:	80c00117 	ldw	r3,4(r16)
  8073a4:	dfc00117 	ldw	ra,4(sp)
  8073a8:	dc000017 	ldw	r16,0(sp)
  8073ac:	dec00204 	addi	sp,sp,8
  8073b0:	f800283a 	ret

008073b4 <__copybits>:
  8073b4:	297fffc4 	addi	r5,r5,-1
  8073b8:	280fd17a 	srai	r7,r5,5
  8073bc:	30c00417 	ldw	r3,16(r6)
  8073c0:	30800504 	addi	r2,r6,20
  8073c4:	39c00044 	addi	r7,r7,1
  8073c8:	18c7883a 	add	r3,r3,r3
  8073cc:	39cf883a 	add	r7,r7,r7
  8073d0:	18c7883a 	add	r3,r3,r3
  8073d4:	39cf883a 	add	r7,r7,r7
  8073d8:	10c7883a 	add	r3,r2,r3
  8073dc:	21cf883a 	add	r7,r4,r7
  8073e0:	10c00d2e 	bgeu	r2,r3,807418 <__copybits+0x64>
  8073e4:	200b883a 	mov	r5,r4
  8073e8:	12000017 	ldw	r8,0(r2)
  8073ec:	29400104 	addi	r5,r5,4
  8073f0:	10800104 	addi	r2,r2,4
  8073f4:	2a3fff15 	stw	r8,-4(r5)
  8073f8:	10fffb36 	bltu	r2,r3,8073e8 <__alt_data_end+0xff8073e8>
  8073fc:	1985c83a 	sub	r2,r3,r6
  807400:	10bffac4 	addi	r2,r2,-21
  807404:	1004d0ba 	srli	r2,r2,2
  807408:	10800044 	addi	r2,r2,1
  80740c:	1085883a 	add	r2,r2,r2
  807410:	1085883a 	add	r2,r2,r2
  807414:	2089883a 	add	r4,r4,r2
  807418:	21c0032e 	bgeu	r4,r7,807428 <__copybits+0x74>
  80741c:	20000015 	stw	zero,0(r4)
  807420:	21000104 	addi	r4,r4,4
  807424:	21fffd36 	bltu	r4,r7,80741c <__alt_data_end+0xff80741c>
  807428:	f800283a 	ret

0080742c <__any_on>:
  80742c:	20c00417 	ldw	r3,16(r4)
  807430:	2805d17a 	srai	r2,r5,5
  807434:	21000504 	addi	r4,r4,20
  807438:	18800d0e 	bge	r3,r2,807470 <__any_on+0x44>
  80743c:	18c7883a 	add	r3,r3,r3
  807440:	18c7883a 	add	r3,r3,r3
  807444:	20c7883a 	add	r3,r4,r3
  807448:	20c0192e 	bgeu	r4,r3,8074b0 <__any_on+0x84>
  80744c:	18bfff17 	ldw	r2,-4(r3)
  807450:	18ffff04 	addi	r3,r3,-4
  807454:	1000041e 	bne	r2,zero,807468 <__any_on+0x3c>
  807458:	20c0142e 	bgeu	r4,r3,8074ac <__any_on+0x80>
  80745c:	18ffff04 	addi	r3,r3,-4
  807460:	19400017 	ldw	r5,0(r3)
  807464:	283ffc26 	beq	r5,zero,807458 <__alt_data_end+0xff807458>
  807468:	00800044 	movi	r2,1
  80746c:	f800283a 	ret
  807470:	10c00a0e 	bge	r2,r3,80749c <__any_on+0x70>
  807474:	1085883a 	add	r2,r2,r2
  807478:	1085883a 	add	r2,r2,r2
  80747c:	294007cc 	andi	r5,r5,31
  807480:	2087883a 	add	r3,r4,r2
  807484:	283ff026 	beq	r5,zero,807448 <__alt_data_end+0xff807448>
  807488:	19800017 	ldw	r6,0(r3)
  80748c:	3144d83a 	srl	r2,r6,r5
  807490:	114a983a 	sll	r5,r2,r5
  807494:	29bff41e 	bne	r5,r6,807468 <__alt_data_end+0xff807468>
  807498:	003feb06 	br	807448 <__alt_data_end+0xff807448>
  80749c:	1085883a 	add	r2,r2,r2
  8074a0:	1085883a 	add	r2,r2,r2
  8074a4:	2087883a 	add	r3,r4,r2
  8074a8:	003fe706 	br	807448 <__alt_data_end+0xff807448>
  8074ac:	f800283a 	ret
  8074b0:	0005883a 	mov	r2,zero
  8074b4:	f800283a 	ret

008074b8 <_realloc_r>:
  8074b8:	defff604 	addi	sp,sp,-40
  8074bc:	dd000415 	stw	r20,16(sp)
  8074c0:	dc400115 	stw	r17,4(sp)
  8074c4:	dfc00915 	stw	ra,36(sp)
  8074c8:	df000815 	stw	fp,32(sp)
  8074cc:	ddc00715 	stw	r23,28(sp)
  8074d0:	dd800615 	stw	r22,24(sp)
  8074d4:	dd400515 	stw	r21,20(sp)
  8074d8:	dcc00315 	stw	r19,12(sp)
  8074dc:	dc800215 	stw	r18,8(sp)
  8074e0:	dc000015 	stw	r16,0(sp)
  8074e4:	2829883a 	mov	r20,r5
  8074e8:	3023883a 	mov	r17,r6
  8074ec:	2800ad26 	beq	r5,zero,8077a4 <_realloc_r+0x2ec>
  8074f0:	2025883a 	mov	r18,r4
  8074f4:	080d4700 	call	80d470 <__malloc_lock>
  8074f8:	a0ffff17 	ldw	r3,-4(r20)
  8074fc:	043fff04 	movi	r16,-4
  807500:	890002c4 	addi	r4,r17,11
  807504:	01c00584 	movi	r7,22
  807508:	a57ffe04 	addi	r21,r20,-8
  80750c:	1c20703a 	and	r16,r3,r16
  807510:	39001d2e 	bgeu	r7,r4,807588 <_realloc_r+0xd0>
  807514:	05bffe04 	movi	r22,-8
  807518:	25ac703a 	and	r22,r4,r22
  80751c:	b00f883a 	mov	r7,r22
  807520:	b0006516 	blt	r22,zero,8076b8 <_realloc_r+0x200>
  807524:	b4406436 	bltu	r22,r17,8076b8 <_realloc_r+0x200>
  807528:	81c01a0e 	bge	r16,r7,807594 <_realloc_r+0xdc>
  80752c:	07002074 	movhi	fp,129
  807530:	e703ef04 	addi	fp,fp,4028
  807534:	e1400217 	ldw	r5,8(fp)
  807538:	ac11883a 	add	r8,r21,r16
  80753c:	2a006226 	beq	r5,r8,8076c8 <_realloc_r+0x210>
  807540:	41800117 	ldw	r6,4(r8)
  807544:	027fff84 	movi	r9,-2
  807548:	3252703a 	and	r9,r6,r9
  80754c:	4253883a 	add	r9,r8,r9
  807550:	49000117 	ldw	r4,4(r9)
  807554:	2100004c 	andi	r4,r4,1
  807558:	2000281e 	bne	r4,zero,8075fc <_realloc_r+0x144>
  80755c:	00bfff04 	movi	r2,-4
  807560:	3084703a 	and	r2,r6,r2
  807564:	1409883a 	add	r4,r2,r16
  807568:	21c05e16 	blt	r4,r7,8076e4 <_realloc_r+0x22c>
  80756c:	40800317 	ldw	r2,12(r8)
  807570:	41400217 	ldw	r5,8(r8)
  807574:	a023883a 	mov	r17,r20
  807578:	2021883a 	mov	r16,r4
  80757c:	28800315 	stw	r2,12(r5)
  807580:	11400215 	stw	r5,8(r2)
  807584:	00000406 	br	807598 <_realloc_r+0xe0>
  807588:	01c00404 	movi	r7,16
  80758c:	382d883a 	mov	r22,r7
  807590:	003fe406 	br	807524 <__alt_data_end+0xff807524>
  807594:	a023883a 	mov	r17,r20
  807598:	858fc83a 	sub	r7,r16,r22
  80759c:	008003c4 	movi	r2,15
  8075a0:	18c0004c 	andi	r3,r3,1
  8075a4:	11c07236 	bltu	r2,r7,807770 <_realloc_r+0x2b8>
  8075a8:	1c06b03a 	or	r3,r3,r16
  8075ac:	a8c00115 	stw	r3,4(r21)
  8075b0:	ac21883a 	add	r16,r21,r16
  8075b4:	80800117 	ldw	r2,4(r16)
  8075b8:	10800054 	ori	r2,r2,1
  8075bc:	80800115 	stw	r2,4(r16)
  8075c0:	9009883a 	mov	r4,r18
  8075c4:	080d4900 	call	80d490 <__malloc_unlock>
  8075c8:	8805883a 	mov	r2,r17
  8075cc:	dfc00917 	ldw	ra,36(sp)
  8075d0:	df000817 	ldw	fp,32(sp)
  8075d4:	ddc00717 	ldw	r23,28(sp)
  8075d8:	dd800617 	ldw	r22,24(sp)
  8075dc:	dd400517 	ldw	r21,20(sp)
  8075e0:	dd000417 	ldw	r20,16(sp)
  8075e4:	dcc00317 	ldw	r19,12(sp)
  8075e8:	dc800217 	ldw	r18,8(sp)
  8075ec:	dc400117 	ldw	r17,4(sp)
  8075f0:	dc000017 	ldw	r16,0(sp)
  8075f4:	dec00a04 	addi	sp,sp,40
  8075f8:	f800283a 	ret
  8075fc:	18c0004c 	andi	r3,r3,1
  807600:	1800081e 	bne	r3,zero,807624 <_realloc_r+0x16c>
  807604:	a4fffe17 	ldw	r19,-8(r20)
  807608:	00bfff04 	movi	r2,-4
  80760c:	ace7c83a 	sub	r19,r21,r19
  807610:	98c00117 	ldw	r3,4(r19)
  807614:	1886703a 	and	r3,r3,r2
  807618:	98000226 	beq	r19,zero,807624 <_realloc_r+0x16c>
  80761c:	1c2f883a 	add	r23,r3,r16
  807620:	b9c06d0e 	bge	r23,r7,8077d8 <_realloc_r+0x320>
  807624:	880b883a 	mov	r5,r17
  807628:	9009883a 	mov	r4,r18
  80762c:	08058d00 	call	8058d0 <_malloc_r>
  807630:	1023883a 	mov	r17,r2
  807634:	1000ef26 	beq	r2,zero,8079f4 <_realloc_r+0x53c>
  807638:	a0ffff17 	ldw	r3,-4(r20)
  80763c:	113ffe04 	addi	r4,r2,-8
  807640:	00bfff84 	movi	r2,-2
  807644:	1884703a 	and	r2,r3,r2
  807648:	a885883a 	add	r2,r21,r2
  80764c:	2080bf26 	beq	r4,r2,80794c <_realloc_r+0x494>
  807650:	81bfff04 	addi	r6,r16,-4
  807654:	00800904 	movi	r2,36
  807658:	11808936 	bltu	r2,r6,807880 <_realloc_r+0x3c8>
  80765c:	00c004c4 	movi	r3,19
  807660:	19806c2e 	bgeu	r3,r6,807814 <_realloc_r+0x35c>
  807664:	a0c00017 	ldw	r3,0(r20)
  807668:	88c00015 	stw	r3,0(r17)
  80766c:	a0c00117 	ldw	r3,4(r20)
  807670:	88c00115 	stw	r3,4(r17)
  807674:	00c006c4 	movi	r3,27
  807678:	1980ac36 	bltu	r3,r6,80792c <_realloc_r+0x474>
  80767c:	88800204 	addi	r2,r17,8
  807680:	a0c00204 	addi	r3,r20,8
  807684:	19000017 	ldw	r4,0(r3)
  807688:	11000015 	stw	r4,0(r2)
  80768c:	19000117 	ldw	r4,4(r3)
  807690:	11000115 	stw	r4,4(r2)
  807694:	18c00217 	ldw	r3,8(r3)
  807698:	10c00215 	stw	r3,8(r2)
  80769c:	a00b883a 	mov	r5,r20
  8076a0:	9009883a 	mov	r4,r18
  8076a4:	0804d000 	call	804d00 <_free_r>
  8076a8:	9009883a 	mov	r4,r18
  8076ac:	080d4900 	call	80d490 <__malloc_unlock>
  8076b0:	8805883a 	mov	r2,r17
  8076b4:	003fc506 	br	8075cc <__alt_data_end+0xff8075cc>
  8076b8:	00800304 	movi	r2,12
  8076bc:	90800015 	stw	r2,0(r18)
  8076c0:	0005883a 	mov	r2,zero
  8076c4:	003fc106 	br	8075cc <__alt_data_end+0xff8075cc>
  8076c8:	29800117 	ldw	r6,4(r5)
  8076cc:	00bfff04 	movi	r2,-4
  8076d0:	b1000404 	addi	r4,r22,16
  8076d4:	3084703a 	and	r2,r6,r2
  8076d8:	140d883a 	add	r6,r2,r16
  8076dc:	31005b0e 	bge	r6,r4,80784c <_realloc_r+0x394>
  8076e0:	2811883a 	mov	r8,r5
  8076e4:	18c0004c 	andi	r3,r3,1
  8076e8:	183fce1e 	bne	r3,zero,807624 <__alt_data_end+0xff807624>
  8076ec:	a4fffe17 	ldw	r19,-8(r20)
  8076f0:	00ffff04 	movi	r3,-4
  8076f4:	ace7c83a 	sub	r19,r21,r19
  8076f8:	99000117 	ldw	r4,4(r19)
  8076fc:	20c6703a 	and	r3,r4,r3
  807700:	403fc526 	beq	r8,zero,807618 <__alt_data_end+0xff807618>
  807704:	1c2f883a 	add	r23,r3,r16
  807708:	b8af883a 	add	r23,r23,r2
  80770c:	41406026 	beq	r8,r5,807890 <_realloc_r+0x3d8>
  807710:	b9ffc116 	blt	r23,r7,807618 <__alt_data_end+0xff807618>
  807714:	40c00217 	ldw	r3,8(r8)
  807718:	40800317 	ldw	r2,12(r8)
  80771c:	81bfff04 	addi	r6,r16,-4
  807720:	01000904 	movi	r4,36
  807724:	18800315 	stw	r2,12(r3)
  807728:	10c00215 	stw	r3,8(r2)
  80772c:	99400217 	ldw	r5,8(r19)
  807730:	98c00317 	ldw	r3,12(r19)
  807734:	9c400204 	addi	r17,r19,8
  807738:	28c00315 	stw	r3,12(r5)
  80773c:	19400215 	stw	r5,8(r3)
  807740:	21802d36 	bltu	r4,r6,8077f8 <_realloc_r+0x340>
  807744:	008004c4 	movi	r2,19
  807748:	1180352e 	bgeu	r2,r6,807820 <_realloc_r+0x368>
  80774c:	a0800017 	ldw	r2,0(r20)
  807750:	98800215 	stw	r2,8(r19)
  807754:	a0800117 	ldw	r2,4(r20)
  807758:	98800315 	stw	r2,12(r19)
  80775c:	008006c4 	movi	r2,27
  807760:	11808036 	bltu	r2,r6,807964 <_realloc_r+0x4ac>
  807764:	98c00404 	addi	r3,r19,16
  807768:	a5000204 	addi	r20,r20,8
  80776c:	00002d06 	br	807824 <_realloc_r+0x36c>
  807770:	1d86b03a 	or	r3,r3,r22
  807774:	ad8b883a 	add	r5,r21,r22
  807778:	a8c00115 	stw	r3,4(r21)
  80777c:	38800054 	ori	r2,r7,1
  807780:	28800115 	stw	r2,4(r5)
  807784:	29cf883a 	add	r7,r5,r7
  807788:	38800117 	ldw	r2,4(r7)
  80778c:	9009883a 	mov	r4,r18
  807790:	29400204 	addi	r5,r5,8
  807794:	10800054 	ori	r2,r2,1
  807798:	38800115 	stw	r2,4(r7)
  80779c:	0804d000 	call	804d00 <_free_r>
  8077a0:	003f8706 	br	8075c0 <__alt_data_end+0xff8075c0>
  8077a4:	300b883a 	mov	r5,r6
  8077a8:	dfc00917 	ldw	ra,36(sp)
  8077ac:	df000817 	ldw	fp,32(sp)
  8077b0:	ddc00717 	ldw	r23,28(sp)
  8077b4:	dd800617 	ldw	r22,24(sp)
  8077b8:	dd400517 	ldw	r21,20(sp)
  8077bc:	dd000417 	ldw	r20,16(sp)
  8077c0:	dcc00317 	ldw	r19,12(sp)
  8077c4:	dc800217 	ldw	r18,8(sp)
  8077c8:	dc400117 	ldw	r17,4(sp)
  8077cc:	dc000017 	ldw	r16,0(sp)
  8077d0:	dec00a04 	addi	sp,sp,40
  8077d4:	08058d01 	jmpi	8058d0 <_malloc_r>
  8077d8:	98800317 	ldw	r2,12(r19)
  8077dc:	98c00217 	ldw	r3,8(r19)
  8077e0:	81bfff04 	addi	r6,r16,-4
  8077e4:	01000904 	movi	r4,36
  8077e8:	18800315 	stw	r2,12(r3)
  8077ec:	10c00215 	stw	r3,8(r2)
  8077f0:	9c400204 	addi	r17,r19,8
  8077f4:	21bfd32e 	bgeu	r4,r6,807744 <__alt_data_end+0xff807744>
  8077f8:	8809883a 	mov	r4,r17
  8077fc:	a00b883a 	mov	r5,r20
  807800:	08062980 	call	806298 <memmove>
  807804:	98c00117 	ldw	r3,4(r19)
  807808:	b821883a 	mov	r16,r23
  80780c:	982b883a 	mov	r21,r19
  807810:	003f6106 	br	807598 <__alt_data_end+0xff807598>
  807814:	8805883a 	mov	r2,r17
  807818:	a007883a 	mov	r3,r20
  80781c:	003f9906 	br	807684 <__alt_data_end+0xff807684>
  807820:	8807883a 	mov	r3,r17
  807824:	a0800017 	ldw	r2,0(r20)
  807828:	b821883a 	mov	r16,r23
  80782c:	982b883a 	mov	r21,r19
  807830:	18800015 	stw	r2,0(r3)
  807834:	a0800117 	ldw	r2,4(r20)
  807838:	18800115 	stw	r2,4(r3)
  80783c:	a0800217 	ldw	r2,8(r20)
  807840:	18800215 	stw	r2,8(r3)
  807844:	98c00117 	ldw	r3,4(r19)
  807848:	003f5306 	br	807598 <__alt_data_end+0xff807598>
  80784c:	adab883a 	add	r21,r21,r22
  807850:	3585c83a 	sub	r2,r6,r22
  807854:	e5400215 	stw	r21,8(fp)
  807858:	10800054 	ori	r2,r2,1
  80785c:	a8800115 	stw	r2,4(r21)
  807860:	a0bfff17 	ldw	r2,-4(r20)
  807864:	9009883a 	mov	r4,r18
  807868:	1080004c 	andi	r2,r2,1
  80786c:	b0acb03a 	or	r22,r22,r2
  807870:	a5bfff15 	stw	r22,-4(r20)
  807874:	080d4900 	call	80d490 <__malloc_unlock>
  807878:	a005883a 	mov	r2,r20
  80787c:	003f5306 	br	8075cc <__alt_data_end+0xff8075cc>
  807880:	8809883a 	mov	r4,r17
  807884:	a00b883a 	mov	r5,r20
  807888:	08062980 	call	806298 <memmove>
  80788c:	003f8306 	br	80769c <__alt_data_end+0xff80769c>
  807890:	b0800404 	addi	r2,r22,16
  807894:	b8bf6016 	blt	r23,r2,807618 <__alt_data_end+0xff807618>
  807898:	98800317 	ldw	r2,12(r19)
  80789c:	98c00217 	ldw	r3,8(r19)
  8078a0:	81bfff04 	addi	r6,r16,-4
  8078a4:	01000904 	movi	r4,36
  8078a8:	18800315 	stw	r2,12(r3)
  8078ac:	10c00215 	stw	r3,8(r2)
  8078b0:	9c400204 	addi	r17,r19,8
  8078b4:	21804336 	bltu	r4,r6,8079c4 <_realloc_r+0x50c>
  8078b8:	008004c4 	movi	r2,19
  8078bc:	11803f2e 	bgeu	r2,r6,8079bc <_realloc_r+0x504>
  8078c0:	a0800017 	ldw	r2,0(r20)
  8078c4:	98800215 	stw	r2,8(r19)
  8078c8:	a0800117 	ldw	r2,4(r20)
  8078cc:	98800315 	stw	r2,12(r19)
  8078d0:	008006c4 	movi	r2,27
  8078d4:	11803f36 	bltu	r2,r6,8079d4 <_realloc_r+0x51c>
  8078d8:	98800404 	addi	r2,r19,16
  8078dc:	a5000204 	addi	r20,r20,8
  8078e0:	a0c00017 	ldw	r3,0(r20)
  8078e4:	10c00015 	stw	r3,0(r2)
  8078e8:	a0c00117 	ldw	r3,4(r20)
  8078ec:	10c00115 	stw	r3,4(r2)
  8078f0:	a0c00217 	ldw	r3,8(r20)
  8078f4:	10c00215 	stw	r3,8(r2)
  8078f8:	9d87883a 	add	r3,r19,r22
  8078fc:	bd85c83a 	sub	r2,r23,r22
  807900:	e0c00215 	stw	r3,8(fp)
  807904:	10800054 	ori	r2,r2,1
  807908:	18800115 	stw	r2,4(r3)
  80790c:	98800117 	ldw	r2,4(r19)
  807910:	9009883a 	mov	r4,r18
  807914:	1080004c 	andi	r2,r2,1
  807918:	b0acb03a 	or	r22,r22,r2
  80791c:	9d800115 	stw	r22,4(r19)
  807920:	080d4900 	call	80d490 <__malloc_unlock>
  807924:	8805883a 	mov	r2,r17
  807928:	003f2806 	br	8075cc <__alt_data_end+0xff8075cc>
  80792c:	a0c00217 	ldw	r3,8(r20)
  807930:	88c00215 	stw	r3,8(r17)
  807934:	a0c00317 	ldw	r3,12(r20)
  807938:	88c00315 	stw	r3,12(r17)
  80793c:	30801126 	beq	r6,r2,807984 <_realloc_r+0x4cc>
  807940:	88800404 	addi	r2,r17,16
  807944:	a0c00404 	addi	r3,r20,16
  807948:	003f4e06 	br	807684 <__alt_data_end+0xff807684>
  80794c:	893fff17 	ldw	r4,-4(r17)
  807950:	00bfff04 	movi	r2,-4
  807954:	a023883a 	mov	r17,r20
  807958:	2084703a 	and	r2,r4,r2
  80795c:	80a1883a 	add	r16,r16,r2
  807960:	003f0d06 	br	807598 <__alt_data_end+0xff807598>
  807964:	a0800217 	ldw	r2,8(r20)
  807968:	98800415 	stw	r2,16(r19)
  80796c:	a0800317 	ldw	r2,12(r20)
  807970:	98800515 	stw	r2,20(r19)
  807974:	31000a26 	beq	r6,r4,8079a0 <_realloc_r+0x4e8>
  807978:	98c00604 	addi	r3,r19,24
  80797c:	a5000404 	addi	r20,r20,16
  807980:	003fa806 	br	807824 <__alt_data_end+0xff807824>
  807984:	a1000417 	ldw	r4,16(r20)
  807988:	88800604 	addi	r2,r17,24
  80798c:	a0c00604 	addi	r3,r20,24
  807990:	89000415 	stw	r4,16(r17)
  807994:	a1000517 	ldw	r4,20(r20)
  807998:	89000515 	stw	r4,20(r17)
  80799c:	003f3906 	br	807684 <__alt_data_end+0xff807684>
  8079a0:	a0800417 	ldw	r2,16(r20)
  8079a4:	a5000604 	addi	r20,r20,24
  8079a8:	98c00804 	addi	r3,r19,32
  8079ac:	98800615 	stw	r2,24(r19)
  8079b0:	a0bfff17 	ldw	r2,-4(r20)
  8079b4:	98800715 	stw	r2,28(r19)
  8079b8:	003f9a06 	br	807824 <__alt_data_end+0xff807824>
  8079bc:	8805883a 	mov	r2,r17
  8079c0:	003fc706 	br	8078e0 <__alt_data_end+0xff8078e0>
  8079c4:	8809883a 	mov	r4,r17
  8079c8:	a00b883a 	mov	r5,r20
  8079cc:	08062980 	call	806298 <memmove>
  8079d0:	003fc906 	br	8078f8 <__alt_data_end+0xff8078f8>
  8079d4:	a0800217 	ldw	r2,8(r20)
  8079d8:	98800415 	stw	r2,16(r19)
  8079dc:	a0800317 	ldw	r2,12(r20)
  8079e0:	98800515 	stw	r2,20(r19)
  8079e4:	31000726 	beq	r6,r4,807a04 <_realloc_r+0x54c>
  8079e8:	98800604 	addi	r2,r19,24
  8079ec:	a5000404 	addi	r20,r20,16
  8079f0:	003fbb06 	br	8078e0 <__alt_data_end+0xff8078e0>
  8079f4:	9009883a 	mov	r4,r18
  8079f8:	080d4900 	call	80d490 <__malloc_unlock>
  8079fc:	0005883a 	mov	r2,zero
  807a00:	003ef206 	br	8075cc <__alt_data_end+0xff8075cc>
  807a04:	a0c00417 	ldw	r3,16(r20)
  807a08:	a5000604 	addi	r20,r20,24
  807a0c:	98800804 	addi	r2,r19,32
  807a10:	98c00615 	stw	r3,24(r19)
  807a14:	a0ffff17 	ldw	r3,-4(r20)
  807a18:	98c00715 	stw	r3,28(r19)
  807a1c:	003fb006 	br	8078e0 <__alt_data_end+0xff8078e0>

00807a20 <__fpclassifyd>:
  807a20:	00a00034 	movhi	r2,32768
  807a24:	10bfffc4 	addi	r2,r2,-1
  807a28:	2884703a 	and	r2,r5,r2
  807a2c:	10000726 	beq	r2,zero,807a4c <__fpclassifyd+0x2c>
  807a30:	00fffc34 	movhi	r3,65520
  807a34:	019ff834 	movhi	r6,32736
  807a38:	28c7883a 	add	r3,r5,r3
  807a3c:	31bfffc4 	addi	r6,r6,-1
  807a40:	30c00536 	bltu	r6,r3,807a58 <__fpclassifyd+0x38>
  807a44:	00800104 	movi	r2,4
  807a48:	f800283a 	ret
  807a4c:	2000021e 	bne	r4,zero,807a58 <__fpclassifyd+0x38>
  807a50:	00800084 	movi	r2,2
  807a54:	f800283a 	ret
  807a58:	00dffc34 	movhi	r3,32752
  807a5c:	019ff834 	movhi	r6,32736
  807a60:	28cb883a 	add	r5,r5,r3
  807a64:	31bfffc4 	addi	r6,r6,-1
  807a68:	317ff62e 	bgeu	r6,r5,807a44 <__alt_data_end+0xff807a44>
  807a6c:	01400434 	movhi	r5,16
  807a70:	297fffc4 	addi	r5,r5,-1
  807a74:	28800236 	bltu	r5,r2,807a80 <__fpclassifyd+0x60>
  807a78:	008000c4 	movi	r2,3
  807a7c:	f800283a 	ret
  807a80:	10c00226 	beq	r2,r3,807a8c <__fpclassifyd+0x6c>
  807a84:	0005883a 	mov	r2,zero
  807a88:	f800283a 	ret
  807a8c:	2005003a 	cmpeq	r2,r4,zero
  807a90:	f800283a 	ret

00807a94 <_sbrk_r>:
  807a94:	defffd04 	addi	sp,sp,-12
  807a98:	dc000015 	stw	r16,0(sp)
  807a9c:	04002074 	movhi	r16,129
  807aa0:	dc400115 	stw	r17,4(sp)
  807aa4:	84095404 	addi	r16,r16,9552
  807aa8:	2023883a 	mov	r17,r4
  807aac:	2809883a 	mov	r4,r5
  807ab0:	dfc00215 	stw	ra,8(sp)
  807ab4:	80000015 	stw	zero,0(r16)
  807ab8:	080d65c0 	call	80d65c <sbrk>
  807abc:	00ffffc4 	movi	r3,-1
  807ac0:	10c00526 	beq	r2,r3,807ad8 <_sbrk_r+0x44>
  807ac4:	dfc00217 	ldw	ra,8(sp)
  807ac8:	dc400117 	ldw	r17,4(sp)
  807acc:	dc000017 	ldw	r16,0(sp)
  807ad0:	dec00304 	addi	sp,sp,12
  807ad4:	f800283a 	ret
  807ad8:	80c00017 	ldw	r3,0(r16)
  807adc:	183ff926 	beq	r3,zero,807ac4 <__alt_data_end+0xff807ac4>
  807ae0:	88c00015 	stw	r3,0(r17)
  807ae4:	003ff706 	br	807ac4 <__alt_data_end+0xff807ac4>

00807ae8 <__sread>:
  807ae8:	defffe04 	addi	sp,sp,-8
  807aec:	dc000015 	stw	r16,0(sp)
  807af0:	2821883a 	mov	r16,r5
  807af4:	2940038f 	ldh	r5,14(r5)
  807af8:	dfc00115 	stw	ra,4(sp)
  807afc:	08096ec0 	call	8096ec <_read_r>
  807b00:	10000716 	blt	r2,zero,807b20 <__sread+0x38>
  807b04:	80c01417 	ldw	r3,80(r16)
  807b08:	1887883a 	add	r3,r3,r2
  807b0c:	80c01415 	stw	r3,80(r16)
  807b10:	dfc00117 	ldw	ra,4(sp)
  807b14:	dc000017 	ldw	r16,0(sp)
  807b18:	dec00204 	addi	sp,sp,8
  807b1c:	f800283a 	ret
  807b20:	80c0030b 	ldhu	r3,12(r16)
  807b24:	18fbffcc 	andi	r3,r3,61439
  807b28:	80c0030d 	sth	r3,12(r16)
  807b2c:	dfc00117 	ldw	ra,4(sp)
  807b30:	dc000017 	ldw	r16,0(sp)
  807b34:	dec00204 	addi	sp,sp,8
  807b38:	f800283a 	ret

00807b3c <__seofread>:
  807b3c:	0005883a 	mov	r2,zero
  807b40:	f800283a 	ret

00807b44 <__swrite>:
  807b44:	2880030b 	ldhu	r2,12(r5)
  807b48:	defffb04 	addi	sp,sp,-20
  807b4c:	dcc00315 	stw	r19,12(sp)
  807b50:	dc800215 	stw	r18,8(sp)
  807b54:	dc400115 	stw	r17,4(sp)
  807b58:	dc000015 	stw	r16,0(sp)
  807b5c:	dfc00415 	stw	ra,16(sp)
  807b60:	10c0400c 	andi	r3,r2,256
  807b64:	2821883a 	mov	r16,r5
  807b68:	2027883a 	mov	r19,r4
  807b6c:	3025883a 	mov	r18,r6
  807b70:	3823883a 	mov	r17,r7
  807b74:	18000526 	beq	r3,zero,807b8c <__swrite+0x48>
  807b78:	2940038f 	ldh	r5,14(r5)
  807b7c:	000d883a 	mov	r6,zero
  807b80:	01c00084 	movi	r7,2
  807b84:	08096900 	call	809690 <_lseek_r>
  807b88:	8080030b 	ldhu	r2,12(r16)
  807b8c:	8140038f 	ldh	r5,14(r16)
  807b90:	10bbffcc 	andi	r2,r2,61439
  807b94:	9809883a 	mov	r4,r19
  807b98:	900d883a 	mov	r6,r18
  807b9c:	880f883a 	mov	r7,r17
  807ba0:	8080030d 	sth	r2,12(r16)
  807ba4:	dfc00417 	ldw	ra,16(sp)
  807ba8:	dcc00317 	ldw	r19,12(sp)
  807bac:	dc800217 	ldw	r18,8(sp)
  807bb0:	dc400117 	ldw	r17,4(sp)
  807bb4:	dc000017 	ldw	r16,0(sp)
  807bb8:	dec00504 	addi	sp,sp,20
  807bbc:	080918c1 	jmpi	80918c <_write_r>

00807bc0 <__sseek>:
  807bc0:	defffe04 	addi	sp,sp,-8
  807bc4:	dc000015 	stw	r16,0(sp)
  807bc8:	2821883a 	mov	r16,r5
  807bcc:	2940038f 	ldh	r5,14(r5)
  807bd0:	dfc00115 	stw	ra,4(sp)
  807bd4:	08096900 	call	809690 <_lseek_r>
  807bd8:	00ffffc4 	movi	r3,-1
  807bdc:	10c00826 	beq	r2,r3,807c00 <__sseek+0x40>
  807be0:	80c0030b 	ldhu	r3,12(r16)
  807be4:	80801415 	stw	r2,80(r16)
  807be8:	18c40014 	ori	r3,r3,4096
  807bec:	80c0030d 	sth	r3,12(r16)
  807bf0:	dfc00117 	ldw	ra,4(sp)
  807bf4:	dc000017 	ldw	r16,0(sp)
  807bf8:	dec00204 	addi	sp,sp,8
  807bfc:	f800283a 	ret
  807c00:	80c0030b 	ldhu	r3,12(r16)
  807c04:	18fbffcc 	andi	r3,r3,61439
  807c08:	80c0030d 	sth	r3,12(r16)
  807c0c:	dfc00117 	ldw	ra,4(sp)
  807c10:	dc000017 	ldw	r16,0(sp)
  807c14:	dec00204 	addi	sp,sp,8
  807c18:	f800283a 	ret

00807c1c <__sclose>:
  807c1c:	2940038f 	ldh	r5,14(r5)
  807c20:	08091e81 	jmpi	8091e8 <_close_r>

00807c24 <strcmp>:
  807c24:	2144b03a 	or	r2,r4,r5
  807c28:	108000cc 	andi	r2,r2,3
  807c2c:	1000171e 	bne	r2,zero,807c8c <strcmp+0x68>
  807c30:	20800017 	ldw	r2,0(r4)
  807c34:	28c00017 	ldw	r3,0(r5)
  807c38:	10c0141e 	bne	r2,r3,807c8c <strcmp+0x68>
  807c3c:	027fbff4 	movhi	r9,65279
  807c40:	4a7fbfc4 	addi	r9,r9,-257
  807c44:	0086303a 	nor	r3,zero,r2
  807c48:	02202074 	movhi	r8,32897
  807c4c:	1245883a 	add	r2,r2,r9
  807c50:	42202004 	addi	r8,r8,-32640
  807c54:	10c4703a 	and	r2,r2,r3
  807c58:	1204703a 	and	r2,r2,r8
  807c5c:	10000226 	beq	r2,zero,807c68 <strcmp+0x44>
  807c60:	00001706 	br	807cc0 <strcmp+0x9c>
  807c64:	1000161e 	bne	r2,zero,807cc0 <strcmp+0x9c>
  807c68:	21000104 	addi	r4,r4,4
  807c6c:	20c00017 	ldw	r3,0(r4)
  807c70:	29400104 	addi	r5,r5,4
  807c74:	29800017 	ldw	r6,0(r5)
  807c78:	1a4f883a 	add	r7,r3,r9
  807c7c:	00c4303a 	nor	r2,zero,r3
  807c80:	3884703a 	and	r2,r7,r2
  807c84:	1204703a 	and	r2,r2,r8
  807c88:	19bff626 	beq	r3,r6,807c64 <__alt_data_end+0xff807c64>
  807c8c:	20800007 	ldb	r2,0(r4)
  807c90:	1000051e 	bne	r2,zero,807ca8 <strcmp+0x84>
  807c94:	00000606 	br	807cb0 <strcmp+0x8c>
  807c98:	21000044 	addi	r4,r4,1
  807c9c:	20800007 	ldb	r2,0(r4)
  807ca0:	29400044 	addi	r5,r5,1
  807ca4:	10000226 	beq	r2,zero,807cb0 <strcmp+0x8c>
  807ca8:	28c00007 	ldb	r3,0(r5)
  807cac:	10fffa26 	beq	r2,r3,807c98 <__alt_data_end+0xff807c98>
  807cb0:	20800003 	ldbu	r2,0(r4)
  807cb4:	28c00003 	ldbu	r3,0(r5)
  807cb8:	10c5c83a 	sub	r2,r2,r3
  807cbc:	f800283a 	ret
  807cc0:	0005883a 	mov	r2,zero
  807cc4:	f800283a 	ret

00807cc8 <__sprint_r.part.0>:
  807cc8:	28801917 	ldw	r2,100(r5)
  807ccc:	defff604 	addi	sp,sp,-40
  807cd0:	dd400515 	stw	r21,20(sp)
  807cd4:	dcc00315 	stw	r19,12(sp)
  807cd8:	dfc00915 	stw	ra,36(sp)
  807cdc:	df000815 	stw	fp,32(sp)
  807ce0:	ddc00715 	stw	r23,28(sp)
  807ce4:	dd800615 	stw	r22,24(sp)
  807ce8:	dd000415 	stw	r20,16(sp)
  807cec:	dc800215 	stw	r18,8(sp)
  807cf0:	dc400115 	stw	r17,4(sp)
  807cf4:	dc000015 	stw	r16,0(sp)
  807cf8:	1088000c 	andi	r2,r2,8192
  807cfc:	2827883a 	mov	r19,r5
  807d00:	302b883a 	mov	r21,r6
  807d04:	10002d26 	beq	r2,zero,807dbc <__sprint_r.part.0+0xf4>
  807d08:	30800217 	ldw	r2,8(r6)
  807d0c:	35800017 	ldw	r22,0(r6)
  807d10:	10002826 	beq	r2,zero,807db4 <__sprint_r.part.0+0xec>
  807d14:	2029883a 	mov	r20,r4
  807d18:	b5c00104 	addi	r23,r22,4
  807d1c:	04bfffc4 	movi	r18,-1
  807d20:	bc400017 	ldw	r17,0(r23)
  807d24:	b4000017 	ldw	r16,0(r22)
  807d28:	0039883a 	mov	fp,zero
  807d2c:	8822d0ba 	srli	r17,r17,2
  807d30:	04400316 	blt	zero,r17,807d40 <__sprint_r.part.0+0x78>
  807d34:	00001806 	br	807d98 <__sprint_r.part.0+0xd0>
  807d38:	84000104 	addi	r16,r16,4
  807d3c:	8f001526 	beq	r17,fp,807d94 <__sprint_r.part.0+0xcc>
  807d40:	81400017 	ldw	r5,0(r16)
  807d44:	a009883a 	mov	r4,r20
  807d48:	980d883a 	mov	r6,r19
  807d4c:	08094040 	call	809404 <_fputwc_r>
  807d50:	e7000044 	addi	fp,fp,1
  807d54:	14bff81e 	bne	r2,r18,807d38 <__alt_data_end+0xff807d38>
  807d58:	9005883a 	mov	r2,r18
  807d5c:	a8000215 	stw	zero,8(r21)
  807d60:	a8000115 	stw	zero,4(r21)
  807d64:	dfc00917 	ldw	ra,36(sp)
  807d68:	df000817 	ldw	fp,32(sp)
  807d6c:	ddc00717 	ldw	r23,28(sp)
  807d70:	dd800617 	ldw	r22,24(sp)
  807d74:	dd400517 	ldw	r21,20(sp)
  807d78:	dd000417 	ldw	r20,16(sp)
  807d7c:	dcc00317 	ldw	r19,12(sp)
  807d80:	dc800217 	ldw	r18,8(sp)
  807d84:	dc400117 	ldw	r17,4(sp)
  807d88:	dc000017 	ldw	r16,0(sp)
  807d8c:	dec00a04 	addi	sp,sp,40
  807d90:	f800283a 	ret
  807d94:	a8800217 	ldw	r2,8(r21)
  807d98:	8c63883a 	add	r17,r17,r17
  807d9c:	8c63883a 	add	r17,r17,r17
  807da0:	1445c83a 	sub	r2,r2,r17
  807da4:	a8800215 	stw	r2,8(r21)
  807da8:	b5800204 	addi	r22,r22,8
  807dac:	bdc00204 	addi	r23,r23,8
  807db0:	103fdb1e 	bne	r2,zero,807d20 <__alt_data_end+0xff807d20>
  807db4:	0005883a 	mov	r2,zero
  807db8:	003fe806 	br	807d5c <__alt_data_end+0xff807d5c>
  807dbc:	0804ff00 	call	804ff0 <__sfvwrite_r>
  807dc0:	003fe606 	br	807d5c <__alt_data_end+0xff807d5c>

00807dc4 <__sprint_r>:
  807dc4:	30c00217 	ldw	r3,8(r6)
  807dc8:	18000126 	beq	r3,zero,807dd0 <__sprint_r+0xc>
  807dcc:	0807cc81 	jmpi	807cc8 <__sprint_r.part.0>
  807dd0:	30000115 	stw	zero,4(r6)
  807dd4:	0005883a 	mov	r2,zero
  807dd8:	f800283a 	ret

00807ddc <___vfiprintf_internal_r>:
  807ddc:	deffca04 	addi	sp,sp,-216
  807de0:	dd803215 	stw	r22,200(sp)
  807de4:	dd403115 	stw	r21,196(sp)
  807de8:	dfc03515 	stw	ra,212(sp)
  807dec:	df003415 	stw	fp,208(sp)
  807df0:	ddc03315 	stw	r23,204(sp)
  807df4:	dd003015 	stw	r20,192(sp)
  807df8:	dcc02f15 	stw	r19,188(sp)
  807dfc:	dc802e15 	stw	r18,184(sp)
  807e00:	dc402d15 	stw	r17,180(sp)
  807e04:	dc002c15 	stw	r16,176(sp)
  807e08:	d9002015 	stw	r4,128(sp)
  807e0c:	d9c02215 	stw	r7,136(sp)
  807e10:	282b883a 	mov	r21,r5
  807e14:	302d883a 	mov	r22,r6
  807e18:	20000226 	beq	r4,zero,807e24 <___vfiprintf_internal_r+0x48>
  807e1c:	20800e17 	ldw	r2,56(r4)
  807e20:	1001b126 	beq	r2,zero,8084e8 <___vfiprintf_internal_r+0x70c>
  807e24:	a880030b 	ldhu	r2,12(r21)
  807e28:	10c8000c 	andi	r3,r2,8192
  807e2c:	1800061e 	bne	r3,zero,807e48 <___vfiprintf_internal_r+0x6c>
  807e30:	a9001917 	ldw	r4,100(r21)
  807e34:	00f7ffc4 	movi	r3,-8193
  807e38:	10880014 	ori	r2,r2,8192
  807e3c:	20c6703a 	and	r3,r4,r3
  807e40:	a880030d 	sth	r2,12(r21)
  807e44:	a8c01915 	stw	r3,100(r21)
  807e48:	10c0020c 	andi	r3,r2,8
  807e4c:	18018926 	beq	r3,zero,808474 <___vfiprintf_internal_r+0x698>
  807e50:	a8c00417 	ldw	r3,16(r21)
  807e54:	18018726 	beq	r3,zero,808474 <___vfiprintf_internal_r+0x698>
  807e58:	1080068c 	andi	r2,r2,26
  807e5c:	00c00284 	movi	r3,10
  807e60:	10c18c26 	beq	r2,r3,808494 <___vfiprintf_internal_r+0x6b8>
  807e64:	d8801a04 	addi	r2,sp,104
  807e68:	d8c019c4 	addi	r3,sp,103
  807e6c:	07002074 	movhi	fp,129
  807e70:	05c02074 	movhi	r23,129
  807e74:	10c9c83a 	sub	r4,r2,r3
  807e78:	e701c204 	addi	fp,fp,1800
  807e7c:	bdc1be04 	addi	r23,r23,1784
  807e80:	d8801e15 	stw	r2,120(sp)
  807e84:	d8c01f15 	stw	r3,124(sp)
  807e88:	dec01a15 	stw	sp,104(sp)
  807e8c:	d8001c15 	stw	zero,112(sp)
  807e90:	d8001b15 	stw	zero,108(sp)
  807e94:	d8002615 	stw	zero,152(sp)
  807e98:	d8002315 	stw	zero,140(sp)
  807e9c:	d9002715 	stw	r4,156(sp)
  807ea0:	d811883a 	mov	r8,sp
  807ea4:	dd402115 	stw	r21,132(sp)
  807ea8:	b021883a 	mov	r16,r22
  807eac:	80800007 	ldb	r2,0(r16)
  807eb0:	10037226 	beq	r2,zero,808c7c <___vfiprintf_internal_r+0xea0>
  807eb4:	01000944 	movi	r4,37
  807eb8:	11037026 	beq	r2,r4,808c7c <___vfiprintf_internal_r+0xea0>
  807ebc:	8005883a 	mov	r2,r16
  807ec0:	00000106 	br	807ec8 <___vfiprintf_internal_r+0xec>
  807ec4:	19000326 	beq	r3,r4,807ed4 <___vfiprintf_internal_r+0xf8>
  807ec8:	10800044 	addi	r2,r2,1
  807ecc:	10c00007 	ldb	r3,0(r2)
  807ed0:	183ffc1e 	bne	r3,zero,807ec4 <__alt_data_end+0xff807ec4>
  807ed4:	1425c83a 	sub	r18,r2,r16
  807ed8:	1023883a 	mov	r17,r2
  807edc:	90001026 	beq	r18,zero,807f20 <___vfiprintf_internal_r+0x144>
  807ee0:	d8c01c17 	ldw	r3,112(sp)
  807ee4:	d8801b17 	ldw	r2,108(sp)
  807ee8:	44000015 	stw	r16,0(r8)
  807eec:	90c7883a 	add	r3,r18,r3
  807ef0:	10800044 	addi	r2,r2,1
  807ef4:	44800115 	stw	r18,4(r8)
  807ef8:	d8c01c15 	stw	r3,112(sp)
  807efc:	d8801b15 	stw	r2,108(sp)
  807f00:	010001c4 	movi	r4,7
  807f04:	2080750e 	bge	r4,r2,8080dc <___vfiprintf_internal_r+0x300>
  807f08:	18036f1e 	bne	r3,zero,808cc8 <___vfiprintf_internal_r+0xeec>
  807f0c:	d8802317 	ldw	r2,140(sp)
  807f10:	d8001b15 	stw	zero,108(sp)
  807f14:	d811883a 	mov	r8,sp
  807f18:	1485883a 	add	r2,r2,r18
  807f1c:	d8802315 	stw	r2,140(sp)
  807f20:	88800007 	ldb	r2,0(r17)
  807f24:	10041026 	beq	r2,zero,808f68 <___vfiprintf_internal_r+0x118c>
  807f28:	88c00047 	ldb	r3,1(r17)
  807f2c:	88800044 	addi	r2,r17,1
  807f30:	d8001d85 	stb	zero,118(sp)
  807f34:	000f883a 	mov	r7,zero
  807f38:	027fffc4 	movi	r9,-1
  807f3c:	0025883a 	mov	r18,zero
  807f40:	002b883a 	mov	r21,zero
  807f44:	01401604 	movi	r5,88
  807f48:	01800244 	movi	r6,9
  807f4c:	03400a84 	movi	r13,42
  807f50:	03001b04 	movi	r12,108
  807f54:	14000044 	addi	r16,r2,1
  807f58:	18bff804 	addi	r2,r3,-32
  807f5c:	28825536 	bltu	r5,r2,8088b4 <___vfiprintf_internal_r+0xad8>
  807f60:	100490ba 	slli	r2,r2,2
  807f64:	01002034 	movhi	r4,128
  807f68:	211fde04 	addi	r4,r4,32632
  807f6c:	1105883a 	add	r2,r2,r4
  807f70:	10800017 	ldw	r2,0(r2)
  807f74:	1000683a 	jmp	r2
  807f78:	00808678 	rdprs	r2,zero,537
  807f7c:	008088b4 	movhi	r2,546
  807f80:	008088b4 	movhi	r2,546
  807f84:	00808698 	cmpnei	r2,zero,538
  807f88:	008088b4 	movhi	r2,546
  807f8c:	008088b4 	movhi	r2,546
  807f90:	008088b4 	movhi	r2,546
  807f94:	008088b4 	movhi	r2,546
  807f98:	008088b4 	movhi	r2,546
  807f9c:	008088b4 	movhi	r2,546
  807fa0:	008086a8 	cmpgeui	r2,zero,538
  807fa4:	008086c8 	cmpgei	r2,zero,539
  807fa8:	008088b4 	movhi	r2,546
  807fac:	008084f0 	cmpltui	r2,zero,531
  807fb0:	008085dc 	xori	r2,zero,535
  807fb4:	008088b4 	movhi	r2,546
  807fb8:	0080855c 	xori	r2,zero,533
  807fbc:	0080856c 	andhi	r2,zero,533
  807fc0:	0080856c 	andhi	r2,zero,533
  807fc4:	0080856c 	andhi	r2,zero,533
  807fc8:	0080856c 	andhi	r2,zero,533
  807fcc:	0080856c 	andhi	r2,zero,533
  807fd0:	0080856c 	andhi	r2,zero,533
  807fd4:	0080856c 	andhi	r2,zero,533
  807fd8:	0080856c 	andhi	r2,zero,533
  807fdc:	0080856c 	andhi	r2,zero,533
  807fe0:	008088b4 	movhi	r2,546
  807fe4:	008088b4 	movhi	r2,546
  807fe8:	008088b4 	movhi	r2,546
  807fec:	008088b4 	movhi	r2,546
  807ff0:	008088b4 	movhi	r2,546
  807ff4:	008088b4 	movhi	r2,546
  807ff8:	008088b4 	movhi	r2,546
  807ffc:	008088b4 	movhi	r2,546
  808000:	008088b4 	movhi	r2,546
  808004:	008088b4 	movhi	r2,546
  808008:	00808598 	cmpnei	r2,zero,534
  80800c:	008088b4 	movhi	r2,546
  808010:	008088b4 	movhi	r2,546
  808014:	008088b4 	movhi	r2,546
  808018:	008088b4 	movhi	r2,546
  80801c:	008088b4 	movhi	r2,546
  808020:	008088b4 	movhi	r2,546
  808024:	008088b4 	movhi	r2,546
  808028:	008088b4 	movhi	r2,546
  80802c:	008088b4 	movhi	r2,546
  808030:	008088b4 	movhi	r2,546
  808034:	00808124 	muli	r2,zero,516
  808038:	008088b4 	movhi	r2,546
  80803c:	008088b4 	movhi	r2,546
  808040:	008088b4 	movhi	r2,546
  808044:	008088b4 	movhi	r2,546
  808048:	008088b4 	movhi	r2,546
  80804c:	008080f0 	cmpltui	r2,zero,515
  808050:	008088b4 	movhi	r2,546
  808054:	008088b4 	movhi	r2,546
  808058:	00808738 	rdprs	r2,zero,540
  80805c:	008088b4 	movhi	r2,546
  808060:	008088b4 	movhi	r2,546
  808064:	008088b4 	movhi	r2,546
  808068:	008088b4 	movhi	r2,546
  80806c:	008088b4 	movhi	r2,546
  808070:	008088b4 	movhi	r2,546
  808074:	008088b4 	movhi	r2,546
  808078:	008088b4 	movhi	r2,546
  80807c:	008088b4 	movhi	r2,546
  808080:	008088b4 	movhi	r2,546
  808084:	008086d8 	cmpnei	r2,zero,539
  808088:	00808704 	movi	r2,540
  80808c:	008088b4 	movhi	r2,546
  808090:	008088b4 	movhi	r2,546
  808094:	008088b4 	movhi	r2,546
  808098:	008087e0 	cmpeqi	r2,zero,543
  80809c:	00808704 	movi	r2,540
  8080a0:	008088b4 	movhi	r2,546
  8080a4:	008088b4 	movhi	r2,546
  8080a8:	008087f0 	cmpltui	r2,zero,543
  8080ac:	008088b4 	movhi	r2,546
  8080b0:	0080861c 	xori	r2,zero,536
  8080b4:	00808128 	cmpgeui	r2,zero,516
  8080b8:	00808804 	movi	r2,544
  8080bc:	00808844 	movi	r2,545
  8080c0:	008088b4 	movhi	r2,546
  8080c4:	0080878c 	andi	r2,zero,542
  8080c8:	008088b4 	movhi	r2,546
  8080cc:	008080f4 	movhi	r2,515
  8080d0:	008088b4 	movhi	r2,546
  8080d4:	008088b4 	movhi	r2,546
  8080d8:	00808854 	movui	r2,545
  8080dc:	42000204 	addi	r8,r8,8
  8080e0:	d8802317 	ldw	r2,140(sp)
  8080e4:	1485883a 	add	r2,r2,r18
  8080e8:	d8802315 	stw	r2,140(sp)
  8080ec:	003f8c06 	br	807f20 <__alt_data_end+0xff807f20>
  8080f0:	ad400414 	ori	r21,r21,16
  8080f4:	a880080c 	andi	r2,r21,32
  8080f8:	1001e61e 	bne	r2,zero,808894 <___vfiprintf_internal_r+0xab8>
  8080fc:	a880040c 	andi	r2,r21,16
  808100:	10034726 	beq	r2,zero,808e20 <___vfiprintf_internal_r+0x1044>
  808104:	d8802217 	ldw	r2,136(sp)
  808108:	001b883a 	mov	r13,zero
  80810c:	15800017 	ldw	r22,0(r2)
  808110:	10800104 	addi	r2,r2,4
  808114:	d8802215 	stw	r2,136(sp)
  808118:	b009883a 	mov	r4,r22
  80811c:	00800044 	movi	r2,1
  808120:	00000c06 	br	808154 <___vfiprintf_internal_r+0x378>
  808124:	ad400414 	ori	r21,r21,16
  808128:	a880080c 	andi	r2,r21,32
  80812c:	1001491e 	bne	r2,zero,808654 <___vfiprintf_internal_r+0x878>
  808130:	a880040c 	andi	r2,r21,16
  808134:	10032d26 	beq	r2,zero,808dec <___vfiprintf_internal_r+0x1010>
  808138:	d9002217 	ldw	r4,136(sp)
  80813c:	001b883a 	mov	r13,zero
  808140:	0005883a 	mov	r2,zero
  808144:	25800017 	ldw	r22,0(r4)
  808148:	21000104 	addi	r4,r4,4
  80814c:	d9002215 	stw	r4,136(sp)
  808150:	b009883a 	mov	r4,r22
  808154:	d8001d85 	stb	zero,118(sp)
  808158:	4827883a 	mov	r19,r9
  80815c:	001d883a 	mov	r14,zero
  808160:	48000216 	blt	r9,zero,80816c <___vfiprintf_internal_r+0x390>
  808164:	00ffdfc4 	movi	r3,-129
  808168:	a8ea703a 	and	r21,r21,r3
  80816c:	2002071e 	bne	r4,zero,80898c <___vfiprintf_internal_r+0xbb0>
  808170:	4802ad26 	beq	r9,zero,808c28 <___vfiprintf_internal_r+0xe4c>
  808174:	10803fcc 	andi	r2,r2,255
  808178:	00c00044 	movi	r3,1
  80817c:	10c22b26 	beq	r2,r3,808a2c <___vfiprintf_internal_r+0xc50>
  808180:	00c00084 	movi	r3,2
  808184:	dd001a04 	addi	r20,sp,104
  808188:	10c0dd1e 	bne	r2,r3,808500 <___vfiprintf_internal_r+0x724>
  80818c:	d9002617 	ldw	r4,152(sp)
  808190:	b08003cc 	andi	r2,r22,15
  808194:	6806973a 	slli	r3,r13,28
  808198:	2085883a 	add	r2,r4,r2
  80819c:	b02cd13a 	srli	r22,r22,4
  8081a0:	10800003 	ldbu	r2,0(r2)
  8081a4:	681ad13a 	srli	r13,r13,4
  8081a8:	a53fffc4 	addi	r20,r20,-1
  8081ac:	1dacb03a 	or	r22,r3,r22
  8081b0:	a0800005 	stb	r2,0(r20)
  8081b4:	b344b03a 	or	r2,r22,r13
  8081b8:	103ff51e 	bne	r2,zero,808190 <__alt_data_end+0xff808190>
  8081bc:	d9001e17 	ldw	r4,120(sp)
  8081c0:	2527c83a 	sub	r19,r4,r20
  8081c4:	9823883a 	mov	r17,r19
  8081c8:	9a40010e 	bge	r19,r9,8081d0 <___vfiprintf_internal_r+0x3f4>
  8081cc:	4823883a 	mov	r17,r9
  8081d0:	73803fcc 	andi	r14,r14,255
  8081d4:	7380201c 	xori	r14,r14,128
  8081d8:	73bfe004 	addi	r14,r14,-128
  8081dc:	70000126 	beq	r14,zero,8081e4 <___vfiprintf_internal_r+0x408>
  8081e0:	8c400044 	addi	r17,r17,1
  8081e4:	ab40008c 	andi	r13,r21,2
  8081e8:	68000126 	beq	r13,zero,8081f0 <___vfiprintf_internal_r+0x414>
  8081ec:	8c400084 	addi	r17,r17,2
  8081f0:	ad80210c 	andi	r22,r21,132
  8081f4:	b001c51e 	bne	r22,zero,80890c <___vfiprintf_internal_r+0xb30>
  8081f8:	9447c83a 	sub	r3,r18,r17
  8081fc:	00c1c30e 	bge	zero,r3,80890c <___vfiprintf_internal_r+0xb30>
  808200:	01c00404 	movi	r7,16
  808204:	d8801c17 	ldw	r2,112(sp)
  808208:	38c37b0e 	bge	r7,r3,808ff8 <___vfiprintf_internal_r+0x121c>
  80820c:	01002074 	movhi	r4,129
  808210:	2101c204 	addi	r4,r4,1800
  808214:	dc002915 	stw	r16,164(sp)
  808218:	d9801b17 	ldw	r6,108(sp)
  80821c:	d9002415 	stw	r4,144(sp)
  808220:	03c001c4 	movi	r15,7
  808224:	da402515 	stw	r9,148(sp)
  808228:	db402815 	stw	r13,160(sp)
  80822c:	1821883a 	mov	r16,r3
  808230:	00000506 	br	808248 <___vfiprintf_internal_r+0x46c>
  808234:	31400084 	addi	r5,r6,2
  808238:	42000204 	addi	r8,r8,8
  80823c:	200d883a 	mov	r6,r4
  808240:	843ffc04 	addi	r16,r16,-16
  808244:	3c000d0e 	bge	r7,r16,80827c <___vfiprintf_internal_r+0x4a0>
  808248:	10800404 	addi	r2,r2,16
  80824c:	31000044 	addi	r4,r6,1
  808250:	47000015 	stw	fp,0(r8)
  808254:	41c00115 	stw	r7,4(r8)
  808258:	d8801c15 	stw	r2,112(sp)
  80825c:	d9001b15 	stw	r4,108(sp)
  808260:	793ff40e 	bge	r15,r4,808234 <__alt_data_end+0xff808234>
  808264:	10019b1e 	bne	r2,zero,8088d4 <___vfiprintf_internal_r+0xaf8>
  808268:	843ffc04 	addi	r16,r16,-16
  80826c:	000d883a 	mov	r6,zero
  808270:	01400044 	movi	r5,1
  808274:	d811883a 	mov	r8,sp
  808278:	3c3ff316 	blt	r7,r16,808248 <__alt_data_end+0xff808248>
  80827c:	8007883a 	mov	r3,r16
  808280:	da402517 	ldw	r9,148(sp)
  808284:	db402817 	ldw	r13,160(sp)
  808288:	dc002917 	ldw	r16,164(sp)
  80828c:	d9002417 	ldw	r4,144(sp)
  808290:	1885883a 	add	r2,r3,r2
  808294:	40c00115 	stw	r3,4(r8)
  808298:	41000015 	stw	r4,0(r8)
  80829c:	d8801c15 	stw	r2,112(sp)
  8082a0:	d9401b15 	stw	r5,108(sp)
  8082a4:	00c001c4 	movi	r3,7
  8082a8:	19426a16 	blt	r3,r5,808c54 <___vfiprintf_internal_r+0xe78>
  8082ac:	d8c01d87 	ldb	r3,118(sp)
  8082b0:	42000204 	addi	r8,r8,8
  8082b4:	29000044 	addi	r4,r5,1
  8082b8:	1801991e 	bne	r3,zero,808920 <___vfiprintf_internal_r+0xb44>
  8082bc:	68000c26 	beq	r13,zero,8082f0 <___vfiprintf_internal_r+0x514>
  8082c0:	d8c01d04 	addi	r3,sp,116
  8082c4:	10800084 	addi	r2,r2,2
  8082c8:	40c00015 	stw	r3,0(r8)
  8082cc:	00c00084 	movi	r3,2
  8082d0:	40c00115 	stw	r3,4(r8)
  8082d4:	d8801c15 	stw	r2,112(sp)
  8082d8:	d9001b15 	stw	r4,108(sp)
  8082dc:	00c001c4 	movi	r3,7
  8082e0:	19024c16 	blt	r3,r4,808c14 <___vfiprintf_internal_r+0xe38>
  8082e4:	200b883a 	mov	r5,r4
  8082e8:	42000204 	addi	r8,r8,8
  8082ec:	21000044 	addi	r4,r4,1
  8082f0:	00c02004 	movi	r3,128
  8082f4:	b0c20126 	beq	r22,r3,808afc <___vfiprintf_internal_r+0xd20>
  8082f8:	4cedc83a 	sub	r22,r9,r19
  8082fc:	0580230e 	bge	zero,r22,80838c <___vfiprintf_internal_r+0x5b0>
  808300:	01c00404 	movi	r7,16
  808304:	3d83140e 	bge	r7,r22,808f58 <___vfiprintf_internal_r+0x117c>
  808308:	01002074 	movhi	r4,129
  80830c:	2101be04 	addi	r4,r4,1784
  808310:	d9002415 	stw	r4,144(sp)
  808314:	034001c4 	movi	r13,7
  808318:	00000506 	br	808330 <___vfiprintf_internal_r+0x554>
  80831c:	29000084 	addi	r4,r5,2
  808320:	42000204 	addi	r8,r8,8
  808324:	180b883a 	mov	r5,r3
  808328:	b5bffc04 	addi	r22,r22,-16
  80832c:	3d800d0e 	bge	r7,r22,808364 <___vfiprintf_internal_r+0x588>
  808330:	10800404 	addi	r2,r2,16
  808334:	28c00044 	addi	r3,r5,1
  808338:	45c00015 	stw	r23,0(r8)
  80833c:	41c00115 	stw	r7,4(r8)
  808340:	d8801c15 	stw	r2,112(sp)
  808344:	d8c01b15 	stw	r3,108(sp)
  808348:	68fff40e 	bge	r13,r3,80831c <__alt_data_end+0xff80831c>
  80834c:	1001811e 	bne	r2,zero,808954 <___vfiprintf_internal_r+0xb78>
  808350:	b5bffc04 	addi	r22,r22,-16
  808354:	01000044 	movi	r4,1
  808358:	000b883a 	mov	r5,zero
  80835c:	d811883a 	mov	r8,sp
  808360:	3dbff316 	blt	r7,r22,808330 <__alt_data_end+0xff808330>
  808364:	d8c02417 	ldw	r3,144(sp)
  808368:	1585883a 	add	r2,r2,r22
  80836c:	45800115 	stw	r22,4(r8)
  808370:	40c00015 	stw	r3,0(r8)
  808374:	d8801c15 	stw	r2,112(sp)
  808378:	d9001b15 	stw	r4,108(sp)
  80837c:	00c001c4 	movi	r3,7
  808380:	1901d016 	blt	r3,r4,808ac4 <___vfiprintf_internal_r+0xce8>
  808384:	42000204 	addi	r8,r8,8
  808388:	21000044 	addi	r4,r4,1
  80838c:	14c5883a 	add	r2,r2,r19
  808390:	45000015 	stw	r20,0(r8)
  808394:	44c00115 	stw	r19,4(r8)
  808398:	d8801c15 	stw	r2,112(sp)
  80839c:	d9001b15 	stw	r4,108(sp)
  8083a0:	00c001c4 	movi	r3,7
  8083a4:	1901cf0e 	bge	r3,r4,808ae4 <___vfiprintf_internal_r+0xd08>
  8083a8:	1002361e 	bne	r2,zero,808c84 <___vfiprintf_internal_r+0xea8>
  8083ac:	d8001b15 	stw	zero,108(sp)
  8083b0:	aac0010c 	andi	r11,r21,4
  8083b4:	58002826 	beq	r11,zero,808458 <___vfiprintf_internal_r+0x67c>
  8083b8:	9467c83a 	sub	r19,r18,r17
  8083bc:	d811883a 	mov	r8,sp
  8083c0:	04c3340e 	bge	zero,r19,809094 <___vfiprintf_internal_r+0x12b8>
  8083c4:	01c00404 	movi	r7,16
  8083c8:	3cc31b0e 	bge	r7,r19,809038 <___vfiprintf_internal_r+0x125c>
  8083cc:	00c02074 	movhi	r3,129
  8083d0:	18c1c204 	addi	r3,r3,1800
  8083d4:	d9001b17 	ldw	r4,108(sp)
  8083d8:	d8c02415 	stw	r3,144(sp)
  8083dc:	382b883a 	mov	r21,r7
  8083e0:	050001c4 	movi	r20,7
  8083e4:	dd802017 	ldw	r22,128(sp)
  8083e8:	00000506 	br	808400 <___vfiprintf_internal_r+0x624>
  8083ec:	21400084 	addi	r5,r4,2
  8083f0:	42000204 	addi	r8,r8,8
  8083f4:	1809883a 	mov	r4,r3
  8083f8:	9cfffc04 	addi	r19,r19,-16
  8083fc:	acc00d0e 	bge	r21,r19,808434 <___vfiprintf_internal_r+0x658>
  808400:	10800404 	addi	r2,r2,16
  808404:	20c00044 	addi	r3,r4,1
  808408:	47000015 	stw	fp,0(r8)
  80840c:	45400115 	stw	r21,4(r8)
  808410:	d8801c15 	stw	r2,112(sp)
  808414:	d8c01b15 	stw	r3,108(sp)
  808418:	a0fff40e 	bge	r20,r3,8083ec <__alt_data_end+0xff8083ec>
  80841c:	10019f1e 	bne	r2,zero,808a9c <___vfiprintf_internal_r+0xcc0>
  808420:	9cfffc04 	addi	r19,r19,-16
  808424:	01400044 	movi	r5,1
  808428:	0009883a 	mov	r4,zero
  80842c:	d811883a 	mov	r8,sp
  808430:	acfff316 	blt	r21,r19,808400 <__alt_data_end+0xff808400>
  808434:	d8c02417 	ldw	r3,144(sp)
  808438:	14c5883a 	add	r2,r2,r19
  80843c:	44c00115 	stw	r19,4(r8)
  808440:	40c00015 	stw	r3,0(r8)
  808444:	d8801c15 	stw	r2,112(sp)
  808448:	d9401b15 	stw	r5,108(sp)
  80844c:	00c001c4 	movi	r3,7
  808450:	1941810e 	bge	r3,r5,808a58 <___vfiprintf_internal_r+0xc7c>
  808454:	10017a1e 	bne	r2,zero,808a40 <___vfiprintf_internal_r+0xc64>
  808458:	8c82a416 	blt	r17,r18,808eec <___vfiprintf_internal_r+0x1110>
  80845c:	d9002317 	ldw	r4,140(sp)
  808460:	2449883a 	add	r4,r4,r17
  808464:	d9002315 	stw	r4,140(sp)
  808468:	d8001b15 	stw	zero,108(sp)
  80846c:	d811883a 	mov	r8,sp
  808470:	003e8e06 	br	807eac <__alt_data_end+0xff807eac>
  808474:	d9002017 	ldw	r4,128(sp)
  808478:	a80b883a 	mov	r5,r21
  80847c:	0802b2c0 	call	802b2c <__swsetup_r>
  808480:	10000c1e 	bne	r2,zero,8084b4 <___vfiprintf_internal_r+0x6d8>
  808484:	a880030b 	ldhu	r2,12(r21)
  808488:	00c00284 	movi	r3,10
  80848c:	1080068c 	andi	r2,r2,26
  808490:	10fe741e 	bne	r2,r3,807e64 <__alt_data_end+0xff807e64>
  808494:	a880038f 	ldh	r2,14(r21)
  808498:	103e7216 	blt	r2,zero,807e64 <__alt_data_end+0xff807e64>
  80849c:	d9002017 	ldw	r4,128(sp)
  8084a0:	d9c02217 	ldw	r7,136(sp)
  8084a4:	a80b883a 	mov	r5,r21
  8084a8:	b00d883a 	mov	r6,r22
  8084ac:	08090d00 	call	8090d0 <__sbprintf>
  8084b0:	00000106 	br	8084b8 <___vfiprintf_internal_r+0x6dc>
  8084b4:	00bfffc4 	movi	r2,-1
  8084b8:	dfc03517 	ldw	ra,212(sp)
  8084bc:	df003417 	ldw	fp,208(sp)
  8084c0:	ddc03317 	ldw	r23,204(sp)
  8084c4:	dd803217 	ldw	r22,200(sp)
  8084c8:	dd403117 	ldw	r21,196(sp)
  8084cc:	dd003017 	ldw	r20,192(sp)
  8084d0:	dcc02f17 	ldw	r19,188(sp)
  8084d4:	dc802e17 	ldw	r18,184(sp)
  8084d8:	dc402d17 	ldw	r17,180(sp)
  8084dc:	dc002c17 	ldw	r16,176(sp)
  8084e0:	dec03604 	addi	sp,sp,216
  8084e4:	f800283a 	ret
  8084e8:	0804b8c0 	call	804b8c <__sinit>
  8084ec:	003e4d06 	br	807e24 <__alt_data_end+0xff807e24>
  8084f0:	8005883a 	mov	r2,r16
  8084f4:	ad400114 	ori	r21,r21,4
  8084f8:	80c00007 	ldb	r3,0(r16)
  8084fc:	003e9506 	br	807f54 <__alt_data_end+0xff807f54>
  808500:	b006d0fa 	srli	r3,r22,3
  808504:	6808977a 	slli	r4,r13,29
  808508:	681ad0fa 	srli	r13,r13,3
  80850c:	b58001cc 	andi	r22,r22,7
  808510:	b0800c04 	addi	r2,r22,48
  808514:	a53fffc4 	addi	r20,r20,-1
  808518:	20ecb03a 	or	r22,r4,r3
  80851c:	a0800005 	stb	r2,0(r20)
  808520:	b346b03a 	or	r3,r22,r13
  808524:	183ff61e 	bne	r3,zero,808500 <__alt_data_end+0xff808500>
  808528:	a8c0004c 	andi	r3,r21,1
  80852c:	a009883a 	mov	r4,r20
  808530:	18013b26 	beq	r3,zero,808a20 <___vfiprintf_internal_r+0xc44>
  808534:	10803fcc 	andi	r2,r2,255
  808538:	1080201c 	xori	r2,r2,128
  80853c:	10bfe004 	addi	r2,r2,-128
  808540:	00c00c04 	movi	r3,48
  808544:	10ff1d26 	beq	r2,r3,8081bc <__alt_data_end+0xff8081bc>
  808548:	d8801e17 	ldw	r2,120(sp)
  80854c:	a53fffc4 	addi	r20,r20,-1
  808550:	20ffffc5 	stb	r3,-1(r4)
  808554:	1527c83a 	sub	r19,r2,r20
  808558:	003f1a06 	br	8081c4 <__alt_data_end+0xff8081c4>
  80855c:	ad402014 	ori	r21,r21,128
  808560:	8005883a 	mov	r2,r16
  808564:	80c00007 	ldb	r3,0(r16)
  808568:	003e7a06 	br	807f54 <__alt_data_end+0xff807f54>
  80856c:	8005883a 	mov	r2,r16
  808570:	0025883a 	mov	r18,zero
  808574:	193ff404 	addi	r4,r3,-48
  808578:	10c00007 	ldb	r3,0(r2)
  80857c:	948002a4 	muli	r18,r18,10
  808580:	84000044 	addi	r16,r16,1
  808584:	8005883a 	mov	r2,r16
  808588:	9125883a 	add	r18,r18,r4
  80858c:	193ff404 	addi	r4,r3,-48
  808590:	313ff92e 	bgeu	r6,r4,808578 <__alt_data_end+0xff808578>
  808594:	003e7006 	br	807f58 <__alt_data_end+0xff807f58>
  808598:	ad400414 	ori	r21,r21,16
  80859c:	d9c01d85 	stb	r7,118(sp)
  8085a0:	a880080c 	andi	r2,r21,32
  8085a4:	d8c02217 	ldw	r3,136(sp)
  8085a8:	10005a26 	beq	r2,zero,808714 <___vfiprintf_internal_r+0x938>
  8085ac:	d9002217 	ldw	r4,136(sp)
  8085b0:	18800117 	ldw	r2,4(r3)
  8085b4:	1d800017 	ldw	r22,0(r3)
  8085b8:	21000204 	addi	r4,r4,8
  8085bc:	d9002215 	stw	r4,136(sp)
  8085c0:	101b883a 	mov	r13,r2
  8085c4:	1001f416 	blt	r2,zero,808d98 <___vfiprintf_internal_r+0xfbc>
  8085c8:	db801d83 	ldbu	r14,118(sp)
  8085cc:	4827883a 	mov	r19,r9
  8085d0:	00800044 	movi	r2,1
  8085d4:	b348b03a 	or	r4,r22,r13
  8085d8:	003ee106 	br	808160 <__alt_data_end+0xff808160>
  8085dc:	80c00007 	ldb	r3,0(r16)
  8085e0:	80800044 	addi	r2,r16,1
  8085e4:	1b42a326 	beq	r3,r13,809074 <___vfiprintf_internal_r+0x1298>
  8085e8:	193ff404 	addi	r4,r3,-48
  8085ec:	1021883a 	mov	r16,r2
  8085f0:	0013883a 	mov	r9,zero
  8085f4:	313e5836 	bltu	r6,r4,807f58 <__alt_data_end+0xff807f58>
  8085f8:	80c00007 	ldb	r3,0(r16)
  8085fc:	4a4002a4 	muli	r9,r9,10
  808600:	84000044 	addi	r16,r16,1
  808604:	2253883a 	add	r9,r4,r9
  808608:	193ff404 	addi	r4,r3,-48
  80860c:	313ffa2e 	bgeu	r6,r4,8085f8 <__alt_data_end+0xff8085f8>
  808610:	483e510e 	bge	r9,zero,807f58 <__alt_data_end+0xff807f58>
  808614:	027fffc4 	movi	r9,-1
  808618:	003e4f06 	br	807f58 <__alt_data_end+0xff807f58>
  80861c:	d9c01d85 	stb	r7,118(sp)
  808620:	a880080c 	andi	r2,r21,32
  808624:	10020826 	beq	r2,zero,808e48 <___vfiprintf_internal_r+0x106c>
  808628:	d8c02217 	ldw	r3,136(sp)
  80862c:	d9002317 	ldw	r4,140(sp)
  808630:	18800017 	ldw	r2,0(r3)
  808634:	2007d7fa 	srai	r3,r4,31
  808638:	d9002217 	ldw	r4,136(sp)
  80863c:	10c00115 	stw	r3,4(r2)
  808640:	21000104 	addi	r4,r4,4
  808644:	d9002215 	stw	r4,136(sp)
  808648:	d9002317 	ldw	r4,140(sp)
  80864c:	11000015 	stw	r4,0(r2)
  808650:	003e1606 	br	807eac <__alt_data_end+0xff807eac>
  808654:	d8802217 	ldw	r2,136(sp)
  808658:	d8c02217 	ldw	r3,136(sp)
  80865c:	15800017 	ldw	r22,0(r2)
  808660:	13400117 	ldw	r13,4(r2)
  808664:	18c00204 	addi	r3,r3,8
  808668:	0005883a 	mov	r2,zero
  80866c:	d8c02215 	stw	r3,136(sp)
  808670:	b348b03a 	or	r4,r22,r13
  808674:	003eb706 	br	808154 <__alt_data_end+0xff808154>
  808678:	38803fcc 	andi	r2,r7,255
  80867c:	1080201c 	xori	r2,r2,128
  808680:	10bfe004 	addi	r2,r2,-128
  808684:	1001e31e 	bne	r2,zero,808e14 <___vfiprintf_internal_r+0x1038>
  808688:	8005883a 	mov	r2,r16
  80868c:	01c00804 	movi	r7,32
  808690:	80c00007 	ldb	r3,0(r16)
  808694:	003e2f06 	br	807f54 <__alt_data_end+0xff807f54>
  808698:	ad400054 	ori	r21,r21,1
  80869c:	8005883a 	mov	r2,r16
  8086a0:	80c00007 	ldb	r3,0(r16)
  8086a4:	003e2b06 	br	807f54 <__alt_data_end+0xff807f54>
  8086a8:	d8c02217 	ldw	r3,136(sp)
  8086ac:	1c800017 	ldw	r18,0(r3)
  8086b0:	18c00104 	addi	r3,r3,4
  8086b4:	90023816 	blt	r18,zero,808f98 <___vfiprintf_internal_r+0x11bc>
  8086b8:	d8c02215 	stw	r3,136(sp)
  8086bc:	8005883a 	mov	r2,r16
  8086c0:	80c00007 	ldb	r3,0(r16)
  8086c4:	003e2306 	br	807f54 <__alt_data_end+0xff807f54>
  8086c8:	8005883a 	mov	r2,r16
  8086cc:	01c00ac4 	movi	r7,43
  8086d0:	80c00007 	ldb	r3,0(r16)
  8086d4:	003e1f06 	br	807f54 <__alt_data_end+0xff807f54>
  8086d8:	d8c02217 	ldw	r3,136(sp)
  8086dc:	04400044 	movi	r17,1
  8086e0:	d8001d85 	stb	zero,118(sp)
  8086e4:	18800017 	ldw	r2,0(r3)
  8086e8:	18c00104 	addi	r3,r3,4
  8086ec:	d8c02215 	stw	r3,136(sp)
  8086f0:	d8801005 	stb	r2,64(sp)
  8086f4:	8827883a 	mov	r19,r17
  8086f8:	dd001004 	addi	r20,sp,64
  8086fc:	0013883a 	mov	r9,zero
  808700:	003eb806 	br	8081e4 <__alt_data_end+0xff8081e4>
  808704:	d9c01d85 	stb	r7,118(sp)
  808708:	a880080c 	andi	r2,r21,32
  80870c:	d8c02217 	ldw	r3,136(sp)
  808710:	103fa61e 	bne	r2,zero,8085ac <__alt_data_end+0xff8085ac>
  808714:	a880040c 	andi	r2,r21,16
  808718:	1001dd26 	beq	r2,zero,808e90 <___vfiprintf_internal_r+0x10b4>
  80871c:	1d800017 	ldw	r22,0(r3)
  808720:	d8802217 	ldw	r2,136(sp)
  808724:	b01bd7fa 	srai	r13,r22,31
  808728:	10800104 	addi	r2,r2,4
  80872c:	d8802215 	stw	r2,136(sp)
  808730:	6805883a 	mov	r2,r13
  808734:	003fa306 	br	8085c4 <__alt_data_end+0xff8085c4>
  808738:	00802074 	movhi	r2,129
  80873c:	10815804 	addi	r2,r2,1376
  808740:	d8802615 	stw	r2,152(sp)
  808744:	d9c01d85 	stb	r7,118(sp)
  808748:	a880080c 	andi	r2,r21,32
  80874c:	10004726 	beq	r2,zero,80886c <___vfiprintf_internal_r+0xa90>
  808750:	d9002217 	ldw	r4,136(sp)
  808754:	25800017 	ldw	r22,0(r4)
  808758:	23400117 	ldw	r13,4(r4)
  80875c:	21000204 	addi	r4,r4,8
  808760:	d9002215 	stw	r4,136(sp)
  808764:	a880004c 	andi	r2,r21,1
  808768:	10014e26 	beq	r2,zero,808ca4 <___vfiprintf_internal_r+0xec8>
  80876c:	b348b03a 	or	r4,r22,r13
  808770:	20019c26 	beq	r4,zero,808de4 <___vfiprintf_internal_r+0x1008>
  808774:	00800c04 	movi	r2,48
  808778:	d8801d05 	stb	r2,116(sp)
  80877c:	d8c01d45 	stb	r3,117(sp)
  808780:	ad400094 	ori	r21,r21,2
  808784:	00800084 	movi	r2,2
  808788:	003e7206 	br	808154 <__alt_data_end+0xff808154>
  80878c:	d8c02217 	ldw	r3,136(sp)
  808790:	d8001d85 	stb	zero,118(sp)
  808794:	1d000017 	ldw	r20,0(r3)
  808798:	1d800104 	addi	r22,r3,4
  80879c:	a0021c26 	beq	r20,zero,809010 <___vfiprintf_internal_r+0x1234>
  8087a0:	a009883a 	mov	r4,r20
  8087a4:	48020016 	blt	r9,zero,808fa8 <___vfiprintf_internal_r+0x11cc>
  8087a8:	480d883a 	mov	r6,r9
  8087ac:	000b883a 	mov	r5,zero
  8087b0:	da002a15 	stw	r8,168(sp)
  8087b4:	da402b15 	stw	r9,172(sp)
  8087b8:	08060780 	call	806078 <memchr>
  8087bc:	da002a17 	ldw	r8,168(sp)
  8087c0:	da402b17 	ldw	r9,172(sp)
  8087c4:	10022226 	beq	r2,zero,809050 <___vfiprintf_internal_r+0x1274>
  8087c8:	1527c83a 	sub	r19,r2,r20
  8087cc:	4cc1c916 	blt	r9,r19,808ef4 <___vfiprintf_internal_r+0x1118>
  8087d0:	db801d83 	ldbu	r14,118(sp)
  8087d4:	dd802215 	stw	r22,136(sp)
  8087d8:	0013883a 	mov	r9,zero
  8087dc:	003e7906 	br	8081c4 <__alt_data_end+0xff8081c4>
  8087e0:	ad401014 	ori	r21,r21,64
  8087e4:	8005883a 	mov	r2,r16
  8087e8:	80c00007 	ldb	r3,0(r16)
  8087ec:	003dd906 	br	807f54 <__alt_data_end+0xff807f54>
  8087f0:	80c00007 	ldb	r3,0(r16)
  8087f4:	8005883a 	mov	r2,r16
  8087f8:	1b01e326 	beq	r3,r12,808f88 <___vfiprintf_internal_r+0x11ac>
  8087fc:	ad400414 	ori	r21,r21,16
  808800:	003dd406 	br	807f54 <__alt_data_end+0xff807f54>
  808804:	d9002217 	ldw	r4,136(sp)
  808808:	00800c04 	movi	r2,48
  80880c:	d8801d05 	stb	r2,116(sp)
  808810:	25800017 	ldw	r22,0(r4)
  808814:	00801e04 	movi	r2,120
  808818:	d8801d45 	stb	r2,117(sp)
  80881c:	00802074 	movhi	r2,129
  808820:	21000104 	addi	r4,r4,4
  808824:	10815d04 	addi	r2,r2,1396
  808828:	d9002215 	stw	r4,136(sp)
  80882c:	d8802615 	stw	r2,152(sp)
  808830:	001b883a 	mov	r13,zero
  808834:	ad400094 	ori	r21,r21,2
  808838:	00800084 	movi	r2,2
  80883c:	b009883a 	mov	r4,r22
  808840:	003e4406 	br	808154 <__alt_data_end+0xff808154>
  808844:	ad400814 	ori	r21,r21,32
  808848:	8005883a 	mov	r2,r16
  80884c:	80c00007 	ldb	r3,0(r16)
  808850:	003dc006 	br	807f54 <__alt_data_end+0xff807f54>
  808854:	00802074 	movhi	r2,129
  808858:	10815d04 	addi	r2,r2,1396
  80885c:	d8802615 	stw	r2,152(sp)
  808860:	d9c01d85 	stb	r7,118(sp)
  808864:	a880080c 	andi	r2,r21,32
  808868:	103fb91e 	bne	r2,zero,808750 <__alt_data_end+0xff808750>
  80886c:	a880040c 	andi	r2,r21,16
  808870:	10010f1e 	bne	r2,zero,808cb0 <___vfiprintf_internal_r+0xed4>
  808874:	a880100c 	andi	r2,r21,64
  808878:	10010d26 	beq	r2,zero,808cb0 <___vfiprintf_internal_r+0xed4>
  80887c:	d9002217 	ldw	r4,136(sp)
  808880:	001b883a 	mov	r13,zero
  808884:	2580000b 	ldhu	r22,0(r4)
  808888:	21000104 	addi	r4,r4,4
  80888c:	d9002215 	stw	r4,136(sp)
  808890:	003fb406 	br	808764 <__alt_data_end+0xff808764>
  808894:	d9002217 	ldw	r4,136(sp)
  808898:	00800044 	movi	r2,1
  80889c:	25800017 	ldw	r22,0(r4)
  8088a0:	23400117 	ldw	r13,4(r4)
  8088a4:	21000204 	addi	r4,r4,8
  8088a8:	d9002215 	stw	r4,136(sp)
  8088ac:	b348b03a 	or	r4,r22,r13
  8088b0:	003e2806 	br	808154 <__alt_data_end+0xff808154>
  8088b4:	d9c01d85 	stb	r7,118(sp)
  8088b8:	1801ab26 	beq	r3,zero,808f68 <___vfiprintf_internal_r+0x118c>
  8088bc:	04400044 	movi	r17,1
  8088c0:	d8c01005 	stb	r3,64(sp)
  8088c4:	d8001d85 	stb	zero,118(sp)
  8088c8:	8827883a 	mov	r19,r17
  8088cc:	dd001004 	addi	r20,sp,64
  8088d0:	003f8a06 	br	8086fc <__alt_data_end+0xff8086fc>
  8088d4:	d9002017 	ldw	r4,128(sp)
  8088d8:	d9402117 	ldw	r5,132(sp)
  8088dc:	d9801a04 	addi	r6,sp,104
  8088e0:	d9c02b15 	stw	r7,172(sp)
  8088e4:	dbc02a15 	stw	r15,168(sp)
  8088e8:	0807cc80 	call	807cc8 <__sprint_r.part.0>
  8088ec:	d9c02b17 	ldw	r7,172(sp)
  8088f0:	dbc02a17 	ldw	r15,168(sp)
  8088f4:	1000631e 	bne	r2,zero,808a84 <___vfiprintf_internal_r+0xca8>
  8088f8:	d9801b17 	ldw	r6,108(sp)
  8088fc:	d8801c17 	ldw	r2,112(sp)
  808900:	d811883a 	mov	r8,sp
  808904:	31400044 	addi	r5,r6,1
  808908:	003e4d06 	br	808240 <__alt_data_end+0xff808240>
  80890c:	d9401b17 	ldw	r5,108(sp)
  808910:	d8801c17 	ldw	r2,112(sp)
  808914:	29000044 	addi	r4,r5,1
  808918:	d8c01d87 	ldb	r3,118(sp)
  80891c:	183e6726 	beq	r3,zero,8082bc <__alt_data_end+0xff8082bc>
  808920:	00c00044 	movi	r3,1
  808924:	d9401d84 	addi	r5,sp,118
  808928:	10c5883a 	add	r2,r2,r3
  80892c:	41400015 	stw	r5,0(r8)
  808930:	40c00115 	stw	r3,4(r8)
  808934:	d8801c15 	stw	r2,112(sp)
  808938:	d9001b15 	stw	r4,108(sp)
  80893c:	014001c4 	movi	r5,7
  808940:	2900ab16 	blt	r5,r4,808bf0 <___vfiprintf_internal_r+0xe14>
  808944:	200b883a 	mov	r5,r4
  808948:	42000204 	addi	r8,r8,8
  80894c:	21000044 	addi	r4,r4,1
  808950:	003e5a06 	br	8082bc <__alt_data_end+0xff8082bc>
  808954:	d9002017 	ldw	r4,128(sp)
  808958:	d9402117 	ldw	r5,132(sp)
  80895c:	d9801a04 	addi	r6,sp,104
  808960:	d9c02b15 	stw	r7,172(sp)
  808964:	db402a15 	stw	r13,168(sp)
  808968:	0807cc80 	call	807cc8 <__sprint_r.part.0>
  80896c:	d9c02b17 	ldw	r7,172(sp)
  808970:	db402a17 	ldw	r13,168(sp)
  808974:	1000431e 	bne	r2,zero,808a84 <___vfiprintf_internal_r+0xca8>
  808978:	d9401b17 	ldw	r5,108(sp)
  80897c:	d8801c17 	ldw	r2,112(sp)
  808980:	d811883a 	mov	r8,sp
  808984:	29000044 	addi	r4,r5,1
  808988:	003e6706 	br	808328 <__alt_data_end+0xff808328>
  80898c:	10803fcc 	andi	r2,r2,255
  808990:	00c00044 	movi	r3,1
  808994:	10fdfa1e 	bne	r2,r3,808180 <__alt_data_end+0xff808180>
  808998:	6800021e 	bne	r13,zero,8089a4 <___vfiprintf_internal_r+0xbc8>
  80899c:	00800244 	movi	r2,9
  8089a0:	1580222e 	bgeu	r2,r22,808a2c <___vfiprintf_internal_r+0xc50>
  8089a4:	dc802415 	stw	r18,144(sp)
  8089a8:	dc002515 	stw	r16,148(sp)
  8089ac:	dc401a04 	addi	r17,sp,104
  8089b0:	b021883a 	mov	r16,r22
  8089b4:	4827883a 	mov	r19,r9
  8089b8:	4029883a 	mov	r20,r8
  8089bc:	702d883a 	mov	r22,r14
  8089c0:	6825883a 	mov	r18,r13
  8089c4:	8009883a 	mov	r4,r16
  8089c8:	900b883a 	mov	r5,r18
  8089cc:	01800284 	movi	r6,10
  8089d0:	000f883a 	mov	r7,zero
  8089d4:	080a0440 	call	80a044 <__umoddi3>
  8089d8:	10800c04 	addi	r2,r2,48
  8089dc:	8c7fffc4 	addi	r17,r17,-1
  8089e0:	8009883a 	mov	r4,r16
  8089e4:	900b883a 	mov	r5,r18
  8089e8:	01800284 	movi	r6,10
  8089ec:	000f883a 	mov	r7,zero
  8089f0:	88800005 	stb	r2,0(r17)
  8089f4:	0809a840 	call	809a84 <__udivdi3>
  8089f8:	1021883a 	mov	r16,r2
  8089fc:	10c4b03a 	or	r2,r2,r3
  808a00:	1825883a 	mov	r18,r3
  808a04:	103fef1e 	bne	r2,zero,8089c4 <__alt_data_end+0xff8089c4>
  808a08:	dc802417 	ldw	r18,144(sp)
  808a0c:	dc002517 	ldw	r16,148(sp)
  808a10:	a011883a 	mov	r8,r20
  808a14:	9813883a 	mov	r9,r19
  808a18:	b01d883a 	mov	r14,r22
  808a1c:	8829883a 	mov	r20,r17
  808a20:	d8c01e17 	ldw	r3,120(sp)
  808a24:	1d27c83a 	sub	r19,r3,r20
  808a28:	003de606 	br	8081c4 <__alt_data_end+0xff8081c4>
  808a2c:	b5800c04 	addi	r22,r22,48
  808a30:	dd8019c5 	stb	r22,103(sp)
  808a34:	dcc02717 	ldw	r19,156(sp)
  808a38:	dd0019c4 	addi	r20,sp,103
  808a3c:	003de106 	br	8081c4 <__alt_data_end+0xff8081c4>
  808a40:	d9002017 	ldw	r4,128(sp)
  808a44:	d9402117 	ldw	r5,132(sp)
  808a48:	d9801a04 	addi	r6,sp,104
  808a4c:	0807cc80 	call	807cc8 <__sprint_r.part.0>
  808a50:	10000c1e 	bne	r2,zero,808a84 <___vfiprintf_internal_r+0xca8>
  808a54:	d8801c17 	ldw	r2,112(sp)
  808a58:	8c80010e 	bge	r17,r18,808a60 <___vfiprintf_internal_r+0xc84>
  808a5c:	9023883a 	mov	r17,r18
  808a60:	d8c02317 	ldw	r3,140(sp)
  808a64:	1c47883a 	add	r3,r3,r17
  808a68:	d8c02315 	stw	r3,140(sp)
  808a6c:	103e7e26 	beq	r2,zero,808468 <__alt_data_end+0xff808468>
  808a70:	d9002017 	ldw	r4,128(sp)
  808a74:	d9402117 	ldw	r5,132(sp)
  808a78:	d9801a04 	addi	r6,sp,104
  808a7c:	0807cc80 	call	807cc8 <__sprint_r.part.0>
  808a80:	103e7926 	beq	r2,zero,808468 <__alt_data_end+0xff808468>
  808a84:	dd402117 	ldw	r21,132(sp)
  808a88:	a880030b 	ldhu	r2,12(r21)
  808a8c:	1080100c 	andi	r2,r2,64
  808a90:	103e881e 	bne	r2,zero,8084b4 <__alt_data_end+0xff8084b4>
  808a94:	d8802317 	ldw	r2,140(sp)
  808a98:	003e8706 	br	8084b8 <__alt_data_end+0xff8084b8>
  808a9c:	d9402117 	ldw	r5,132(sp)
  808aa0:	b009883a 	mov	r4,r22
  808aa4:	d9801a04 	addi	r6,sp,104
  808aa8:	0807cc80 	call	807cc8 <__sprint_r.part.0>
  808aac:	103ff51e 	bne	r2,zero,808a84 <__alt_data_end+0xff808a84>
  808ab0:	d9001b17 	ldw	r4,108(sp)
  808ab4:	d8801c17 	ldw	r2,112(sp)
  808ab8:	d811883a 	mov	r8,sp
  808abc:	21400044 	addi	r5,r4,1
  808ac0:	003e4d06 	br	8083f8 <__alt_data_end+0xff8083f8>
  808ac4:	1000aa1e 	bne	r2,zero,808d70 <___vfiprintf_internal_r+0xf94>
  808ac8:	00c00044 	movi	r3,1
  808acc:	9805883a 	mov	r2,r19
  808ad0:	dd000015 	stw	r20,0(sp)
  808ad4:	dcc00115 	stw	r19,4(sp)
  808ad8:	dcc01c15 	stw	r19,112(sp)
  808adc:	d8c01b15 	stw	r3,108(sp)
  808ae0:	d811883a 	mov	r8,sp
  808ae4:	42000204 	addi	r8,r8,8
  808ae8:	aac0010c 	andi	r11,r21,4
  808aec:	583fda26 	beq	r11,zero,808a58 <__alt_data_end+0xff808a58>
  808af0:	9467c83a 	sub	r19,r18,r17
  808af4:	04fe3316 	blt	zero,r19,8083c4 <__alt_data_end+0xff8083c4>
  808af8:	003fd706 	br	808a58 <__alt_data_end+0xff808a58>
  808afc:	946dc83a 	sub	r22,r18,r17
  808b00:	05bdfd0e 	bge	zero,r22,8082f8 <__alt_data_end+0xff8082f8>
  808b04:	00c02074 	movhi	r3,129
  808b08:	18c1be04 	addi	r3,r3,1784
  808b0c:	01c00404 	movi	r7,16
  808b10:	d8c02415 	stw	r3,144(sp)
  808b14:	3d81530e 	bge	r7,r22,809064 <___vfiprintf_internal_r+0x1288>
  808b18:	8007883a 	mov	r3,r16
  808b1c:	034001c4 	movi	r13,7
  808b20:	b021883a 	mov	r16,r22
  808b24:	da402515 	stw	r9,148(sp)
  808b28:	182d883a 	mov	r22,r3
  808b2c:	00000506 	br	808b44 <___vfiprintf_internal_r+0xd68>
  808b30:	29800084 	addi	r6,r5,2
  808b34:	42000204 	addi	r8,r8,8
  808b38:	180b883a 	mov	r5,r3
  808b3c:	843ffc04 	addi	r16,r16,-16
  808b40:	3c000d0e 	bge	r7,r16,808b78 <___vfiprintf_internal_r+0xd9c>
  808b44:	10800404 	addi	r2,r2,16
  808b48:	28c00044 	addi	r3,r5,1
  808b4c:	45c00015 	stw	r23,0(r8)
  808b50:	41c00115 	stw	r7,4(r8)
  808b54:	d8801c15 	stw	r2,112(sp)
  808b58:	d8c01b15 	stw	r3,108(sp)
  808b5c:	68fff40e 	bge	r13,r3,808b30 <__alt_data_end+0xff808b30>
  808b60:	1000151e 	bne	r2,zero,808bb8 <___vfiprintf_internal_r+0xddc>
  808b64:	843ffc04 	addi	r16,r16,-16
  808b68:	01800044 	movi	r6,1
  808b6c:	000b883a 	mov	r5,zero
  808b70:	d811883a 	mov	r8,sp
  808b74:	3c3ff316 	blt	r7,r16,808b44 <__alt_data_end+0xff808b44>
  808b78:	da402517 	ldw	r9,148(sp)
  808b7c:	b007883a 	mov	r3,r22
  808b80:	802d883a 	mov	r22,r16
  808b84:	1821883a 	mov	r16,r3
  808b88:	d8c02417 	ldw	r3,144(sp)
  808b8c:	1585883a 	add	r2,r2,r22
  808b90:	45800115 	stw	r22,4(r8)
  808b94:	40c00015 	stw	r3,0(r8)
  808b98:	d8801c15 	stw	r2,112(sp)
  808b9c:	d9801b15 	stw	r6,108(sp)
  808ba0:	00c001c4 	movi	r3,7
  808ba4:	19806d16 	blt	r3,r6,808d5c <___vfiprintf_internal_r+0xf80>
  808ba8:	42000204 	addi	r8,r8,8
  808bac:	31000044 	addi	r4,r6,1
  808bb0:	300b883a 	mov	r5,r6
  808bb4:	003dd006 	br	8082f8 <__alt_data_end+0xff8082f8>
  808bb8:	d9002017 	ldw	r4,128(sp)
  808bbc:	d9402117 	ldw	r5,132(sp)
  808bc0:	d9801a04 	addi	r6,sp,104
  808bc4:	d9c02b15 	stw	r7,172(sp)
  808bc8:	db402a15 	stw	r13,168(sp)
  808bcc:	0807cc80 	call	807cc8 <__sprint_r.part.0>
  808bd0:	d9c02b17 	ldw	r7,172(sp)
  808bd4:	db402a17 	ldw	r13,168(sp)
  808bd8:	103faa1e 	bne	r2,zero,808a84 <__alt_data_end+0xff808a84>
  808bdc:	d9401b17 	ldw	r5,108(sp)
  808be0:	d8801c17 	ldw	r2,112(sp)
  808be4:	d811883a 	mov	r8,sp
  808be8:	29800044 	addi	r6,r5,1
  808bec:	003fd306 	br	808b3c <__alt_data_end+0xff808b3c>
  808bf0:	1000401e 	bne	r2,zero,808cf4 <___vfiprintf_internal_r+0xf18>
  808bf4:	68003b26 	beq	r13,zero,808ce4 <___vfiprintf_internal_r+0xf08>
  808bf8:	d9001d04 	addi	r4,sp,116
  808bfc:	00800084 	movi	r2,2
  808c00:	d9000015 	stw	r4,0(sp)
  808c04:	d8800115 	stw	r2,4(sp)
  808c08:	1809883a 	mov	r4,r3
  808c0c:	d811883a 	mov	r8,sp
  808c10:	003db406 	br	8082e4 <__alt_data_end+0xff8082e4>
  808c14:	1000451e 	bne	r2,zero,808d2c <___vfiprintf_internal_r+0xf50>
  808c18:	01000044 	movi	r4,1
  808c1c:	000b883a 	mov	r5,zero
  808c20:	d811883a 	mov	r8,sp
  808c24:	003db206 	br	8082f0 <__alt_data_end+0xff8082f0>
  808c28:	10803fcc 	andi	r2,r2,255
  808c2c:	1000071e 	bne	r2,zero,808c4c <___vfiprintf_internal_r+0xe70>
  808c30:	a880004c 	andi	r2,r21,1
  808c34:	10000526 	beq	r2,zero,808c4c <___vfiprintf_internal_r+0xe70>
  808c38:	00800c04 	movi	r2,48
  808c3c:	d88019c5 	stb	r2,103(sp)
  808c40:	dcc02717 	ldw	r19,156(sp)
  808c44:	dd0019c4 	addi	r20,sp,103
  808c48:	003d5e06 	br	8081c4 <__alt_data_end+0xff8081c4>
  808c4c:	dd001a04 	addi	r20,sp,104
  808c50:	003d5c06 	br	8081c4 <__alt_data_end+0xff8081c4>
  808c54:	1000971e 	bne	r2,zero,808eb4 <___vfiprintf_internal_r+0x10d8>
  808c58:	d8c01d87 	ldb	r3,118(sp)
  808c5c:	18005826 	beq	r3,zero,808dc0 <___vfiprintf_internal_r+0xfe4>
  808c60:	00800044 	movi	r2,1
  808c64:	d8c01d84 	addi	r3,sp,118
  808c68:	1009883a 	mov	r4,r2
  808c6c:	d8c00015 	stw	r3,0(sp)
  808c70:	d8800115 	stw	r2,4(sp)
  808c74:	d811883a 	mov	r8,sp
  808c78:	003f3206 	br	808944 <__alt_data_end+0xff808944>
  808c7c:	8023883a 	mov	r17,r16
  808c80:	003ca706 	br	807f20 <__alt_data_end+0xff807f20>
  808c84:	d9002017 	ldw	r4,128(sp)
  808c88:	d9402117 	ldw	r5,132(sp)
  808c8c:	d9801a04 	addi	r6,sp,104
  808c90:	0807cc80 	call	807cc8 <__sprint_r.part.0>
  808c94:	103f7b1e 	bne	r2,zero,808a84 <__alt_data_end+0xff808a84>
  808c98:	d8801c17 	ldw	r2,112(sp)
  808c9c:	d811883a 	mov	r8,sp
  808ca0:	003f9106 	br	808ae8 <__alt_data_end+0xff808ae8>
  808ca4:	00800084 	movi	r2,2
  808ca8:	b348b03a 	or	r4,r22,r13
  808cac:	003d2906 	br	808154 <__alt_data_end+0xff808154>
  808cb0:	d8802217 	ldw	r2,136(sp)
  808cb4:	001b883a 	mov	r13,zero
  808cb8:	15800017 	ldw	r22,0(r2)
  808cbc:	10800104 	addi	r2,r2,4
  808cc0:	d8802215 	stw	r2,136(sp)
  808cc4:	003ea706 	br	808764 <__alt_data_end+0xff808764>
  808cc8:	d9002017 	ldw	r4,128(sp)
  808ccc:	d9402117 	ldw	r5,132(sp)
  808cd0:	d9801a04 	addi	r6,sp,104
  808cd4:	0807cc80 	call	807cc8 <__sprint_r.part.0>
  808cd8:	103f6a1e 	bne	r2,zero,808a84 <__alt_data_end+0xff808a84>
  808cdc:	d811883a 	mov	r8,sp
  808ce0:	003cff06 	br	8080e0 <__alt_data_end+0xff8080e0>
  808ce4:	000b883a 	mov	r5,zero
  808ce8:	1809883a 	mov	r4,r3
  808cec:	d811883a 	mov	r8,sp
  808cf0:	003d7f06 	br	8082f0 <__alt_data_end+0xff8082f0>
  808cf4:	d9002017 	ldw	r4,128(sp)
  808cf8:	d9402117 	ldw	r5,132(sp)
  808cfc:	d9801a04 	addi	r6,sp,104
  808d00:	da402b15 	stw	r9,172(sp)
  808d04:	db402a15 	stw	r13,168(sp)
  808d08:	0807cc80 	call	807cc8 <__sprint_r.part.0>
  808d0c:	da402b17 	ldw	r9,172(sp)
  808d10:	db402a17 	ldw	r13,168(sp)
  808d14:	103f5b1e 	bne	r2,zero,808a84 <__alt_data_end+0xff808a84>
  808d18:	d9401b17 	ldw	r5,108(sp)
  808d1c:	d8801c17 	ldw	r2,112(sp)
  808d20:	d811883a 	mov	r8,sp
  808d24:	29000044 	addi	r4,r5,1
  808d28:	003d6406 	br	8082bc <__alt_data_end+0xff8082bc>
  808d2c:	d9002017 	ldw	r4,128(sp)
  808d30:	d9402117 	ldw	r5,132(sp)
  808d34:	d9801a04 	addi	r6,sp,104
  808d38:	da402b15 	stw	r9,172(sp)
  808d3c:	0807cc80 	call	807cc8 <__sprint_r.part.0>
  808d40:	da402b17 	ldw	r9,172(sp)
  808d44:	103f4f1e 	bne	r2,zero,808a84 <__alt_data_end+0xff808a84>
  808d48:	d9401b17 	ldw	r5,108(sp)
  808d4c:	d8801c17 	ldw	r2,112(sp)
  808d50:	d811883a 	mov	r8,sp
  808d54:	29000044 	addi	r4,r5,1
  808d58:	003d6506 	br	8082f0 <__alt_data_end+0xff8082f0>
  808d5c:	10009a1e 	bne	r2,zero,808fc8 <___vfiprintf_internal_r+0x11ec>
  808d60:	01000044 	movi	r4,1
  808d64:	000b883a 	mov	r5,zero
  808d68:	d811883a 	mov	r8,sp
  808d6c:	003d6206 	br	8082f8 <__alt_data_end+0xff8082f8>
  808d70:	d9002017 	ldw	r4,128(sp)
  808d74:	d9402117 	ldw	r5,132(sp)
  808d78:	d9801a04 	addi	r6,sp,104
  808d7c:	0807cc80 	call	807cc8 <__sprint_r.part.0>
  808d80:	103f401e 	bne	r2,zero,808a84 <__alt_data_end+0xff808a84>
  808d84:	d9001b17 	ldw	r4,108(sp)
  808d88:	d8801c17 	ldw	r2,112(sp)
  808d8c:	d811883a 	mov	r8,sp
  808d90:	21000044 	addi	r4,r4,1
  808d94:	003d7d06 	br	80838c <__alt_data_end+0xff80838c>
  808d98:	05adc83a 	sub	r22,zero,r22
  808d9c:	b004c03a 	cmpne	r2,r22,zero
  808da0:	035bc83a 	sub	r13,zero,r13
  808da4:	689bc83a 	sub	r13,r13,r2
  808da8:	03800b44 	movi	r14,45
  808dac:	db801d85 	stb	r14,118(sp)
  808db0:	4827883a 	mov	r19,r9
  808db4:	00800044 	movi	r2,1
  808db8:	b348b03a 	or	r4,r22,r13
  808dbc:	003ce806 	br	808160 <__alt_data_end+0xff808160>
  808dc0:	000b883a 	mov	r5,zero
  808dc4:	01000044 	movi	r4,1
  808dc8:	d811883a 	mov	r8,sp
  808dcc:	683d4826 	beq	r13,zero,8082f0 <__alt_data_end+0xff8082f0>
  808dd0:	00800084 	movi	r2,2
  808dd4:	d8c01d04 	addi	r3,sp,116
  808dd8:	d8c00015 	stw	r3,0(sp)
  808ddc:	d8800115 	stw	r2,4(sp)
  808de0:	003d4006 	br	8082e4 <__alt_data_end+0xff8082e4>
  808de4:	00800084 	movi	r2,2
  808de8:	003cda06 	br	808154 <__alt_data_end+0xff808154>
  808dec:	a880100c 	andi	r2,r21,64
  808df0:	10004226 	beq	r2,zero,808efc <___vfiprintf_internal_r+0x1120>
  808df4:	d8802217 	ldw	r2,136(sp)
  808df8:	001b883a 	mov	r13,zero
  808dfc:	1580000b 	ldhu	r22,0(r2)
  808e00:	10800104 	addi	r2,r2,4
  808e04:	d8802215 	stw	r2,136(sp)
  808e08:	b009883a 	mov	r4,r22
  808e0c:	0005883a 	mov	r2,zero
  808e10:	003cd006 	br	808154 <__alt_data_end+0xff808154>
  808e14:	80c00007 	ldb	r3,0(r16)
  808e18:	8005883a 	mov	r2,r16
  808e1c:	003c4d06 	br	807f54 <__alt_data_end+0xff807f54>
  808e20:	a880100c 	andi	r2,r21,64
  808e24:	10004426 	beq	r2,zero,808f38 <___vfiprintf_internal_r+0x115c>
  808e28:	d8c02217 	ldw	r3,136(sp)
  808e2c:	001b883a 	mov	r13,zero
  808e30:	00800044 	movi	r2,1
  808e34:	1d80000b 	ldhu	r22,0(r3)
  808e38:	18c00104 	addi	r3,r3,4
  808e3c:	d8c02215 	stw	r3,136(sp)
  808e40:	b009883a 	mov	r4,r22
  808e44:	003cc306 	br	808154 <__alt_data_end+0xff808154>
  808e48:	a880040c 	andi	r2,r21,16
  808e4c:	1000091e 	bne	r2,zero,808e74 <___vfiprintf_internal_r+0x1098>
  808e50:	aac0100c 	andi	r11,r21,64
  808e54:	58000726 	beq	r11,zero,808e74 <___vfiprintf_internal_r+0x1098>
  808e58:	d8c02217 	ldw	r3,136(sp)
  808e5c:	d9002317 	ldw	r4,140(sp)
  808e60:	18800017 	ldw	r2,0(r3)
  808e64:	18c00104 	addi	r3,r3,4
  808e68:	d8c02215 	stw	r3,136(sp)
  808e6c:	1100000d 	sth	r4,0(r2)
  808e70:	003c0e06 	br	807eac <__alt_data_end+0xff807eac>
  808e74:	d8c02217 	ldw	r3,136(sp)
  808e78:	d9002317 	ldw	r4,140(sp)
  808e7c:	18800017 	ldw	r2,0(r3)
  808e80:	18c00104 	addi	r3,r3,4
  808e84:	d8c02215 	stw	r3,136(sp)
  808e88:	11000015 	stw	r4,0(r2)
  808e8c:	003c0706 	br	807eac <__alt_data_end+0xff807eac>
  808e90:	a880100c 	andi	r2,r21,64
  808e94:	10002126 	beq	r2,zero,808f1c <___vfiprintf_internal_r+0x1140>
  808e98:	1d80000f 	ldh	r22,0(r3)
  808e9c:	d8c02217 	ldw	r3,136(sp)
  808ea0:	b01bd7fa 	srai	r13,r22,31
  808ea4:	18c00104 	addi	r3,r3,4
  808ea8:	d8c02215 	stw	r3,136(sp)
  808eac:	6805883a 	mov	r2,r13
  808eb0:	003dc406 	br	8085c4 <__alt_data_end+0xff8085c4>
  808eb4:	d9002017 	ldw	r4,128(sp)
  808eb8:	d9402117 	ldw	r5,132(sp)
  808ebc:	d9801a04 	addi	r6,sp,104
  808ec0:	da402b15 	stw	r9,172(sp)
  808ec4:	db402a15 	stw	r13,168(sp)
  808ec8:	0807cc80 	call	807cc8 <__sprint_r.part.0>
  808ecc:	da402b17 	ldw	r9,172(sp)
  808ed0:	db402a17 	ldw	r13,168(sp)
  808ed4:	103eeb1e 	bne	r2,zero,808a84 <__alt_data_end+0xff808a84>
  808ed8:	d9401b17 	ldw	r5,108(sp)
  808edc:	d8801c17 	ldw	r2,112(sp)
  808ee0:	d811883a 	mov	r8,sp
  808ee4:	29000044 	addi	r4,r5,1
  808ee8:	003e8b06 	br	808918 <__alt_data_end+0xff808918>
  808eec:	9023883a 	mov	r17,r18
  808ef0:	003d5a06 	br	80845c <__alt_data_end+0xff80845c>
  808ef4:	4827883a 	mov	r19,r9
  808ef8:	003e3506 	br	8087d0 <__alt_data_end+0xff8087d0>
  808efc:	d8c02217 	ldw	r3,136(sp)
  808f00:	001b883a 	mov	r13,zero
  808f04:	0005883a 	mov	r2,zero
  808f08:	1d800017 	ldw	r22,0(r3)
  808f0c:	18c00104 	addi	r3,r3,4
  808f10:	d8c02215 	stw	r3,136(sp)
  808f14:	b009883a 	mov	r4,r22
  808f18:	003c8e06 	br	808154 <__alt_data_end+0xff808154>
  808f1c:	1d800017 	ldw	r22,0(r3)
  808f20:	d9002217 	ldw	r4,136(sp)
  808f24:	b01bd7fa 	srai	r13,r22,31
  808f28:	21000104 	addi	r4,r4,4
  808f2c:	d9002215 	stw	r4,136(sp)
  808f30:	6805883a 	mov	r2,r13
  808f34:	003da306 	br	8085c4 <__alt_data_end+0xff8085c4>
  808f38:	d9002217 	ldw	r4,136(sp)
  808f3c:	001b883a 	mov	r13,zero
  808f40:	00800044 	movi	r2,1
  808f44:	25800017 	ldw	r22,0(r4)
  808f48:	21000104 	addi	r4,r4,4
  808f4c:	d9002215 	stw	r4,136(sp)
  808f50:	b009883a 	mov	r4,r22
  808f54:	003c7f06 	br	808154 <__alt_data_end+0xff808154>
  808f58:	00c02074 	movhi	r3,129
  808f5c:	18c1be04 	addi	r3,r3,1784
  808f60:	d8c02415 	stw	r3,144(sp)
  808f64:	003cff06 	br	808364 <__alt_data_end+0xff808364>
  808f68:	d8801c17 	ldw	r2,112(sp)
  808f6c:	dd402117 	ldw	r21,132(sp)
  808f70:	103ec526 	beq	r2,zero,808a88 <__alt_data_end+0xff808a88>
  808f74:	d9002017 	ldw	r4,128(sp)
  808f78:	a80b883a 	mov	r5,r21
  808f7c:	d9801a04 	addi	r6,sp,104
  808f80:	0807cc80 	call	807cc8 <__sprint_r.part.0>
  808f84:	003ec006 	br	808a88 <__alt_data_end+0xff808a88>
  808f88:	80800044 	addi	r2,r16,1
  808f8c:	ad400814 	ori	r21,r21,32
  808f90:	80c00047 	ldb	r3,1(r16)
  808f94:	003bef06 	br	807f54 <__alt_data_end+0xff807f54>
  808f98:	04a5c83a 	sub	r18,zero,r18
  808f9c:	8005883a 	mov	r2,r16
  808fa0:	d8c02215 	stw	r3,136(sp)
  808fa4:	003d5306 	br	8084f4 <__alt_data_end+0xff8084f4>
  808fa8:	da002a15 	stw	r8,168(sp)
  808fac:	0800a640 	call	800a64 <strlen>
  808fb0:	1027883a 	mov	r19,r2
  808fb4:	db801d83 	ldbu	r14,118(sp)
  808fb8:	dd802215 	stw	r22,136(sp)
  808fbc:	0013883a 	mov	r9,zero
  808fc0:	da002a17 	ldw	r8,168(sp)
  808fc4:	003c7f06 	br	8081c4 <__alt_data_end+0xff8081c4>
  808fc8:	d9002017 	ldw	r4,128(sp)
  808fcc:	d9402117 	ldw	r5,132(sp)
  808fd0:	d9801a04 	addi	r6,sp,104
  808fd4:	da402b15 	stw	r9,172(sp)
  808fd8:	0807cc80 	call	807cc8 <__sprint_r.part.0>
  808fdc:	da402b17 	ldw	r9,172(sp)
  808fe0:	103ea81e 	bne	r2,zero,808a84 <__alt_data_end+0xff808a84>
  808fe4:	d9401b17 	ldw	r5,108(sp)
  808fe8:	d8801c17 	ldw	r2,112(sp)
  808fec:	d811883a 	mov	r8,sp
  808ff0:	29000044 	addi	r4,r5,1
  808ff4:	003cc006 	br	8082f8 <__alt_data_end+0xff8082f8>
  808ff8:	d9401b17 	ldw	r5,108(sp)
  808ffc:	01002074 	movhi	r4,129
  809000:	2101c204 	addi	r4,r4,1800
  809004:	d9002415 	stw	r4,144(sp)
  809008:	29400044 	addi	r5,r5,1
  80900c:	003c9f06 	br	80828c <__alt_data_end+0xff80828c>
  809010:	00800184 	movi	r2,6
  809014:	1240012e 	bgeu	r2,r9,80901c <___vfiprintf_internal_r+0x1240>
  809018:	1013883a 	mov	r9,r2
  80901c:	4827883a 	mov	r19,r9
  809020:	4823883a 	mov	r17,r9
  809024:	48001116 	blt	r9,zero,80906c <___vfiprintf_internal_r+0x1290>
  809028:	05002074 	movhi	r20,129
  80902c:	dd802215 	stw	r22,136(sp)
  809030:	a5016204 	addi	r20,r20,1416
  809034:	003db106 	br	8086fc <__alt_data_end+0xff8086fc>
  809038:	d9401b17 	ldw	r5,108(sp)
  80903c:	01002074 	movhi	r4,129
  809040:	2101c204 	addi	r4,r4,1800
  809044:	d9002415 	stw	r4,144(sp)
  809048:	29400044 	addi	r5,r5,1
  80904c:	003cf906 	br	808434 <__alt_data_end+0xff808434>
  809050:	4827883a 	mov	r19,r9
  809054:	db801d83 	ldbu	r14,118(sp)
  809058:	dd802215 	stw	r22,136(sp)
  80905c:	0013883a 	mov	r9,zero
  809060:	003c5806 	br	8081c4 <__alt_data_end+0xff8081c4>
  809064:	200d883a 	mov	r6,r4
  809068:	003ec706 	br	808b88 <__alt_data_end+0xff808b88>
  80906c:	0023883a 	mov	r17,zero
  809070:	003fed06 	br	809028 <__alt_data_end+0xff809028>
  809074:	d9002217 	ldw	r4,136(sp)
  809078:	22400017 	ldw	r9,0(r4)
  80907c:	20c00104 	addi	r3,r4,4
  809080:	d8c02215 	stw	r3,136(sp)
  809084:	483fc20e 	bge	r9,zero,808f90 <__alt_data_end+0xff808f90>
  809088:	027fffc4 	movi	r9,-1
  80908c:	80c00047 	ldb	r3,1(r16)
  809090:	003bb006 	br	807f54 <__alt_data_end+0xff807f54>
  809094:	8c80010e 	bge	r17,r18,80909c <___vfiprintf_internal_r+0x12c0>
  809098:	9023883a 	mov	r17,r18
  80909c:	d8802317 	ldw	r2,140(sp)
  8090a0:	1445883a 	add	r2,r2,r17
  8090a4:	d8802315 	stw	r2,140(sp)
  8090a8:	003cef06 	br	808468 <__alt_data_end+0xff808468>

008090ac <__vfiprintf_internal>:
  8090ac:	2007883a 	mov	r3,r4
  8090b0:	01002074 	movhi	r4,129
  8090b4:	2105f804 	addi	r4,r4,6112
  8090b8:	21000017 	ldw	r4,0(r4)
  8090bc:	2805883a 	mov	r2,r5
  8090c0:	300f883a 	mov	r7,r6
  8090c4:	180b883a 	mov	r5,r3
  8090c8:	100d883a 	mov	r6,r2
  8090cc:	0807ddc1 	jmpi	807ddc <___vfiprintf_internal_r>

008090d0 <__sbprintf>:
  8090d0:	2880030b 	ldhu	r2,12(r5)
  8090d4:	2ac01917 	ldw	r11,100(r5)
  8090d8:	2a80038b 	ldhu	r10,14(r5)
  8090dc:	2a400717 	ldw	r9,28(r5)
  8090e0:	2a000917 	ldw	r8,36(r5)
  8090e4:	defee204 	addi	sp,sp,-1144
  8090e8:	00c10004 	movi	r3,1024
  8090ec:	dc011a15 	stw	r16,1128(sp)
  8090f0:	10bfff4c 	andi	r2,r2,65533
  8090f4:	2821883a 	mov	r16,r5
  8090f8:	d8cb883a 	add	r5,sp,r3
  8090fc:	dc811c15 	stw	r18,1136(sp)
  809100:	dc411b15 	stw	r17,1132(sp)
  809104:	dfc11d15 	stw	ra,1140(sp)
  809108:	2025883a 	mov	r18,r4
  80910c:	d881030d 	sth	r2,1036(sp)
  809110:	dac11915 	stw	r11,1124(sp)
  809114:	da81038d 	sth	r10,1038(sp)
  809118:	da410715 	stw	r9,1052(sp)
  80911c:	da010915 	stw	r8,1060(sp)
  809120:	dec10015 	stw	sp,1024(sp)
  809124:	dec10415 	stw	sp,1040(sp)
  809128:	d8c10215 	stw	r3,1032(sp)
  80912c:	d8c10515 	stw	r3,1044(sp)
  809130:	d8010615 	stw	zero,1048(sp)
  809134:	0807ddc0 	call	807ddc <___vfiprintf_internal_r>
  809138:	1023883a 	mov	r17,r2
  80913c:	10000416 	blt	r2,zero,809150 <__sbprintf+0x80>
  809140:	9009883a 	mov	r4,r18
  809144:	d9410004 	addi	r5,sp,1024
  809148:	08047b00 	call	8047b0 <_fflush_r>
  80914c:	10000d1e 	bne	r2,zero,809184 <__sbprintf+0xb4>
  809150:	d8c1030b 	ldhu	r3,1036(sp)
  809154:	18c0100c 	andi	r3,r3,64
  809158:	18000326 	beq	r3,zero,809168 <__sbprintf+0x98>
  80915c:	8080030b 	ldhu	r2,12(r16)
  809160:	10801014 	ori	r2,r2,64
  809164:	8080030d 	sth	r2,12(r16)
  809168:	8805883a 	mov	r2,r17
  80916c:	dfc11d17 	ldw	ra,1140(sp)
  809170:	dc811c17 	ldw	r18,1136(sp)
  809174:	dc411b17 	ldw	r17,1132(sp)
  809178:	dc011a17 	ldw	r16,1128(sp)
  80917c:	dec11e04 	addi	sp,sp,1144
  809180:	f800283a 	ret
  809184:	047fffc4 	movi	r17,-1
  809188:	003ff106 	br	809150 <__alt_data_end+0xff809150>

0080918c <_write_r>:
  80918c:	defffd04 	addi	sp,sp,-12
  809190:	dc000015 	stw	r16,0(sp)
  809194:	04002074 	movhi	r16,129
  809198:	dc400115 	stw	r17,4(sp)
  80919c:	84095404 	addi	r16,r16,9552
  8091a0:	2023883a 	mov	r17,r4
  8091a4:	2809883a 	mov	r4,r5
  8091a8:	300b883a 	mov	r5,r6
  8091ac:	380d883a 	mov	r6,r7
  8091b0:	dfc00215 	stw	ra,8(sp)
  8091b4:	80000015 	stw	zero,0(r16)
  8091b8:	080d75c0 	call	80d75c <write>
  8091bc:	00ffffc4 	movi	r3,-1
  8091c0:	10c00526 	beq	r2,r3,8091d8 <_write_r+0x4c>
  8091c4:	dfc00217 	ldw	ra,8(sp)
  8091c8:	dc400117 	ldw	r17,4(sp)
  8091cc:	dc000017 	ldw	r16,0(sp)
  8091d0:	dec00304 	addi	sp,sp,12
  8091d4:	f800283a 	ret
  8091d8:	80c00017 	ldw	r3,0(r16)
  8091dc:	183ff926 	beq	r3,zero,8091c4 <__alt_data_end+0xff8091c4>
  8091e0:	88c00015 	stw	r3,0(r17)
  8091e4:	003ff706 	br	8091c4 <__alt_data_end+0xff8091c4>

008091e8 <_close_r>:
  8091e8:	defffd04 	addi	sp,sp,-12
  8091ec:	dc000015 	stw	r16,0(sp)
  8091f0:	04002074 	movhi	r16,129
  8091f4:	dc400115 	stw	r17,4(sp)
  8091f8:	84095404 	addi	r16,r16,9552
  8091fc:	2023883a 	mov	r17,r4
  809200:	2809883a 	mov	r4,r5
  809204:	dfc00215 	stw	ra,8(sp)
  809208:	80000015 	stw	zero,0(r16)
  80920c:	080cd500 	call	80cd50 <close>
  809210:	00ffffc4 	movi	r3,-1
  809214:	10c00526 	beq	r2,r3,80922c <_close_r+0x44>
  809218:	dfc00217 	ldw	ra,8(sp)
  80921c:	dc400117 	ldw	r17,4(sp)
  809220:	dc000017 	ldw	r16,0(sp)
  809224:	dec00304 	addi	sp,sp,12
  809228:	f800283a 	ret
  80922c:	80c00017 	ldw	r3,0(r16)
  809230:	183ff926 	beq	r3,zero,809218 <__alt_data_end+0xff809218>
  809234:	88c00015 	stw	r3,0(r17)
  809238:	003ff706 	br	809218 <__alt_data_end+0xff809218>

0080923c <_calloc_r>:
  80923c:	298b383a 	mul	r5,r5,r6
  809240:	defffe04 	addi	sp,sp,-8
  809244:	dc000015 	stw	r16,0(sp)
  809248:	dfc00115 	stw	ra,4(sp)
  80924c:	08058d00 	call	8058d0 <_malloc_r>
  809250:	1021883a 	mov	r16,r2
  809254:	10002826 	beq	r2,zero,8092f8 <_calloc_r+0xbc>
  809258:	11bfff17 	ldw	r6,-4(r2)
  80925c:	00bfff04 	movi	r2,-4
  809260:	00c00904 	movi	r3,36
  809264:	308c703a 	and	r6,r6,r2
  809268:	308d883a 	add	r6,r6,r2
  80926c:	19801436 	bltu	r3,r6,8092c0 <_calloc_r+0x84>
  809270:	008004c4 	movi	r2,19
  809274:	11800936 	bltu	r2,r6,80929c <_calloc_r+0x60>
  809278:	8005883a 	mov	r2,r16
  80927c:	10000015 	stw	zero,0(r2)
  809280:	10000115 	stw	zero,4(r2)
  809284:	10000215 	stw	zero,8(r2)
  809288:	8005883a 	mov	r2,r16
  80928c:	dfc00117 	ldw	ra,4(sp)
  809290:	dc000017 	ldw	r16,0(sp)
  809294:	dec00204 	addi	sp,sp,8
  809298:	f800283a 	ret
  80929c:	80000015 	stw	zero,0(r16)
  8092a0:	80000115 	stw	zero,4(r16)
  8092a4:	008006c4 	movi	r2,27
  8092a8:	11800d2e 	bgeu	r2,r6,8092e0 <_calloc_r+0xa4>
  8092ac:	80000215 	stw	zero,8(r16)
  8092b0:	80000315 	stw	zero,12(r16)
  8092b4:	30c00c26 	beq	r6,r3,8092e8 <_calloc_r+0xac>
  8092b8:	80800404 	addi	r2,r16,16
  8092bc:	003fef06 	br	80927c <__alt_data_end+0xff80927c>
  8092c0:	8009883a 	mov	r4,r16
  8092c4:	000b883a 	mov	r5,zero
  8092c8:	08063f40 	call	8063f4 <memset>
  8092cc:	8005883a 	mov	r2,r16
  8092d0:	dfc00117 	ldw	ra,4(sp)
  8092d4:	dc000017 	ldw	r16,0(sp)
  8092d8:	dec00204 	addi	sp,sp,8
  8092dc:	f800283a 	ret
  8092e0:	80800204 	addi	r2,r16,8
  8092e4:	003fe506 	br	80927c <__alt_data_end+0xff80927c>
  8092e8:	80000415 	stw	zero,16(r16)
  8092ec:	80800604 	addi	r2,r16,24
  8092f0:	80000515 	stw	zero,20(r16)
  8092f4:	003fe106 	br	80927c <__alt_data_end+0xff80927c>
  8092f8:	0005883a 	mov	r2,zero
  8092fc:	003fe306 	br	80928c <__alt_data_end+0xff80928c>

00809300 <_fclose_r>:
  809300:	28003926 	beq	r5,zero,8093e8 <_fclose_r+0xe8>
  809304:	defffc04 	addi	sp,sp,-16
  809308:	dc400115 	stw	r17,4(sp)
  80930c:	dc000015 	stw	r16,0(sp)
  809310:	dfc00315 	stw	ra,12(sp)
  809314:	dc800215 	stw	r18,8(sp)
  809318:	2023883a 	mov	r17,r4
  80931c:	2821883a 	mov	r16,r5
  809320:	20000226 	beq	r4,zero,80932c <_fclose_r+0x2c>
  809324:	20800e17 	ldw	r2,56(r4)
  809328:	10002726 	beq	r2,zero,8093c8 <_fclose_r+0xc8>
  80932c:	8080030f 	ldh	r2,12(r16)
  809330:	1000071e 	bne	r2,zero,809350 <_fclose_r+0x50>
  809334:	0005883a 	mov	r2,zero
  809338:	dfc00317 	ldw	ra,12(sp)
  80933c:	dc800217 	ldw	r18,8(sp)
  809340:	dc400117 	ldw	r17,4(sp)
  809344:	dc000017 	ldw	r16,0(sp)
  809348:	dec00404 	addi	sp,sp,16
  80934c:	f800283a 	ret
  809350:	8809883a 	mov	r4,r17
  809354:	800b883a 	mov	r5,r16
  809358:	08045a80 	call	8045a8 <__sflush_r>
  80935c:	1025883a 	mov	r18,r2
  809360:	80800b17 	ldw	r2,44(r16)
  809364:	10000426 	beq	r2,zero,809378 <_fclose_r+0x78>
  809368:	81400717 	ldw	r5,28(r16)
  80936c:	8809883a 	mov	r4,r17
  809370:	103ee83a 	callr	r2
  809374:	10001616 	blt	r2,zero,8093d0 <_fclose_r+0xd0>
  809378:	8080030b 	ldhu	r2,12(r16)
  80937c:	1080200c 	andi	r2,r2,128
  809380:	1000151e 	bne	r2,zero,8093d8 <_fclose_r+0xd8>
  809384:	81400c17 	ldw	r5,48(r16)
  809388:	28000526 	beq	r5,zero,8093a0 <_fclose_r+0xa0>
  80938c:	80801004 	addi	r2,r16,64
  809390:	28800226 	beq	r5,r2,80939c <_fclose_r+0x9c>
  809394:	8809883a 	mov	r4,r17
  809398:	0804d000 	call	804d00 <_free_r>
  80939c:	80000c15 	stw	zero,48(r16)
  8093a0:	81401117 	ldw	r5,68(r16)
  8093a4:	28000326 	beq	r5,zero,8093b4 <_fclose_r+0xb4>
  8093a8:	8809883a 	mov	r4,r17
  8093ac:	0804d000 	call	804d00 <_free_r>
  8093b0:	80001115 	stw	zero,68(r16)
  8093b4:	0804b9c0 	call	804b9c <__sfp_lock_acquire>
  8093b8:	8000030d 	sth	zero,12(r16)
  8093bc:	0804ba00 	call	804ba0 <__sfp_lock_release>
  8093c0:	9005883a 	mov	r2,r18
  8093c4:	003fdc06 	br	809338 <__alt_data_end+0xff809338>
  8093c8:	0804b8c0 	call	804b8c <__sinit>
  8093cc:	003fd706 	br	80932c <__alt_data_end+0xff80932c>
  8093d0:	04bfffc4 	movi	r18,-1
  8093d4:	003fe806 	br	809378 <__alt_data_end+0xff809378>
  8093d8:	81400417 	ldw	r5,16(r16)
  8093dc:	8809883a 	mov	r4,r17
  8093e0:	0804d000 	call	804d00 <_free_r>
  8093e4:	003fe706 	br	809384 <__alt_data_end+0xff809384>
  8093e8:	0005883a 	mov	r2,zero
  8093ec:	f800283a 	ret

008093f0 <fclose>:
  8093f0:	00802074 	movhi	r2,129
  8093f4:	1085f804 	addi	r2,r2,6112
  8093f8:	200b883a 	mov	r5,r4
  8093fc:	11000017 	ldw	r4,0(r2)
  809400:	08093001 	jmpi	809300 <_fclose_r>

00809404 <_fputwc_r>:
  809404:	3080030b 	ldhu	r2,12(r6)
  809408:	defff804 	addi	sp,sp,-32
  80940c:	dcc00415 	stw	r19,16(sp)
  809410:	dc800315 	stw	r18,12(sp)
  809414:	dc000115 	stw	r16,4(sp)
  809418:	dfc00715 	stw	ra,28(sp)
  80941c:	dd400615 	stw	r21,24(sp)
  809420:	dd000515 	stw	r20,20(sp)
  809424:	dc400215 	stw	r17,8(sp)
  809428:	10c8000c 	andi	r3,r2,8192
  80942c:	3021883a 	mov	r16,r6
  809430:	2027883a 	mov	r19,r4
  809434:	2825883a 	mov	r18,r5
  809438:	1800051e 	bne	r3,zero,809450 <_fputwc_r+0x4c>
  80943c:	30c01917 	ldw	r3,100(r6)
  809440:	10880014 	ori	r2,r2,8192
  809444:	3080030d 	sth	r2,12(r6)
  809448:	18880014 	ori	r2,r3,8192
  80944c:	30801915 	stw	r2,100(r6)
  809450:	08056c00 	call	8056c0 <__locale_mb_cur_max>
  809454:	00c00044 	movi	r3,1
  809458:	10c03e26 	beq	r2,r3,809554 <_fputwc_r+0x150>
  80945c:	9809883a 	mov	r4,r19
  809460:	d80b883a 	mov	r5,sp
  809464:	900d883a 	mov	r6,r18
  809468:	81c01704 	addi	r7,r16,92
  80946c:	080989c0 	call	80989c <_wcrtomb_r>
  809470:	1029883a 	mov	r20,r2
  809474:	00bfffc4 	movi	r2,-1
  809478:	a0802026 	beq	r20,r2,8094fc <_fputwc_r+0xf8>
  80947c:	d9400003 	ldbu	r5,0(sp)
  809480:	a0001c26 	beq	r20,zero,8094f4 <_fputwc_r+0xf0>
  809484:	0023883a 	mov	r17,zero
  809488:	05400284 	movi	r21,10
  80948c:	00000906 	br	8094b4 <_fputwc_r+0xb0>
  809490:	80800017 	ldw	r2,0(r16)
  809494:	11400005 	stb	r5,0(r2)
  809498:	80c00017 	ldw	r3,0(r16)
  80949c:	18c00044 	addi	r3,r3,1
  8094a0:	80c00015 	stw	r3,0(r16)
  8094a4:	8c400044 	addi	r17,r17,1
  8094a8:	dc45883a 	add	r2,sp,r17
  8094ac:	8d00112e 	bgeu	r17,r20,8094f4 <_fputwc_r+0xf0>
  8094b0:	11400003 	ldbu	r5,0(r2)
  8094b4:	80c00217 	ldw	r3,8(r16)
  8094b8:	18ffffc4 	addi	r3,r3,-1
  8094bc:	80c00215 	stw	r3,8(r16)
  8094c0:	183ff30e 	bge	r3,zero,809490 <__alt_data_end+0xff809490>
  8094c4:	80800617 	ldw	r2,24(r16)
  8094c8:	18801916 	blt	r3,r2,809530 <_fputwc_r+0x12c>
  8094cc:	80800017 	ldw	r2,0(r16)
  8094d0:	11400005 	stb	r5,0(r2)
  8094d4:	80800017 	ldw	r2,0(r16)
  8094d8:	10c00003 	ldbu	r3,0(r2)
  8094dc:	10800044 	addi	r2,r2,1
  8094e0:	1d402326 	beq	r3,r21,809570 <_fputwc_r+0x16c>
  8094e4:	80800015 	stw	r2,0(r16)
  8094e8:	8c400044 	addi	r17,r17,1
  8094ec:	dc45883a 	add	r2,sp,r17
  8094f0:	8d3fef36 	bltu	r17,r20,8094b0 <__alt_data_end+0xff8094b0>
  8094f4:	9005883a 	mov	r2,r18
  8094f8:	00000406 	br	80950c <_fputwc_r+0x108>
  8094fc:	80c0030b 	ldhu	r3,12(r16)
  809500:	a005883a 	mov	r2,r20
  809504:	18c01014 	ori	r3,r3,64
  809508:	80c0030d 	sth	r3,12(r16)
  80950c:	dfc00717 	ldw	ra,28(sp)
  809510:	dd400617 	ldw	r21,24(sp)
  809514:	dd000517 	ldw	r20,20(sp)
  809518:	dcc00417 	ldw	r19,16(sp)
  80951c:	dc800317 	ldw	r18,12(sp)
  809520:	dc400217 	ldw	r17,8(sp)
  809524:	dc000117 	ldw	r16,4(sp)
  809528:	dec00804 	addi	sp,sp,32
  80952c:	f800283a 	ret
  809530:	9809883a 	mov	r4,r19
  809534:	29403fcc 	andi	r5,r5,255
  809538:	800d883a 	mov	r6,r16
  80953c:	08097480 	call	809748 <__swbuf_r>
  809540:	10bfffe0 	cmpeqi	r2,r2,-1
  809544:	10803fcc 	andi	r2,r2,255
  809548:	103fd626 	beq	r2,zero,8094a4 <__alt_data_end+0xff8094a4>
  80954c:	00bfffc4 	movi	r2,-1
  809550:	003fee06 	br	80950c <__alt_data_end+0xff80950c>
  809554:	90ffffc4 	addi	r3,r18,-1
  809558:	01003f84 	movi	r4,254
  80955c:	20ffbf36 	bltu	r4,r3,80945c <__alt_data_end+0xff80945c>
  809560:	900b883a 	mov	r5,r18
  809564:	dc800005 	stb	r18,0(sp)
  809568:	1029883a 	mov	r20,r2
  80956c:	003fc506 	br	809484 <__alt_data_end+0xff809484>
  809570:	9809883a 	mov	r4,r19
  809574:	a80b883a 	mov	r5,r21
  809578:	800d883a 	mov	r6,r16
  80957c:	08097480 	call	809748 <__swbuf_r>
  809580:	10bfffe0 	cmpeqi	r2,r2,-1
  809584:	003fef06 	br	809544 <__alt_data_end+0xff809544>

00809588 <fputwc>:
  809588:	00802074 	movhi	r2,129
  80958c:	defffc04 	addi	sp,sp,-16
  809590:	1085f804 	addi	r2,r2,6112
  809594:	dc000115 	stw	r16,4(sp)
  809598:	14000017 	ldw	r16,0(r2)
  80959c:	dc400215 	stw	r17,8(sp)
  8095a0:	dfc00315 	stw	ra,12(sp)
  8095a4:	2023883a 	mov	r17,r4
  8095a8:	280d883a 	mov	r6,r5
  8095ac:	80000626 	beq	r16,zero,8095c8 <fputwc+0x40>
  8095b0:	80800e17 	ldw	r2,56(r16)
  8095b4:	1000041e 	bne	r2,zero,8095c8 <fputwc+0x40>
  8095b8:	8009883a 	mov	r4,r16
  8095bc:	d9400015 	stw	r5,0(sp)
  8095c0:	0804b8c0 	call	804b8c <__sinit>
  8095c4:	d9800017 	ldw	r6,0(sp)
  8095c8:	8009883a 	mov	r4,r16
  8095cc:	880b883a 	mov	r5,r17
  8095d0:	dfc00317 	ldw	ra,12(sp)
  8095d4:	dc400217 	ldw	r17,8(sp)
  8095d8:	dc000117 	ldw	r16,4(sp)
  8095dc:	dec00404 	addi	sp,sp,16
  8095e0:	08094041 	jmpi	809404 <_fputwc_r>

008095e4 <_fstat_r>:
  8095e4:	defffd04 	addi	sp,sp,-12
  8095e8:	dc000015 	stw	r16,0(sp)
  8095ec:	04002074 	movhi	r16,129
  8095f0:	dc400115 	stw	r17,4(sp)
  8095f4:	84095404 	addi	r16,r16,9552
  8095f8:	2023883a 	mov	r17,r4
  8095fc:	2809883a 	mov	r4,r5
  809600:	300b883a 	mov	r5,r6
  809604:	dfc00215 	stw	ra,8(sp)
  809608:	80000015 	stw	zero,0(r16)
  80960c:	080ce9c0 	call	80ce9c <fstat>
  809610:	00ffffc4 	movi	r3,-1
  809614:	10c00526 	beq	r2,r3,80962c <_fstat_r+0x48>
  809618:	dfc00217 	ldw	ra,8(sp)
  80961c:	dc400117 	ldw	r17,4(sp)
  809620:	dc000017 	ldw	r16,0(sp)
  809624:	dec00304 	addi	sp,sp,12
  809628:	f800283a 	ret
  80962c:	80c00017 	ldw	r3,0(r16)
  809630:	183ff926 	beq	r3,zero,809618 <__alt_data_end+0xff809618>
  809634:	88c00015 	stw	r3,0(r17)
  809638:	003ff706 	br	809618 <__alt_data_end+0xff809618>

0080963c <_isatty_r>:
  80963c:	defffd04 	addi	sp,sp,-12
  809640:	dc000015 	stw	r16,0(sp)
  809644:	04002074 	movhi	r16,129
  809648:	dc400115 	stw	r17,4(sp)
  80964c:	84095404 	addi	r16,r16,9552
  809650:	2023883a 	mov	r17,r4
  809654:	2809883a 	mov	r4,r5
  809658:	dfc00215 	stw	ra,8(sp)
  80965c:	80000015 	stw	zero,0(r16)
  809660:	080d14c0 	call	80d14c <isatty>
  809664:	00ffffc4 	movi	r3,-1
  809668:	10c00526 	beq	r2,r3,809680 <_isatty_r+0x44>
  80966c:	dfc00217 	ldw	ra,8(sp)
  809670:	dc400117 	ldw	r17,4(sp)
  809674:	dc000017 	ldw	r16,0(sp)
  809678:	dec00304 	addi	sp,sp,12
  80967c:	f800283a 	ret
  809680:	80c00017 	ldw	r3,0(r16)
  809684:	183ff926 	beq	r3,zero,80966c <__alt_data_end+0xff80966c>
  809688:	88c00015 	stw	r3,0(r17)
  80968c:	003ff706 	br	80966c <__alt_data_end+0xff80966c>

00809690 <_lseek_r>:
  809690:	defffd04 	addi	sp,sp,-12
  809694:	dc000015 	stw	r16,0(sp)
  809698:	04002074 	movhi	r16,129
  80969c:	dc400115 	stw	r17,4(sp)
  8096a0:	84095404 	addi	r16,r16,9552
  8096a4:	2023883a 	mov	r17,r4
  8096a8:	2809883a 	mov	r4,r5
  8096ac:	300b883a 	mov	r5,r6
  8096b0:	380d883a 	mov	r6,r7
  8096b4:	dfc00215 	stw	ra,8(sp)
  8096b8:	80000015 	stw	zero,0(r16)
  8096bc:	080d3240 	call	80d324 <lseek>
  8096c0:	00ffffc4 	movi	r3,-1
  8096c4:	10c00526 	beq	r2,r3,8096dc <_lseek_r+0x4c>
  8096c8:	dfc00217 	ldw	ra,8(sp)
  8096cc:	dc400117 	ldw	r17,4(sp)
  8096d0:	dc000017 	ldw	r16,0(sp)
  8096d4:	dec00304 	addi	sp,sp,12
  8096d8:	f800283a 	ret
  8096dc:	80c00017 	ldw	r3,0(r16)
  8096e0:	183ff926 	beq	r3,zero,8096c8 <__alt_data_end+0xff8096c8>
  8096e4:	88c00015 	stw	r3,0(r17)
  8096e8:	003ff706 	br	8096c8 <__alt_data_end+0xff8096c8>

008096ec <_read_r>:
  8096ec:	defffd04 	addi	sp,sp,-12
  8096f0:	dc000015 	stw	r16,0(sp)
  8096f4:	04002074 	movhi	r16,129
  8096f8:	dc400115 	stw	r17,4(sp)
  8096fc:	84095404 	addi	r16,r16,9552
  809700:	2023883a 	mov	r17,r4
  809704:	2809883a 	mov	r4,r5
  809708:	300b883a 	mov	r5,r6
  80970c:	380d883a 	mov	r6,r7
  809710:	dfc00215 	stw	ra,8(sp)
  809714:	80000015 	stw	zero,0(r16)
  809718:	080d5000 	call	80d500 <read>
  80971c:	00ffffc4 	movi	r3,-1
  809720:	10c00526 	beq	r2,r3,809738 <_read_r+0x4c>
  809724:	dfc00217 	ldw	ra,8(sp)
  809728:	dc400117 	ldw	r17,4(sp)
  80972c:	dc000017 	ldw	r16,0(sp)
  809730:	dec00304 	addi	sp,sp,12
  809734:	f800283a 	ret
  809738:	80c00017 	ldw	r3,0(r16)
  80973c:	183ff926 	beq	r3,zero,809724 <__alt_data_end+0xff809724>
  809740:	88c00015 	stw	r3,0(r17)
  809744:	003ff706 	br	809724 <__alt_data_end+0xff809724>

00809748 <__swbuf_r>:
  809748:	defffc04 	addi	sp,sp,-16
  80974c:	dc800215 	stw	r18,8(sp)
  809750:	dc400115 	stw	r17,4(sp)
  809754:	dc000015 	stw	r16,0(sp)
  809758:	dfc00315 	stw	ra,12(sp)
  80975c:	2025883a 	mov	r18,r4
  809760:	2823883a 	mov	r17,r5
  809764:	3021883a 	mov	r16,r6
  809768:	20000226 	beq	r4,zero,809774 <__swbuf_r+0x2c>
  80976c:	20800e17 	ldw	r2,56(r4)
  809770:	10004126 	beq	r2,zero,809878 <__swbuf_r+0x130>
  809774:	80c00617 	ldw	r3,24(r16)
  809778:	8180030b 	ldhu	r6,12(r16)
  80977c:	80c00215 	stw	r3,8(r16)
  809780:	30c0020c 	andi	r3,r6,8
  809784:	18003526 	beq	r3,zero,80985c <__swbuf_r+0x114>
  809788:	80c00417 	ldw	r3,16(r16)
  80978c:	18003326 	beq	r3,zero,80985c <__swbuf_r+0x114>
  809790:	3088000c 	andi	r2,r6,8192
  809794:	8c403fcc 	andi	r17,r17,255
  809798:	10001726 	beq	r2,zero,8097f8 <__swbuf_r+0xb0>
  80979c:	80800017 	ldw	r2,0(r16)
  8097a0:	81000517 	ldw	r4,20(r16)
  8097a4:	10c7c83a 	sub	r3,r2,r3
  8097a8:	19001d0e 	bge	r3,r4,809820 <__swbuf_r+0xd8>
  8097ac:	18c00044 	addi	r3,r3,1
  8097b0:	81400217 	ldw	r5,8(r16)
  8097b4:	11000044 	addi	r4,r2,1
  8097b8:	81000015 	stw	r4,0(r16)
  8097bc:	297fffc4 	addi	r5,r5,-1
  8097c0:	81400215 	stw	r5,8(r16)
  8097c4:	14400005 	stb	r17,0(r2)
  8097c8:	80800517 	ldw	r2,20(r16)
  8097cc:	10c01d26 	beq	r2,r3,809844 <__swbuf_r+0xfc>
  8097d0:	8080030b 	ldhu	r2,12(r16)
  8097d4:	1080004c 	andi	r2,r2,1
  8097d8:	1000181e 	bne	r2,zero,80983c <__swbuf_r+0xf4>
  8097dc:	8805883a 	mov	r2,r17
  8097e0:	dfc00317 	ldw	ra,12(sp)
  8097e4:	dc800217 	ldw	r18,8(sp)
  8097e8:	dc400117 	ldw	r17,4(sp)
  8097ec:	dc000017 	ldw	r16,0(sp)
  8097f0:	dec00404 	addi	sp,sp,16
  8097f4:	f800283a 	ret
  8097f8:	81001917 	ldw	r4,100(r16)
  8097fc:	00b7ffc4 	movi	r2,-8193
  809800:	31880014 	ori	r6,r6,8192
  809804:	2084703a 	and	r2,r4,r2
  809808:	80801915 	stw	r2,100(r16)
  80980c:	80800017 	ldw	r2,0(r16)
  809810:	81000517 	ldw	r4,20(r16)
  809814:	8180030d 	sth	r6,12(r16)
  809818:	10c7c83a 	sub	r3,r2,r3
  80981c:	193fe316 	blt	r3,r4,8097ac <__alt_data_end+0xff8097ac>
  809820:	9009883a 	mov	r4,r18
  809824:	800b883a 	mov	r5,r16
  809828:	08047b00 	call	8047b0 <_fflush_r>
  80982c:	1000091e 	bne	r2,zero,809854 <__swbuf_r+0x10c>
  809830:	80800017 	ldw	r2,0(r16)
  809834:	00c00044 	movi	r3,1
  809838:	003fdd06 	br	8097b0 <__alt_data_end+0xff8097b0>
  80983c:	00800284 	movi	r2,10
  809840:	88bfe61e 	bne	r17,r2,8097dc <__alt_data_end+0xff8097dc>
  809844:	9009883a 	mov	r4,r18
  809848:	800b883a 	mov	r5,r16
  80984c:	08047b00 	call	8047b0 <_fflush_r>
  809850:	103fe226 	beq	r2,zero,8097dc <__alt_data_end+0xff8097dc>
  809854:	00bfffc4 	movi	r2,-1
  809858:	003fe106 	br	8097e0 <__alt_data_end+0xff8097e0>
  80985c:	9009883a 	mov	r4,r18
  809860:	800b883a 	mov	r5,r16
  809864:	0802b2c0 	call	802b2c <__swsetup_r>
  809868:	103ffa1e 	bne	r2,zero,809854 <__alt_data_end+0xff809854>
  80986c:	8180030b 	ldhu	r6,12(r16)
  809870:	80c00417 	ldw	r3,16(r16)
  809874:	003fc606 	br	809790 <__alt_data_end+0xff809790>
  809878:	0804b8c0 	call	804b8c <__sinit>
  80987c:	003fbd06 	br	809774 <__alt_data_end+0xff809774>

00809880 <__swbuf>:
  809880:	00c02074 	movhi	r3,129
  809884:	18c5f804 	addi	r3,r3,6112
  809888:	2005883a 	mov	r2,r4
  80988c:	19000017 	ldw	r4,0(r3)
  809890:	280d883a 	mov	r6,r5
  809894:	100b883a 	mov	r5,r2
  809898:	08097481 	jmpi	809748 <__swbuf_r>

0080989c <_wcrtomb_r>:
  80989c:	defff604 	addi	sp,sp,-40
  8098a0:	00802074 	movhi	r2,129
  8098a4:	dc800815 	stw	r18,32(sp)
  8098a8:	dc400715 	stw	r17,28(sp)
  8098ac:	dc000615 	stw	r16,24(sp)
  8098b0:	1085fc04 	addi	r2,r2,6128
  8098b4:	dfc00915 	stw	ra,36(sp)
  8098b8:	2021883a 	mov	r16,r4
  8098bc:	3823883a 	mov	r17,r7
  8098c0:	14800017 	ldw	r18,0(r2)
  8098c4:	28001426 	beq	r5,zero,809918 <_wcrtomb_r+0x7c>
  8098c8:	d9400415 	stw	r5,16(sp)
  8098cc:	d9800515 	stw	r6,20(sp)
  8098d0:	08056b40 	call	8056b4 <__locale_charset>
  8098d4:	d9400417 	ldw	r5,16(sp)
  8098d8:	d9800517 	ldw	r6,20(sp)
  8098dc:	8009883a 	mov	r4,r16
  8098e0:	dc400015 	stw	r17,0(sp)
  8098e4:	100f883a 	mov	r7,r2
  8098e8:	903ee83a 	callr	r18
  8098ec:	00ffffc4 	movi	r3,-1
  8098f0:	10c0031e 	bne	r2,r3,809900 <_wcrtomb_r+0x64>
  8098f4:	88000015 	stw	zero,0(r17)
  8098f8:	00c02284 	movi	r3,138
  8098fc:	80c00015 	stw	r3,0(r16)
  809900:	dfc00917 	ldw	ra,36(sp)
  809904:	dc800817 	ldw	r18,32(sp)
  809908:	dc400717 	ldw	r17,28(sp)
  80990c:	dc000617 	ldw	r16,24(sp)
  809910:	dec00a04 	addi	sp,sp,40
  809914:	f800283a 	ret
  809918:	08056b40 	call	8056b4 <__locale_charset>
  80991c:	8009883a 	mov	r4,r16
  809920:	dc400015 	stw	r17,0(sp)
  809924:	d9400104 	addi	r5,sp,4
  809928:	000d883a 	mov	r6,zero
  80992c:	100f883a 	mov	r7,r2
  809930:	903ee83a 	callr	r18
  809934:	003fed06 	br	8098ec <__alt_data_end+0xff8098ec>

00809938 <wcrtomb>:
  809938:	defff604 	addi	sp,sp,-40
  80993c:	00802074 	movhi	r2,129
  809940:	dc800615 	stw	r18,24(sp)
  809944:	dc400515 	stw	r17,20(sp)
  809948:	dc000415 	stw	r16,16(sp)
  80994c:	1085f804 	addi	r2,r2,6112
  809950:	dfc00915 	stw	ra,36(sp)
  809954:	dd000815 	stw	r20,32(sp)
  809958:	dcc00715 	stw	r19,28(sp)
  80995c:	2021883a 	mov	r16,r4
  809960:	3025883a 	mov	r18,r6
  809964:	14400017 	ldw	r17,0(r2)
  809968:	20001826 	beq	r4,zero,8099cc <wcrtomb+0x94>
  80996c:	00802074 	movhi	r2,129
  809970:	1085fc04 	addi	r2,r2,6128
  809974:	15000017 	ldw	r20,0(r2)
  809978:	2827883a 	mov	r19,r5
  80997c:	08056b40 	call	8056b4 <__locale_charset>
  809980:	8809883a 	mov	r4,r17
  809984:	dc800015 	stw	r18,0(sp)
  809988:	800b883a 	mov	r5,r16
  80998c:	980d883a 	mov	r6,r19
  809990:	100f883a 	mov	r7,r2
  809994:	a03ee83a 	callr	r20
  809998:	00ffffc4 	movi	r3,-1
  80999c:	10c0031e 	bne	r2,r3,8099ac <wcrtomb+0x74>
  8099a0:	90000015 	stw	zero,0(r18)
  8099a4:	00c02284 	movi	r3,138
  8099a8:	88c00015 	stw	r3,0(r17)
  8099ac:	dfc00917 	ldw	ra,36(sp)
  8099b0:	dd000817 	ldw	r20,32(sp)
  8099b4:	dcc00717 	ldw	r19,28(sp)
  8099b8:	dc800617 	ldw	r18,24(sp)
  8099bc:	dc400517 	ldw	r17,20(sp)
  8099c0:	dc000417 	ldw	r16,16(sp)
  8099c4:	dec00a04 	addi	sp,sp,40
  8099c8:	f800283a 	ret
  8099cc:	00802074 	movhi	r2,129
  8099d0:	1085fc04 	addi	r2,r2,6128
  8099d4:	14000017 	ldw	r16,0(r2)
  8099d8:	08056b40 	call	8056b4 <__locale_charset>
  8099dc:	8809883a 	mov	r4,r17
  8099e0:	dc800015 	stw	r18,0(sp)
  8099e4:	d9400104 	addi	r5,sp,4
  8099e8:	000d883a 	mov	r6,zero
  8099ec:	100f883a 	mov	r7,r2
  8099f0:	803ee83a 	callr	r16
  8099f4:	003fe806 	br	809998 <__alt_data_end+0xff809998>

008099f8 <__ascii_wctomb>:
  8099f8:	28000526 	beq	r5,zero,809a10 <__ascii_wctomb+0x18>
  8099fc:	00803fc4 	movi	r2,255
  809a00:	11800536 	bltu	r2,r6,809a18 <__ascii_wctomb+0x20>
  809a04:	29800005 	stb	r6,0(r5)
  809a08:	00800044 	movi	r2,1
  809a0c:	f800283a 	ret
  809a10:	0005883a 	mov	r2,zero
  809a14:	f800283a 	ret
  809a18:	00802284 	movi	r2,138
  809a1c:	20800015 	stw	r2,0(r4)
  809a20:	00bfffc4 	movi	r2,-1
  809a24:	f800283a 	ret

00809a28 <_wctomb_r>:
  809a28:	00802074 	movhi	r2,129
  809a2c:	defff904 	addi	sp,sp,-28
  809a30:	1085fc04 	addi	r2,r2,6128
  809a34:	dfc00615 	stw	ra,24(sp)
  809a38:	dc400515 	stw	r17,20(sp)
  809a3c:	dc000415 	stw	r16,16(sp)
  809a40:	3823883a 	mov	r17,r7
  809a44:	14000017 	ldw	r16,0(r2)
  809a48:	d9000115 	stw	r4,4(sp)
  809a4c:	d9400215 	stw	r5,8(sp)
  809a50:	d9800315 	stw	r6,12(sp)
  809a54:	08056b40 	call	8056b4 <__locale_charset>
  809a58:	d9000117 	ldw	r4,4(sp)
  809a5c:	d9400217 	ldw	r5,8(sp)
  809a60:	d9800317 	ldw	r6,12(sp)
  809a64:	dc400015 	stw	r17,0(sp)
  809a68:	100f883a 	mov	r7,r2
  809a6c:	803ee83a 	callr	r16
  809a70:	dfc00617 	ldw	ra,24(sp)
  809a74:	dc400517 	ldw	r17,20(sp)
  809a78:	dc000417 	ldw	r16,16(sp)
  809a7c:	dec00704 	addi	sp,sp,28
  809a80:	f800283a 	ret

00809a84 <__udivdi3>:
  809a84:	defff504 	addi	sp,sp,-44
  809a88:	dcc00415 	stw	r19,16(sp)
  809a8c:	dc000115 	stw	r16,4(sp)
  809a90:	dfc00a15 	stw	ra,40(sp)
  809a94:	df000915 	stw	fp,36(sp)
  809a98:	ddc00815 	stw	r23,32(sp)
  809a9c:	dd800715 	stw	r22,28(sp)
  809aa0:	dd400615 	stw	r21,24(sp)
  809aa4:	dd000515 	stw	r20,20(sp)
  809aa8:	dc800315 	stw	r18,12(sp)
  809aac:	dc400215 	stw	r17,8(sp)
  809ab0:	2027883a 	mov	r19,r4
  809ab4:	2821883a 	mov	r16,r5
  809ab8:	3800421e 	bne	r7,zero,809bc4 <__udivdi3+0x140>
  809abc:	3025883a 	mov	r18,r6
  809ac0:	2023883a 	mov	r17,r4
  809ac4:	2980542e 	bgeu	r5,r6,809c18 <__udivdi3+0x194>
  809ac8:	00bfffd4 	movui	r2,65535
  809acc:	282d883a 	mov	r22,r5
  809ad0:	1180a836 	bltu	r2,r6,809d74 <__udivdi3+0x2f0>
  809ad4:	00803fc4 	movi	r2,255
  809ad8:	1181422e 	bgeu	r2,r6,809fe4 <__udivdi3+0x560>
  809adc:	00800204 	movi	r2,8
  809ae0:	1007883a 	mov	r3,r2
  809ae4:	3084d83a 	srl	r2,r6,r2
  809ae8:	01002074 	movhi	r4,129
  809aec:	2101c604 	addi	r4,r4,1816
  809af0:	2085883a 	add	r2,r4,r2
  809af4:	10800003 	ldbu	r2,0(r2)
  809af8:	10c7883a 	add	r3,r2,r3
  809afc:	00800804 	movi	r2,32
  809b00:	10c5c83a 	sub	r2,r2,r3
  809b04:	10000526 	beq	r2,zero,809b1c <__udivdi3+0x98>
  809b08:	80a0983a 	sll	r16,r16,r2
  809b0c:	98c6d83a 	srl	r3,r19,r3
  809b10:	30a4983a 	sll	r18,r6,r2
  809b14:	98a2983a 	sll	r17,r19,r2
  809b18:	80ecb03a 	or	r22,r16,r3
  809b1c:	902ad43a 	srli	r21,r18,16
  809b20:	b009883a 	mov	r4,r22
  809b24:	953fffcc 	andi	r20,r18,65535
  809b28:	a80b883a 	mov	r5,r21
  809b2c:	080a6f80 	call	80a6f8 <__umodsi3>
  809b30:	b009883a 	mov	r4,r22
  809b34:	a80b883a 	mov	r5,r21
  809b38:	1027883a 	mov	r19,r2
  809b3c:	080a6f00 	call	80a6f0 <__udivsi3>
  809b40:	1021883a 	mov	r16,r2
  809b44:	8806d43a 	srli	r3,r17,16
  809b48:	9804943a 	slli	r2,r19,16
  809b4c:	8527383a 	mul	r19,r16,r20
  809b50:	10c4b03a 	or	r2,r2,r3
  809b54:	14c0052e 	bgeu	r2,r19,809b6c <__udivdi3+0xe8>
  809b58:	1485883a 	add	r2,r2,r18
  809b5c:	80ffffc4 	addi	r3,r16,-1
  809b60:	14800136 	bltu	r2,r18,809b68 <__udivdi3+0xe4>
  809b64:	14c13436 	bltu	r2,r19,80a038 <__udivdi3+0x5b4>
  809b68:	1821883a 	mov	r16,r3
  809b6c:	14e7c83a 	sub	r19,r2,r19
  809b70:	9809883a 	mov	r4,r19
  809b74:	a80b883a 	mov	r5,r21
  809b78:	080a6f80 	call	80a6f8 <__umodsi3>
  809b7c:	102d883a 	mov	r22,r2
  809b80:	9809883a 	mov	r4,r19
  809b84:	a80b883a 	mov	r5,r21
  809b88:	080a6f00 	call	80a6f0 <__udivsi3>
  809b8c:	b02c943a 	slli	r22,r22,16
  809b90:	1529383a 	mul	r20,r2,r20
  809b94:	8c7fffcc 	andi	r17,r17,65535
  809b98:	b462b03a 	or	r17,r22,r17
  809b9c:	8d00052e 	bgeu	r17,r20,809bb4 <__udivdi3+0x130>
  809ba0:	8ca3883a 	add	r17,r17,r18
  809ba4:	10ffffc4 	addi	r3,r2,-1
  809ba8:	8c80f636 	bltu	r17,r18,809f84 <__udivdi3+0x500>
  809bac:	8d00f52e 	bgeu	r17,r20,809f84 <__udivdi3+0x500>
  809bb0:	10bfff84 	addi	r2,r2,-2
  809bb4:	8020943a 	slli	r16,r16,16
  809bb8:	0007883a 	mov	r3,zero
  809bbc:	1404b03a 	or	r2,r2,r16
  809bc0:	00005b06 	br	809d30 <__udivdi3+0x2ac>
  809bc4:	29c05836 	bltu	r5,r7,809d28 <__udivdi3+0x2a4>
  809bc8:	00bfffd4 	movui	r2,65535
  809bcc:	11c0642e 	bgeu	r2,r7,809d60 <__udivdi3+0x2dc>
  809bd0:	00804034 	movhi	r2,256
  809bd4:	10bfffc4 	addi	r2,r2,-1
  809bd8:	11c0f32e 	bgeu	r2,r7,809fa8 <__udivdi3+0x524>
  809bdc:	00c00604 	movi	r3,24
  809be0:	180b883a 	mov	r5,r3
  809be4:	38c6d83a 	srl	r3,r7,r3
  809be8:	00802074 	movhi	r2,129
  809bec:	1081c604 	addi	r2,r2,1816
  809bf0:	10c7883a 	add	r3,r2,r3
  809bf4:	18c00003 	ldbu	r3,0(r3)
  809bf8:	01000804 	movi	r4,32
  809bfc:	1947883a 	add	r3,r3,r5
  809c00:	20e5c83a 	sub	r18,r4,r3
  809c04:	9000661e 	bne	r18,zero,809da0 <__udivdi3+0x31c>
  809c08:	3c00f936 	bltu	r7,r16,809ff0 <__udivdi3+0x56c>
  809c0c:	9985403a 	cmpgeu	r2,r19,r6
  809c10:	0007883a 	mov	r3,zero
  809c14:	00004606 	br	809d30 <__udivdi3+0x2ac>
  809c18:	3000041e 	bne	r6,zero,809c2c <__udivdi3+0x1a8>
  809c1c:	01000044 	movi	r4,1
  809c20:	000b883a 	mov	r5,zero
  809c24:	080a6f00 	call	80a6f0 <__udivsi3>
  809c28:	1025883a 	mov	r18,r2
  809c2c:	00bfffd4 	movui	r2,65535
  809c30:	1480562e 	bgeu	r2,r18,809d8c <__udivdi3+0x308>
  809c34:	00804034 	movhi	r2,256
  809c38:	10bfffc4 	addi	r2,r2,-1
  809c3c:	1480e32e 	bgeu	r2,r18,809fcc <__udivdi3+0x548>
  809c40:	00800604 	movi	r2,24
  809c44:	1007883a 	mov	r3,r2
  809c48:	9084d83a 	srl	r2,r18,r2
  809c4c:	01002074 	movhi	r4,129
  809c50:	2101c604 	addi	r4,r4,1816
  809c54:	2085883a 	add	r2,r4,r2
  809c58:	10800003 	ldbu	r2,0(r2)
  809c5c:	10c5883a 	add	r2,r2,r3
  809c60:	00c00804 	movi	r3,32
  809c64:	1887c83a 	sub	r3,r3,r2
  809c68:	1800911e 	bne	r3,zero,809eb0 <__udivdi3+0x42c>
  809c6c:	9028d43a 	srli	r20,r18,16
  809c70:	84a1c83a 	sub	r16,r16,r18
  809c74:	957fffcc 	andi	r21,r18,65535
  809c78:	00c00044 	movi	r3,1
  809c7c:	8009883a 	mov	r4,r16
  809c80:	a00b883a 	mov	r5,r20
  809c84:	d8c00015 	stw	r3,0(sp)
  809c88:	080a6f80 	call	80a6f8 <__umodsi3>
  809c8c:	8009883a 	mov	r4,r16
  809c90:	a00b883a 	mov	r5,r20
  809c94:	1027883a 	mov	r19,r2
  809c98:	080a6f00 	call	80a6f0 <__udivsi3>
  809c9c:	1021883a 	mov	r16,r2
  809ca0:	880cd43a 	srli	r6,r17,16
  809ca4:	9804943a 	slli	r2,r19,16
  809ca8:	8567383a 	mul	r19,r16,r21
  809cac:	d8c00017 	ldw	r3,0(sp)
  809cb0:	1188b03a 	or	r4,r2,r6
  809cb4:	24c0052e 	bgeu	r4,r19,809ccc <__udivdi3+0x248>
  809cb8:	2489883a 	add	r4,r4,r18
  809cbc:	80bfffc4 	addi	r2,r16,-1
  809cc0:	24800136 	bltu	r4,r18,809cc8 <__udivdi3+0x244>
  809cc4:	24c0d936 	bltu	r4,r19,80a02c <__udivdi3+0x5a8>
  809cc8:	1021883a 	mov	r16,r2
  809ccc:	24e7c83a 	sub	r19,r4,r19
  809cd0:	9809883a 	mov	r4,r19
  809cd4:	a00b883a 	mov	r5,r20
  809cd8:	d8c00015 	stw	r3,0(sp)
  809cdc:	080a6f80 	call	80a6f8 <__umodsi3>
  809ce0:	102d883a 	mov	r22,r2
  809ce4:	9809883a 	mov	r4,r19
  809ce8:	a00b883a 	mov	r5,r20
  809cec:	080a6f00 	call	80a6f0 <__udivsi3>
  809cf0:	b02c943a 	slli	r22,r22,16
  809cf4:	156b383a 	mul	r21,r2,r21
  809cf8:	8c7fffcc 	andi	r17,r17,65535
  809cfc:	b462b03a 	or	r17,r22,r17
  809d00:	d8c00017 	ldw	r3,0(sp)
  809d04:	8d40052e 	bgeu	r17,r21,809d1c <__udivdi3+0x298>
  809d08:	8ca3883a 	add	r17,r17,r18
  809d0c:	113fffc4 	addi	r4,r2,-1
  809d10:	8c809a36 	bltu	r17,r18,809f7c <__udivdi3+0x4f8>
  809d14:	8d40992e 	bgeu	r17,r21,809f7c <__udivdi3+0x4f8>
  809d18:	10bfff84 	addi	r2,r2,-2
  809d1c:	8020943a 	slli	r16,r16,16
  809d20:	1404b03a 	or	r2,r2,r16
  809d24:	00000206 	br	809d30 <__udivdi3+0x2ac>
  809d28:	0007883a 	mov	r3,zero
  809d2c:	0005883a 	mov	r2,zero
  809d30:	dfc00a17 	ldw	ra,40(sp)
  809d34:	df000917 	ldw	fp,36(sp)
  809d38:	ddc00817 	ldw	r23,32(sp)
  809d3c:	dd800717 	ldw	r22,28(sp)
  809d40:	dd400617 	ldw	r21,24(sp)
  809d44:	dd000517 	ldw	r20,20(sp)
  809d48:	dcc00417 	ldw	r19,16(sp)
  809d4c:	dc800317 	ldw	r18,12(sp)
  809d50:	dc400217 	ldw	r17,8(sp)
  809d54:	dc000117 	ldw	r16,4(sp)
  809d58:	dec00b04 	addi	sp,sp,44
  809d5c:	f800283a 	ret
  809d60:	00803fc4 	movi	r2,255
  809d64:	11c0932e 	bgeu	r2,r7,809fb4 <__udivdi3+0x530>
  809d68:	00c00204 	movi	r3,8
  809d6c:	180b883a 	mov	r5,r3
  809d70:	003f9c06 	br	809be4 <__alt_data_end+0xff809be4>
  809d74:	00804034 	movhi	r2,256
  809d78:	10bfffc4 	addi	r2,r2,-1
  809d7c:	1180902e 	bgeu	r2,r6,809fc0 <__udivdi3+0x53c>
  809d80:	00800604 	movi	r2,24
  809d84:	1007883a 	mov	r3,r2
  809d88:	003f5606 	br	809ae4 <__alt_data_end+0xff809ae4>
  809d8c:	00803fc4 	movi	r2,255
  809d90:	1480912e 	bgeu	r2,r18,809fd8 <__udivdi3+0x554>
  809d94:	00800204 	movi	r2,8
  809d98:	1007883a 	mov	r3,r2
  809d9c:	003faa06 	br	809c48 <__alt_data_end+0xff809c48>
  809da0:	30eed83a 	srl	r23,r6,r3
  809da4:	3c8e983a 	sll	r7,r7,r18
  809da8:	80f8d83a 	srl	fp,r16,r3
  809dac:	98c6d83a 	srl	r3,r19,r3
  809db0:	3deeb03a 	or	r23,r7,r23
  809db4:	b828d43a 	srli	r20,r23,16
  809db8:	84a0983a 	sll	r16,r16,r18
  809dbc:	e009883a 	mov	r4,fp
  809dc0:	a00b883a 	mov	r5,r20
  809dc4:	80e2b03a 	or	r17,r16,r3
  809dc8:	34aa983a 	sll	r21,r6,r18
  809dcc:	080a6f80 	call	80a6f8 <__umodsi3>
  809dd0:	e009883a 	mov	r4,fp
  809dd4:	a00b883a 	mov	r5,r20
  809dd8:	102d883a 	mov	r22,r2
  809ddc:	080a6f00 	call	80a6f0 <__udivsi3>
  809de0:	1021883a 	mov	r16,r2
  809de4:	bf3fffcc 	andi	fp,r23,65535
  809de8:	b004943a 	slli	r2,r22,16
  809dec:	8808d43a 	srli	r4,r17,16
  809df0:	872d383a 	mul	r22,r16,fp
  809df4:	1104b03a 	or	r2,r2,r4
  809df8:	1580042e 	bgeu	r2,r22,809e0c <__udivdi3+0x388>
  809dfc:	15c5883a 	add	r2,r2,r23
  809e00:	80ffffc4 	addi	r3,r16,-1
  809e04:	15c0812e 	bgeu	r2,r23,80a00c <__udivdi3+0x588>
  809e08:	1821883a 	mov	r16,r3
  809e0c:	15adc83a 	sub	r22,r2,r22
  809e10:	b009883a 	mov	r4,r22
  809e14:	a00b883a 	mov	r5,r20
  809e18:	080a6f80 	call	80a6f8 <__umodsi3>
  809e1c:	a00b883a 	mov	r5,r20
  809e20:	b009883a 	mov	r4,r22
  809e24:	d8800015 	stw	r2,0(sp)
  809e28:	080a6f00 	call	80a6f0 <__udivsi3>
  809e2c:	d8c00017 	ldw	r3,0(sp)
  809e30:	170b383a 	mul	r5,r2,fp
  809e34:	8c7fffcc 	andi	r17,r17,65535
  809e38:	1806943a 	slli	r3,r3,16
  809e3c:	1c46b03a 	or	r3,r3,r17
  809e40:	1940042e 	bgeu	r3,r5,809e54 <__udivdi3+0x3d0>
  809e44:	1dc7883a 	add	r3,r3,r23
  809e48:	113fffc4 	addi	r4,r2,-1
  809e4c:	1dc06b2e 	bgeu	r3,r23,809ffc <__udivdi3+0x578>
  809e50:	2005883a 	mov	r2,r4
  809e54:	8020943a 	slli	r16,r16,16
  809e58:	a9ffffcc 	andi	r7,r21,65535
  809e5c:	a82ad43a 	srli	r21,r21,16
  809e60:	1404b03a 	or	r2,r2,r16
  809e64:	113fffcc 	andi	r4,r2,65535
  809e68:	100cd43a 	srli	r6,r2,16
  809e6c:	21d3383a 	mul	r9,r4,r7
  809e70:	2549383a 	mul	r4,r4,r21
  809e74:	31cf383a 	mul	r7,r6,r7
  809e78:	4810d43a 	srli	r8,r9,16
  809e7c:	1947c83a 	sub	r3,r3,r5
  809e80:	3909883a 	add	r4,r7,r4
  809e84:	2209883a 	add	r4,r4,r8
  809e88:	354d383a 	mul	r6,r6,r21
  809e8c:	21c0022e 	bgeu	r4,r7,809e98 <__udivdi3+0x414>
  809e90:	01400074 	movhi	r5,1
  809e94:	314d883a 	add	r6,r6,r5
  809e98:	202ad43a 	srli	r21,r4,16
  809e9c:	354d883a 	add	r6,r6,r21
  809ea0:	19803f36 	bltu	r3,r6,809fa0 <__udivdi3+0x51c>
  809ea4:	19803926 	beq	r3,r6,809f8c <__udivdi3+0x508>
  809ea8:	0007883a 	mov	r3,zero
  809eac:	003fa006 	br	809d30 <__alt_data_end+0xff809d30>
  809eb0:	90e4983a 	sll	r18,r18,r3
  809eb4:	80aad83a 	srl	r21,r16,r2
  809eb8:	80e0983a 	sll	r16,r16,r3
  809ebc:	9028d43a 	srli	r20,r18,16
  809ec0:	9884d83a 	srl	r2,r19,r2
  809ec4:	a809883a 	mov	r4,r21
  809ec8:	a00b883a 	mov	r5,r20
  809ecc:	80acb03a 	or	r22,r16,r2
  809ed0:	98e2983a 	sll	r17,r19,r3
  809ed4:	080a6f80 	call	80a6f8 <__umodsi3>
  809ed8:	a809883a 	mov	r4,r21
  809edc:	a00b883a 	mov	r5,r20
  809ee0:	1021883a 	mov	r16,r2
  809ee4:	080a6f00 	call	80a6f0 <__udivsi3>
  809ee8:	957fffcc 	andi	r21,r18,65535
  809eec:	8020943a 	slli	r16,r16,16
  809ef0:	b00ad43a 	srli	r5,r22,16
  809ef4:	1567383a 	mul	r19,r2,r21
  809ef8:	102f883a 	mov	r23,r2
  809efc:	8148b03a 	or	r4,r16,r5
  809f00:	24c0062e 	bgeu	r4,r19,809f1c <__udivdi3+0x498>
  809f04:	2489883a 	add	r4,r4,r18
  809f08:	10bfffc4 	addi	r2,r2,-1
  809f0c:	24804536 	bltu	r4,r18,80a024 <__udivdi3+0x5a0>
  809f10:	24c0442e 	bgeu	r4,r19,80a024 <__udivdi3+0x5a0>
  809f14:	bdffff84 	addi	r23,r23,-2
  809f18:	2489883a 	add	r4,r4,r18
  809f1c:	24e7c83a 	sub	r19,r4,r19
  809f20:	9809883a 	mov	r4,r19
  809f24:	a00b883a 	mov	r5,r20
  809f28:	080a6f80 	call	80a6f8 <__umodsi3>
  809f2c:	1021883a 	mov	r16,r2
  809f30:	9809883a 	mov	r4,r19
  809f34:	a00b883a 	mov	r5,r20
  809f38:	080a6f00 	call	80a6f0 <__udivsi3>
  809f3c:	8020943a 	slli	r16,r16,16
  809f40:	1007883a 	mov	r3,r2
  809f44:	1545383a 	mul	r2,r2,r21
  809f48:	b13fffcc 	andi	r4,r22,65535
  809f4c:	8108b03a 	or	r4,r16,r4
  809f50:	2080062e 	bgeu	r4,r2,809f6c <__udivdi3+0x4e8>
  809f54:	2489883a 	add	r4,r4,r18
  809f58:	197fffc4 	addi	r5,r3,-1
  809f5c:	24802f36 	bltu	r4,r18,80a01c <__udivdi3+0x598>
  809f60:	20802e2e 	bgeu	r4,r2,80a01c <__udivdi3+0x598>
  809f64:	18ffff84 	addi	r3,r3,-2
  809f68:	2489883a 	add	r4,r4,r18
  809f6c:	b82e943a 	slli	r23,r23,16
  809f70:	20a1c83a 	sub	r16,r4,r2
  809f74:	1dc6b03a 	or	r3,r3,r23
  809f78:	003f4006 	br	809c7c <__alt_data_end+0xff809c7c>
  809f7c:	2005883a 	mov	r2,r4
  809f80:	003f6606 	br	809d1c <__alt_data_end+0xff809d1c>
  809f84:	1805883a 	mov	r2,r3
  809f88:	003f0a06 	br	809bb4 <__alt_data_end+0xff809bb4>
  809f8c:	2006943a 	slli	r3,r4,16
  809f90:	9c88983a 	sll	r4,r19,r18
  809f94:	4a7fffcc 	andi	r9,r9,65535
  809f98:	1a47883a 	add	r3,r3,r9
  809f9c:	20ffc22e 	bgeu	r4,r3,809ea8 <__alt_data_end+0xff809ea8>
  809fa0:	10bfffc4 	addi	r2,r2,-1
  809fa4:	003fc006 	br	809ea8 <__alt_data_end+0xff809ea8>
  809fa8:	00c00404 	movi	r3,16
  809fac:	180b883a 	mov	r5,r3
  809fb0:	003f0c06 	br	809be4 <__alt_data_end+0xff809be4>
  809fb4:	0007883a 	mov	r3,zero
  809fb8:	000b883a 	mov	r5,zero
  809fbc:	003f0906 	br	809be4 <__alt_data_end+0xff809be4>
  809fc0:	00800404 	movi	r2,16
  809fc4:	1007883a 	mov	r3,r2
  809fc8:	003ec606 	br	809ae4 <__alt_data_end+0xff809ae4>
  809fcc:	00800404 	movi	r2,16
  809fd0:	1007883a 	mov	r3,r2
  809fd4:	003f1c06 	br	809c48 <__alt_data_end+0xff809c48>
  809fd8:	0005883a 	mov	r2,zero
  809fdc:	0007883a 	mov	r3,zero
  809fe0:	003f1906 	br	809c48 <__alt_data_end+0xff809c48>
  809fe4:	0005883a 	mov	r2,zero
  809fe8:	0007883a 	mov	r3,zero
  809fec:	003ebd06 	br	809ae4 <__alt_data_end+0xff809ae4>
  809ff0:	0007883a 	mov	r3,zero
  809ff4:	00800044 	movi	r2,1
  809ff8:	003f4d06 	br	809d30 <__alt_data_end+0xff809d30>
  809ffc:	197f942e 	bgeu	r3,r5,809e50 <__alt_data_end+0xff809e50>
  80a000:	10bfff84 	addi	r2,r2,-2
  80a004:	1dc7883a 	add	r3,r3,r23
  80a008:	003f9206 	br	809e54 <__alt_data_end+0xff809e54>
  80a00c:	15bf7e2e 	bgeu	r2,r22,809e08 <__alt_data_end+0xff809e08>
  80a010:	843fff84 	addi	r16,r16,-2
  80a014:	15c5883a 	add	r2,r2,r23
  80a018:	003f7c06 	br	809e0c <__alt_data_end+0xff809e0c>
  80a01c:	2807883a 	mov	r3,r5
  80a020:	003fd206 	br	809f6c <__alt_data_end+0xff809f6c>
  80a024:	102f883a 	mov	r23,r2
  80a028:	003fbc06 	br	809f1c <__alt_data_end+0xff809f1c>
  80a02c:	843fff84 	addi	r16,r16,-2
  80a030:	2489883a 	add	r4,r4,r18
  80a034:	003f2506 	br	809ccc <__alt_data_end+0xff809ccc>
  80a038:	843fff84 	addi	r16,r16,-2
  80a03c:	1485883a 	add	r2,r2,r18
  80a040:	003eca06 	br	809b6c <__alt_data_end+0xff809b6c>

0080a044 <__umoddi3>:
  80a044:	defff404 	addi	sp,sp,-48
  80a048:	ddc00915 	stw	r23,36(sp)
  80a04c:	dc400315 	stw	r17,12(sp)
  80a050:	dc000215 	stw	r16,8(sp)
  80a054:	dfc00b15 	stw	ra,44(sp)
  80a058:	df000a15 	stw	fp,40(sp)
  80a05c:	dd800815 	stw	r22,32(sp)
  80a060:	dd400715 	stw	r21,28(sp)
  80a064:	dd000615 	stw	r20,24(sp)
  80a068:	dcc00515 	stw	r19,20(sp)
  80a06c:	dc800415 	stw	r18,16(sp)
  80a070:	2021883a 	mov	r16,r4
  80a074:	2823883a 	mov	r17,r5
  80a078:	282f883a 	mov	r23,r5
  80a07c:	3800381e 	bne	r7,zero,80a160 <__umoddi3+0x11c>
  80a080:	3027883a 	mov	r19,r6
  80a084:	2029883a 	mov	r20,r4
  80a088:	29804e2e 	bgeu	r5,r6,80a1c4 <__umoddi3+0x180>
  80a08c:	00bfffd4 	movui	r2,65535
  80a090:	11809c36 	bltu	r2,r6,80a304 <__umoddi3+0x2c0>
  80a094:	00803fc4 	movi	r2,255
  80a098:	11813b2e 	bgeu	r2,r6,80a588 <__umoddi3+0x544>
  80a09c:	01400204 	movi	r5,8
  80a0a0:	2805883a 	mov	r2,r5
  80a0a4:	314ad83a 	srl	r5,r6,r5
  80a0a8:	00c02074 	movhi	r3,129
  80a0ac:	18c1c604 	addi	r3,r3,1816
  80a0b0:	194b883a 	add	r5,r3,r5
  80a0b4:	29000003 	ldbu	r4,0(r5)
  80a0b8:	2089883a 	add	r4,r4,r2
  80a0bc:	00800804 	movi	r2,32
  80a0c0:	1105c83a 	sub	r2,r2,r4
  80a0c4:	1000ec26 	beq	r2,zero,80a478 <__umoddi3+0x434>
  80a0c8:	88a2983a 	sll	r17,r17,r2
  80a0cc:	8108d83a 	srl	r4,r16,r4
  80a0d0:	30a6983a 	sll	r19,r6,r2
  80a0d4:	80a8983a 	sll	r20,r16,r2
  80a0d8:	1025883a 	mov	r18,r2
  80a0dc:	892eb03a 	or	r23,r17,r4
  80a0e0:	982cd43a 	srli	r22,r19,16
  80a0e4:	b809883a 	mov	r4,r23
  80a0e8:	9d7fffcc 	andi	r21,r19,65535
  80a0ec:	b00b883a 	mov	r5,r22
  80a0f0:	080a6f80 	call	80a6f8 <__umodsi3>
  80a0f4:	b809883a 	mov	r4,r23
  80a0f8:	b00b883a 	mov	r5,r22
  80a0fc:	1021883a 	mov	r16,r2
  80a100:	080a6f00 	call	80a6f0 <__udivsi3>
  80a104:	8020943a 	slli	r16,r16,16
  80a108:	a00cd43a 	srli	r6,r20,16
  80a10c:	1545383a 	mul	r2,r2,r21
  80a110:	8188b03a 	or	r4,r16,r6
  80a114:	2080042e 	bgeu	r4,r2,80a128 <__umoddi3+0xe4>
  80a118:	24c9883a 	add	r4,r4,r19
  80a11c:	24c00236 	bltu	r4,r19,80a128 <__umoddi3+0xe4>
  80a120:	2080012e 	bgeu	r4,r2,80a128 <__umoddi3+0xe4>
  80a124:	24c9883a 	add	r4,r4,r19
  80a128:	20a3c83a 	sub	r17,r4,r2
  80a12c:	8809883a 	mov	r4,r17
  80a130:	b00b883a 	mov	r5,r22
  80a134:	080a6f80 	call	80a6f8 <__umodsi3>
  80a138:	8809883a 	mov	r4,r17
  80a13c:	b00b883a 	mov	r5,r22
  80a140:	1021883a 	mov	r16,r2
  80a144:	080a6f00 	call	80a6f0 <__udivsi3>
  80a148:	8006943a 	slli	r3,r16,16
  80a14c:	1545383a 	mul	r2,r2,r21
  80a150:	a13fffcc 	andi	r4,r20,65535
  80a154:	1906b03a 	or	r3,r3,r4
  80a158:	1880532e 	bgeu	r3,r2,80a2a8 <__umoddi3+0x264>
  80a15c:	00004e06 	br	80a298 <__umoddi3+0x254>
  80a160:	29c05536 	bltu	r5,r7,80a2b8 <__umoddi3+0x274>
  80a164:	00bfffd4 	movui	r2,65535
  80a168:	11c0612e 	bgeu	r2,r7,80a2f0 <__umoddi3+0x2ac>
  80a16c:	00804034 	movhi	r2,256
  80a170:	10bfffc4 	addi	r2,r2,-1
  80a174:	11c0f82e 	bgeu	r2,r7,80a558 <__umoddi3+0x514>
  80a178:	01400604 	movi	r5,24
  80a17c:	282b883a 	mov	r21,r5
  80a180:	394ad83a 	srl	r5,r7,r5
  80a184:	00c02074 	movhi	r3,129
  80a188:	18c1c604 	addi	r3,r3,1816
  80a18c:	194b883a 	add	r5,r3,r5
  80a190:	28800003 	ldbu	r2,0(r5)
  80a194:	00c00804 	movi	r3,32
  80a198:	156b883a 	add	r21,r2,r21
  80a19c:	1d69c83a 	sub	r20,r3,r21
  80a1a0:	a000631e 	bne	r20,zero,80a330 <__umoddi3+0x2ec>
  80a1a4:	3c400136 	bltu	r7,r17,80a1ac <__umoddi3+0x168>
  80a1a8:	81810436 	bltu	r16,r6,80a5bc <__umoddi3+0x578>
  80a1ac:	8185c83a 	sub	r2,r16,r6
  80a1b0:	89e3c83a 	sub	r17,r17,r7
  80a1b4:	8087803a 	cmpltu	r3,r16,r2
  80a1b8:	88efc83a 	sub	r23,r17,r3
  80a1bc:	b807883a 	mov	r3,r23
  80a1c0:	00003f06 	br	80a2c0 <__umoddi3+0x27c>
  80a1c4:	3000041e 	bne	r6,zero,80a1d8 <__umoddi3+0x194>
  80a1c8:	01000044 	movi	r4,1
  80a1cc:	000b883a 	mov	r5,zero
  80a1d0:	080a6f00 	call	80a6f0 <__udivsi3>
  80a1d4:	1027883a 	mov	r19,r2
  80a1d8:	00bfffd4 	movui	r2,65535
  80a1dc:	14c04f2e 	bgeu	r2,r19,80a31c <__umoddi3+0x2d8>
  80a1e0:	00804034 	movhi	r2,256
  80a1e4:	10bfffc4 	addi	r2,r2,-1
  80a1e8:	14c0e42e 	bgeu	r2,r19,80a57c <__umoddi3+0x538>
  80a1ec:	00800604 	movi	r2,24
  80a1f0:	1007883a 	mov	r3,r2
  80a1f4:	9884d83a 	srl	r2,r19,r2
  80a1f8:	01002074 	movhi	r4,129
  80a1fc:	2101c604 	addi	r4,r4,1816
  80a200:	2085883a 	add	r2,r4,r2
  80a204:	11000003 	ldbu	r4,0(r2)
  80a208:	00800804 	movi	r2,32
  80a20c:	20c7883a 	add	r3,r4,r3
  80a210:	10c5c83a 	sub	r2,r2,r3
  80a214:	10009a1e 	bne	r2,zero,80a480 <__umoddi3+0x43c>
  80a218:	982cd43a 	srli	r22,r19,16
  80a21c:	8ce3c83a 	sub	r17,r17,r19
  80a220:	9c3fffcc 	andi	r16,r19,65535
  80a224:	0025883a 	mov	r18,zero
  80a228:	8809883a 	mov	r4,r17
  80a22c:	b00b883a 	mov	r5,r22
  80a230:	080a6f80 	call	80a6f8 <__umodsi3>
  80a234:	8809883a 	mov	r4,r17
  80a238:	b00b883a 	mov	r5,r22
  80a23c:	102b883a 	mov	r21,r2
  80a240:	080a6f00 	call	80a6f0 <__udivsi3>
  80a244:	a806943a 	slli	r3,r21,16
  80a248:	a008d43a 	srli	r4,r20,16
  80a24c:	1405383a 	mul	r2,r2,r16
  80a250:	190cb03a 	or	r6,r3,r4
  80a254:	3080032e 	bgeu	r6,r2,80a264 <__umoddi3+0x220>
  80a258:	34cd883a 	add	r6,r6,r19
  80a25c:	34c00136 	bltu	r6,r19,80a264 <__umoddi3+0x220>
  80a260:	3080d436 	bltu	r6,r2,80a5b4 <__umoddi3+0x570>
  80a264:	30abc83a 	sub	r21,r6,r2
  80a268:	a809883a 	mov	r4,r21
  80a26c:	b00b883a 	mov	r5,r22
  80a270:	080a6f80 	call	80a6f8 <__umodsi3>
  80a274:	1023883a 	mov	r17,r2
  80a278:	a809883a 	mov	r4,r21
  80a27c:	b00b883a 	mov	r5,r22
  80a280:	080a6f00 	call	80a6f0 <__udivsi3>
  80a284:	8822943a 	slli	r17,r17,16
  80a288:	1405383a 	mul	r2,r2,r16
  80a28c:	a13fffcc 	andi	r4,r20,65535
  80a290:	8906b03a 	or	r3,r17,r4
  80a294:	1880042e 	bgeu	r3,r2,80a2a8 <__umoddi3+0x264>
  80a298:	1cc7883a 	add	r3,r3,r19
  80a29c:	1cc00236 	bltu	r3,r19,80a2a8 <__umoddi3+0x264>
  80a2a0:	1880012e 	bgeu	r3,r2,80a2a8 <__umoddi3+0x264>
  80a2a4:	1cc7883a 	add	r3,r3,r19
  80a2a8:	1887c83a 	sub	r3,r3,r2
  80a2ac:	1c84d83a 	srl	r2,r3,r18
  80a2b0:	0007883a 	mov	r3,zero
  80a2b4:	00000206 	br	80a2c0 <__umoddi3+0x27c>
  80a2b8:	2005883a 	mov	r2,r4
  80a2bc:	2807883a 	mov	r3,r5
  80a2c0:	dfc00b17 	ldw	ra,44(sp)
  80a2c4:	df000a17 	ldw	fp,40(sp)
  80a2c8:	ddc00917 	ldw	r23,36(sp)
  80a2cc:	dd800817 	ldw	r22,32(sp)
  80a2d0:	dd400717 	ldw	r21,28(sp)
  80a2d4:	dd000617 	ldw	r20,24(sp)
  80a2d8:	dcc00517 	ldw	r19,20(sp)
  80a2dc:	dc800417 	ldw	r18,16(sp)
  80a2e0:	dc400317 	ldw	r17,12(sp)
  80a2e4:	dc000217 	ldw	r16,8(sp)
  80a2e8:	dec00c04 	addi	sp,sp,48
  80a2ec:	f800283a 	ret
  80a2f0:	00803fc4 	movi	r2,255
  80a2f4:	11c0952e 	bgeu	r2,r7,80a54c <__umoddi3+0x508>
  80a2f8:	01400204 	movi	r5,8
  80a2fc:	282b883a 	mov	r21,r5
  80a300:	003f9f06 	br	80a180 <__alt_data_end+0xff80a180>
  80a304:	00804034 	movhi	r2,256
  80a308:	10bfffc4 	addi	r2,r2,-1
  80a30c:	1180952e 	bgeu	r2,r6,80a564 <__umoddi3+0x520>
  80a310:	01400604 	movi	r5,24
  80a314:	2805883a 	mov	r2,r5
  80a318:	003f6206 	br	80a0a4 <__alt_data_end+0xff80a0a4>
  80a31c:	00803fc4 	movi	r2,255
  80a320:	14c0932e 	bgeu	r2,r19,80a570 <__umoddi3+0x52c>
  80a324:	00800204 	movi	r2,8
  80a328:	1007883a 	mov	r3,r2
  80a32c:	003fb106 	br	80a1f4 <__alt_data_end+0xff80a1f4>
  80a330:	3548d83a 	srl	r4,r6,r21
  80a334:	3d0e983a 	sll	r7,r7,r20
  80a338:	8d10983a 	sll	r8,r17,r20
  80a33c:	8d6cd83a 	srl	r22,r17,r21
  80a340:	3922b03a 	or	r17,r7,r4
  80a344:	882ed43a 	srli	r23,r17,16
  80a348:	8564d83a 	srl	r18,r16,r21
  80a34c:	b009883a 	mov	r4,r22
  80a350:	b80b883a 	mov	r5,r23
  80a354:	44a4b03a 	or	r18,r8,r18
  80a358:	3526983a 	sll	r19,r6,r20
  80a35c:	080a6f80 	call	80a6f8 <__umodsi3>
  80a360:	b009883a 	mov	r4,r22
  80a364:	b80b883a 	mov	r5,r23
  80a368:	1039883a 	mov	fp,r2
  80a36c:	080a6f00 	call	80a6f0 <__udivsi3>
  80a370:	102d883a 	mov	r22,r2
  80a374:	8a3fffcc 	andi	r8,r17,65535
  80a378:	e004943a 	slli	r2,fp,16
  80a37c:	900cd43a 	srli	r6,r18,16
  80a380:	b239383a 	mul	fp,r22,r8
  80a384:	8520983a 	sll	r16,r16,r20
  80a388:	118ab03a 	or	r5,r2,r6
  80a38c:	2f00042e 	bgeu	r5,fp,80a3a0 <__umoddi3+0x35c>
  80a390:	2c4b883a 	add	r5,r5,r17
  80a394:	b0bfffc4 	addi	r2,r22,-1
  80a398:	2c40822e 	bgeu	r5,r17,80a5a4 <__umoddi3+0x560>
  80a39c:	102d883a 	mov	r22,r2
  80a3a0:	2f39c83a 	sub	fp,r5,fp
  80a3a4:	e009883a 	mov	r4,fp
  80a3a8:	b80b883a 	mov	r5,r23
  80a3ac:	da000115 	stw	r8,4(sp)
  80a3b0:	080a6f80 	call	80a6f8 <__umodsi3>
  80a3b4:	e009883a 	mov	r4,fp
  80a3b8:	b80b883a 	mov	r5,r23
  80a3bc:	d8800015 	stw	r2,0(sp)
  80a3c0:	080a6f00 	call	80a6f0 <__udivsi3>
  80a3c4:	d9800017 	ldw	r6,0(sp)
  80a3c8:	da000117 	ldw	r8,4(sp)
  80a3cc:	94bfffcc 	andi	r18,r18,65535
  80a3d0:	300c943a 	slli	r6,r6,16
  80a3d4:	1209383a 	mul	r4,r2,r8
  80a3d8:	3490b03a 	or	r8,r6,r18
  80a3dc:	4100042e 	bgeu	r8,r4,80a3f0 <__umoddi3+0x3ac>
  80a3e0:	4451883a 	add	r8,r8,r17
  80a3e4:	10ffffc4 	addi	r3,r2,-1
  80a3e8:	44406a2e 	bgeu	r8,r17,80a594 <__umoddi3+0x550>
  80a3ec:	1805883a 	mov	r2,r3
  80a3f0:	b012943a 	slli	r9,r22,16
  80a3f4:	9abfffcc 	andi	r10,r19,65535
  80a3f8:	980ed43a 	srli	r7,r19,16
  80a3fc:	124ab03a 	or	r5,r2,r9
  80a400:	2a7fffcc 	andi	r9,r5,65535
  80a404:	280ad43a 	srli	r5,r5,16
  80a408:	4a8d383a 	mul	r6,r9,r10
  80a40c:	49d3383a 	mul	r9,r9,r7
  80a410:	2a95383a 	mul	r10,r5,r10
  80a414:	3004d43a 	srli	r2,r6,16
  80a418:	4111c83a 	sub	r8,r8,r4
  80a41c:	5253883a 	add	r9,r10,r9
  80a420:	4893883a 	add	r9,r9,r2
  80a424:	29cb383a 	mul	r5,r5,r7
  80a428:	4a80022e 	bgeu	r9,r10,80a434 <__umoddi3+0x3f0>
  80a42c:	00800074 	movhi	r2,1
  80a430:	288b883a 	add	r5,r5,r2
  80a434:	4808d43a 	srli	r4,r9,16
  80a438:	4812943a 	slli	r9,r9,16
  80a43c:	31bfffcc 	andi	r6,r6,65535
  80a440:	290b883a 	add	r5,r5,r4
  80a444:	498d883a 	add	r6,r9,r6
  80a448:	41403a36 	bltu	r8,r5,80a534 <__umoddi3+0x4f0>
  80a44c:	41405d26 	beq	r8,r5,80a5c4 <__umoddi3+0x580>
  80a450:	4149c83a 	sub	r4,r8,r5
  80a454:	300f883a 	mov	r7,r6
  80a458:	81cfc83a 	sub	r7,r16,r7
  80a45c:	81c7803a 	cmpltu	r3,r16,r7
  80a460:	20c7c83a 	sub	r3,r4,r3
  80a464:	1d44983a 	sll	r2,r3,r21
  80a468:	3d0ed83a 	srl	r7,r7,r20
  80a46c:	1d06d83a 	srl	r3,r3,r20
  80a470:	11c4b03a 	or	r2,r2,r7
  80a474:	003f9206 	br	80a2c0 <__alt_data_end+0xff80a2c0>
  80a478:	0025883a 	mov	r18,zero
  80a47c:	003f1806 	br	80a0e0 <__alt_data_end+0xff80a0e0>
  80a480:	98a6983a 	sll	r19,r19,r2
  80a484:	88e8d83a 	srl	r20,r17,r3
  80a488:	80c6d83a 	srl	r3,r16,r3
  80a48c:	982cd43a 	srli	r22,r19,16
  80a490:	88a2983a 	sll	r17,r17,r2
  80a494:	a009883a 	mov	r4,r20
  80a498:	b00b883a 	mov	r5,r22
  80a49c:	88eab03a 	or	r21,r17,r3
  80a4a0:	1025883a 	mov	r18,r2
  80a4a4:	080a6f80 	call	80a6f8 <__umodsi3>
  80a4a8:	a009883a 	mov	r4,r20
  80a4ac:	b00b883a 	mov	r5,r22
  80a4b0:	1023883a 	mov	r17,r2
  80a4b4:	080a6f00 	call	80a6f0 <__udivsi3>
  80a4b8:	9f3fffcc 	andi	fp,r19,65535
  80a4bc:	8822943a 	slli	r17,r17,16
  80a4c0:	a80ad43a 	srli	r5,r21,16
  80a4c4:	1705383a 	mul	r2,r2,fp
  80a4c8:	84a8983a 	sll	r20,r16,r18
  80a4cc:	8948b03a 	or	r4,r17,r5
  80a4d0:	2080042e 	bgeu	r4,r2,80a4e4 <__umoddi3+0x4a0>
  80a4d4:	24c9883a 	add	r4,r4,r19
  80a4d8:	24c00236 	bltu	r4,r19,80a4e4 <__umoddi3+0x4a0>
  80a4dc:	2080012e 	bgeu	r4,r2,80a4e4 <__umoddi3+0x4a0>
  80a4e0:	24c9883a 	add	r4,r4,r19
  80a4e4:	20afc83a 	sub	r23,r4,r2
  80a4e8:	b809883a 	mov	r4,r23
  80a4ec:	b00b883a 	mov	r5,r22
  80a4f0:	080a6f80 	call	80a6f8 <__umodsi3>
  80a4f4:	1023883a 	mov	r17,r2
  80a4f8:	b809883a 	mov	r4,r23
  80a4fc:	b00b883a 	mov	r5,r22
  80a500:	080a6f00 	call	80a6f0 <__udivsi3>
  80a504:	8822943a 	slli	r17,r17,16
  80a508:	1705383a 	mul	r2,r2,fp
  80a50c:	a93fffcc 	andi	r4,r21,65535
  80a510:	8908b03a 	or	r4,r17,r4
  80a514:	2080042e 	bgeu	r4,r2,80a528 <__umoddi3+0x4e4>
  80a518:	24c9883a 	add	r4,r4,r19
  80a51c:	24c00236 	bltu	r4,r19,80a528 <__umoddi3+0x4e4>
  80a520:	2080012e 	bgeu	r4,r2,80a528 <__umoddi3+0x4e4>
  80a524:	24c9883a 	add	r4,r4,r19
  80a528:	20a3c83a 	sub	r17,r4,r2
  80a52c:	e021883a 	mov	r16,fp
  80a530:	003f3d06 	br	80a228 <__alt_data_end+0xff80a228>
  80a534:	34cfc83a 	sub	r7,r6,r19
  80a538:	2c4bc83a 	sub	r5,r5,r17
  80a53c:	31cd803a 	cmpltu	r6,r6,r7
  80a540:	298dc83a 	sub	r6,r5,r6
  80a544:	4189c83a 	sub	r4,r8,r6
  80a548:	003fc306 	br	80a458 <__alt_data_end+0xff80a458>
  80a54c:	000b883a 	mov	r5,zero
  80a550:	002b883a 	mov	r21,zero
  80a554:	003f0a06 	br	80a180 <__alt_data_end+0xff80a180>
  80a558:	01400404 	movi	r5,16
  80a55c:	282b883a 	mov	r21,r5
  80a560:	003f0706 	br	80a180 <__alt_data_end+0xff80a180>
  80a564:	01400404 	movi	r5,16
  80a568:	2805883a 	mov	r2,r5
  80a56c:	003ecd06 	br	80a0a4 <__alt_data_end+0xff80a0a4>
  80a570:	0005883a 	mov	r2,zero
  80a574:	0007883a 	mov	r3,zero
  80a578:	003f1e06 	br	80a1f4 <__alt_data_end+0xff80a1f4>
  80a57c:	00800404 	movi	r2,16
  80a580:	1007883a 	mov	r3,r2
  80a584:	003f1b06 	br	80a1f4 <__alt_data_end+0xff80a1f4>
  80a588:	000b883a 	mov	r5,zero
  80a58c:	0005883a 	mov	r2,zero
  80a590:	003ec406 	br	80a0a4 <__alt_data_end+0xff80a0a4>
  80a594:	413f952e 	bgeu	r8,r4,80a3ec <__alt_data_end+0xff80a3ec>
  80a598:	10bfff84 	addi	r2,r2,-2
  80a59c:	4451883a 	add	r8,r8,r17
  80a5a0:	003f9306 	br	80a3f0 <__alt_data_end+0xff80a3f0>
  80a5a4:	2f3f7d2e 	bgeu	r5,fp,80a39c <__alt_data_end+0xff80a39c>
  80a5a8:	b5bfff84 	addi	r22,r22,-2
  80a5ac:	2c4b883a 	add	r5,r5,r17
  80a5b0:	003f7b06 	br	80a3a0 <__alt_data_end+0xff80a3a0>
  80a5b4:	34cd883a 	add	r6,r6,r19
  80a5b8:	003f2a06 	br	80a264 <__alt_data_end+0xff80a264>
  80a5bc:	8005883a 	mov	r2,r16
  80a5c0:	003efe06 	br	80a1bc <__alt_data_end+0xff80a1bc>
  80a5c4:	81bfdb36 	bltu	r16,r6,80a534 <__alt_data_end+0xff80a534>
  80a5c8:	300f883a 	mov	r7,r6
  80a5cc:	0009883a 	mov	r4,zero
  80a5d0:	003fa106 	br	80a458 <__alt_data_end+0xff80a458>

0080a5d4 <udivmodsi4>:
  80a5d4:	2900182e 	bgeu	r5,r4,80a638 <udivmodsi4+0x64>
  80a5d8:	28001716 	blt	r5,zero,80a638 <udivmodsi4+0x64>
  80a5dc:	00800804 	movi	r2,32
  80a5e0:	00c00044 	movi	r3,1
  80a5e4:	00000206 	br	80a5f0 <udivmodsi4+0x1c>
  80a5e8:	10001126 	beq	r2,zero,80a630 <udivmodsi4+0x5c>
  80a5ec:	28000516 	blt	r5,zero,80a604 <udivmodsi4+0x30>
  80a5f0:	294b883a 	add	r5,r5,r5
  80a5f4:	10bfffc4 	addi	r2,r2,-1
  80a5f8:	18c7883a 	add	r3,r3,r3
  80a5fc:	293ffa36 	bltu	r5,r4,80a5e8 <__alt_data_end+0xff80a5e8>
  80a600:	18000b26 	beq	r3,zero,80a630 <udivmodsi4+0x5c>
  80a604:	0005883a 	mov	r2,zero
  80a608:	21400236 	bltu	r4,r5,80a614 <udivmodsi4+0x40>
  80a60c:	2149c83a 	sub	r4,r4,r5
  80a610:	10c4b03a 	or	r2,r2,r3
  80a614:	1806d07a 	srli	r3,r3,1
  80a618:	280ad07a 	srli	r5,r5,1
  80a61c:	183ffa1e 	bne	r3,zero,80a608 <__alt_data_end+0xff80a608>
  80a620:	3000011e 	bne	r6,zero,80a628 <udivmodsi4+0x54>
  80a624:	f800283a 	ret
  80a628:	2005883a 	mov	r2,r4
  80a62c:	f800283a 	ret
  80a630:	0005883a 	mov	r2,zero
  80a634:	003ffa06 	br	80a620 <__alt_data_end+0xff80a620>
  80a638:	00c00044 	movi	r3,1
  80a63c:	003ff106 	br	80a604 <__alt_data_end+0xff80a604>

0080a640 <__divsi3>:
  80a640:	defffe04 	addi	sp,sp,-8
  80a644:	dfc00115 	stw	ra,4(sp)
  80a648:	dc000015 	stw	r16,0(sp)
  80a64c:	20000b16 	blt	r4,zero,80a67c <__divsi3+0x3c>
  80a650:	0021883a 	mov	r16,zero
  80a654:	28000c16 	blt	r5,zero,80a688 <__divsi3+0x48>
  80a658:	000d883a 	mov	r6,zero
  80a65c:	080a5d40 	call	80a5d4 <udivmodsi4>
  80a660:	0407c83a 	sub	r3,zero,r16
  80a664:	1884f03a 	xor	r2,r3,r2
  80a668:	1405883a 	add	r2,r2,r16
  80a66c:	dfc00117 	ldw	ra,4(sp)
  80a670:	dc000017 	ldw	r16,0(sp)
  80a674:	dec00204 	addi	sp,sp,8
  80a678:	f800283a 	ret
  80a67c:	0109c83a 	sub	r4,zero,r4
  80a680:	04000044 	movi	r16,1
  80a684:	283ff40e 	bge	r5,zero,80a658 <__alt_data_end+0xff80a658>
  80a688:	014bc83a 	sub	r5,zero,r5
  80a68c:	8400005c 	xori	r16,r16,1
  80a690:	003ff106 	br	80a658 <__alt_data_end+0xff80a658>

0080a694 <__modsi3>:
  80a694:	defffd04 	addi	sp,sp,-12
  80a698:	dfc00215 	stw	ra,8(sp)
  80a69c:	dc400115 	stw	r17,4(sp)
  80a6a0:	dc000015 	stw	r16,0(sp)
  80a6a4:	20000c16 	blt	r4,zero,80a6d8 <__modsi3+0x44>
  80a6a8:	0023883a 	mov	r17,zero
  80a6ac:	0021883a 	mov	r16,zero
  80a6b0:	28000d16 	blt	r5,zero,80a6e8 <__modsi3+0x54>
  80a6b4:	01800044 	movi	r6,1
  80a6b8:	080a5d40 	call	80a5d4 <udivmodsi4>
  80a6bc:	1404f03a 	xor	r2,r2,r16
  80a6c0:	8885883a 	add	r2,r17,r2
  80a6c4:	dfc00217 	ldw	ra,8(sp)
  80a6c8:	dc400117 	ldw	r17,4(sp)
  80a6cc:	dc000017 	ldw	r16,0(sp)
  80a6d0:	dec00304 	addi	sp,sp,12
  80a6d4:	f800283a 	ret
  80a6d8:	0109c83a 	sub	r4,zero,r4
  80a6dc:	04400044 	movi	r17,1
  80a6e0:	043fffc4 	movi	r16,-1
  80a6e4:	283ff30e 	bge	r5,zero,80a6b4 <__alt_data_end+0xff80a6b4>
  80a6e8:	014bc83a 	sub	r5,zero,r5
  80a6ec:	003ff106 	br	80a6b4 <__alt_data_end+0xff80a6b4>

0080a6f0 <__udivsi3>:
  80a6f0:	000d883a 	mov	r6,zero
  80a6f4:	080a5d41 	jmpi	80a5d4 <udivmodsi4>

0080a6f8 <__umodsi3>:
  80a6f8:	01800044 	movi	r6,1
  80a6fc:	080a5d41 	jmpi	80a5d4 <udivmodsi4>

0080a700 <__adddf3>:
  80a700:	02000434 	movhi	r8,16
  80a704:	423fffc4 	addi	r8,r8,-1
  80a708:	defffb04 	addi	sp,sp,-20
  80a70c:	2a12703a 	and	r9,r5,r8
  80a710:	2806d7fa 	srli	r3,r5,31
  80a714:	3a10703a 	and	r8,r7,r8
  80a718:	3804d53a 	srli	r2,r7,20
  80a71c:	3014d77a 	srli	r10,r6,29
  80a720:	dc000015 	stw	r16,0(sp)
  80a724:	481290fa 	slli	r9,r9,3
  80a728:	2820d53a 	srli	r16,r5,20
  80a72c:	401090fa 	slli	r8,r8,3
  80a730:	200ad77a 	srli	r5,r4,29
  80a734:	380ed7fa 	srli	r7,r7,31
  80a738:	dc800215 	stw	r18,8(sp)
  80a73c:	dc400115 	stw	r17,4(sp)
  80a740:	dfc00415 	stw	ra,16(sp)
  80a744:	dcc00315 	stw	r19,12(sp)
  80a748:	1c803fcc 	andi	r18,r3,255
  80a74c:	8401ffcc 	andi	r16,r16,2047
  80a750:	494ab03a 	or	r5,r9,r5
  80a754:	202290fa 	slli	r17,r4,3
  80a758:	1081ffcc 	andi	r2,r2,2047
  80a75c:	4290b03a 	or	r8,r8,r10
  80a760:	300c90fa 	slli	r6,r6,3
  80a764:	91c07026 	beq	r18,r7,80a928 <__adddf3+0x228>
  80a768:	8087c83a 	sub	r3,r16,r2
  80a76c:	00c0b30e 	bge	zero,r3,80aa3c <__adddf3+0x33c>
  80a770:	10002a1e 	bne	r2,zero,80a81c <__adddf3+0x11c>
  80a774:	4184b03a 	or	r2,r8,r6
  80a778:	1000991e 	bne	r2,zero,80a9e0 <__adddf3+0x2e0>
  80a77c:	888001cc 	andi	r2,r17,7
  80a780:	10005b26 	beq	r2,zero,80a8f0 <__adddf3+0x1f0>
  80a784:	88c003cc 	andi	r3,r17,15
  80a788:	00800104 	movi	r2,4
  80a78c:	18805826 	beq	r3,r2,80a8f0 <__adddf3+0x1f0>
  80a790:	89800104 	addi	r6,r17,4
  80a794:	3463803a 	cmpltu	r17,r6,r17
  80a798:	2c4b883a 	add	r5,r5,r17
  80a79c:	2880202c 	andhi	r2,r5,128
  80a7a0:	9007883a 	mov	r3,r18
  80a7a4:	3023883a 	mov	r17,r6
  80a7a8:	10005426 	beq	r2,zero,80a8fc <__adddf3+0x1fc>
  80a7ac:	84000044 	addi	r16,r16,1
  80a7b0:	0081ffc4 	movi	r2,2047
  80a7b4:	8080c126 	beq	r16,r2,80aabc <__adddf3+0x3bc>
  80a7b8:	013fe034 	movhi	r4,65408
  80a7bc:	213fffc4 	addi	r4,r4,-1
  80a7c0:	290a703a 	and	r5,r5,r4
  80a7c4:	2804977a 	slli	r2,r5,29
  80a7c8:	280a927a 	slli	r5,r5,9
  80a7cc:	8822d0fa 	srli	r17,r17,3
  80a7d0:	8401ffcc 	andi	r16,r16,2047
  80a7d4:	2808d33a 	srli	r4,r5,12
  80a7d8:	1444b03a 	or	r2,r2,r17
  80a7dc:	8401ffcc 	andi	r16,r16,2047
  80a7e0:	800a953a 	slli	r5,r16,20
  80a7e4:	18c03fcc 	andi	r3,r3,255
  80a7e8:	04000434 	movhi	r16,16
  80a7ec:	180697fa 	slli	r3,r3,31
  80a7f0:	843fffc4 	addi	r16,r16,-1
  80a7f4:	2420703a 	and	r16,r4,r16
  80a7f8:	8160b03a 	or	r16,r16,r5
  80a7fc:	80c6b03a 	or	r3,r16,r3
  80a800:	dfc00417 	ldw	ra,16(sp)
  80a804:	dcc00317 	ldw	r19,12(sp)
  80a808:	dc800217 	ldw	r18,8(sp)
  80a80c:	dc400117 	ldw	r17,4(sp)
  80a810:	dc000017 	ldw	r16,0(sp)
  80a814:	dec00504 	addi	sp,sp,20
  80a818:	f800283a 	ret
  80a81c:	0081ffc4 	movi	r2,2047
  80a820:	80bfd626 	beq	r16,r2,80a77c <__alt_data_end+0xff80a77c>
  80a824:	42002034 	orhi	r8,r8,128
  80a828:	00800e04 	movi	r2,56
  80a82c:	10c0a616 	blt	r2,r3,80aac8 <__adddf3+0x3c8>
  80a830:	008007c4 	movi	r2,31
  80a834:	10c0c916 	blt	r2,r3,80ab5c <__adddf3+0x45c>
  80a838:	00800804 	movi	r2,32
  80a83c:	10c5c83a 	sub	r2,r2,r3
  80a840:	408e983a 	sll	r7,r8,r2
  80a844:	30c8d83a 	srl	r4,r6,r3
  80a848:	3084983a 	sll	r2,r6,r2
  80a84c:	40c6d83a 	srl	r3,r8,r3
  80a850:	390cb03a 	or	r6,r7,r4
  80a854:	1004c03a 	cmpne	r2,r2,zero
  80a858:	308cb03a 	or	r6,r6,r2
  80a85c:	898dc83a 	sub	r6,r17,r6
  80a860:	89a3803a 	cmpltu	r17,r17,r6
  80a864:	28cbc83a 	sub	r5,r5,r3
  80a868:	2c4bc83a 	sub	r5,r5,r17
  80a86c:	3023883a 	mov	r17,r6
  80a870:	2880202c 	andhi	r2,r5,128
  80a874:	10006d26 	beq	r2,zero,80aa2c <__adddf3+0x32c>
  80a878:	04c02034 	movhi	r19,128
  80a87c:	9cffffc4 	addi	r19,r19,-1
  80a880:	2ce6703a 	and	r19,r5,r19
  80a884:	98007e26 	beq	r19,zero,80aa80 <__adddf3+0x380>
  80a888:	9809883a 	mov	r4,r19
  80a88c:	080cc9c0 	call	80cc9c <__clzsi2>
  80a890:	10fffe04 	addi	r3,r2,-8
  80a894:	010007c4 	movi	r4,31
  80a898:	20c07f16 	blt	r4,r3,80aa98 <__adddf3+0x398>
  80a89c:	01400a04 	movi	r5,40
  80a8a0:	2885c83a 	sub	r2,r5,r2
  80a8a4:	888ad83a 	srl	r5,r17,r2
  80a8a8:	98e6983a 	sll	r19,r19,r3
  80a8ac:	88e2983a 	sll	r17,r17,r3
  80a8b0:	2ce6b03a 	or	r19,r5,r19
  80a8b4:	1c007c16 	blt	r3,r16,80aaa8 <__adddf3+0x3a8>
  80a8b8:	1c21c83a 	sub	r16,r3,r16
  80a8bc:	81400044 	addi	r5,r16,1
  80a8c0:	00c007c4 	movi	r3,31
  80a8c4:	19409816 	blt	r3,r5,80ab28 <__adddf3+0x428>
  80a8c8:	1c21c83a 	sub	r16,r3,r16
  80a8cc:	8c08983a 	sll	r4,r17,r16
  80a8d0:	8946d83a 	srl	r3,r17,r5
  80a8d4:	9c20983a 	sll	r16,r19,r16
  80a8d8:	2008c03a 	cmpne	r4,r4,zero
  80a8dc:	994ad83a 	srl	r5,r19,r5
  80a8e0:	1c06b03a 	or	r3,r3,r16
  80a8e4:	1922b03a 	or	r17,r3,r4
  80a8e8:	0021883a 	mov	r16,zero
  80a8ec:	003fa306 	br	80a77c <__alt_data_end+0xff80a77c>
  80a8f0:	2880202c 	andhi	r2,r5,128
  80a8f4:	9007883a 	mov	r3,r18
  80a8f8:	103fac1e 	bne	r2,zero,80a7ac <__alt_data_end+0xff80a7ac>
  80a8fc:	2804977a 	slli	r2,r5,29
  80a900:	8822d0fa 	srli	r17,r17,3
  80a904:	0101ffc4 	movi	r4,2047
  80a908:	280ad0fa 	srli	r5,r5,3
  80a90c:	1444b03a 	or	r2,r2,r17
  80a910:	81002c26 	beq	r16,r4,80a9c4 <__adddf3+0x2c4>
  80a914:	8120703a 	and	r16,r16,r4
  80a918:	01000434 	movhi	r4,16
  80a91c:	213fffc4 	addi	r4,r4,-1
  80a920:	2908703a 	and	r4,r5,r4
  80a924:	003fad06 	br	80a7dc <__alt_data_end+0xff80a7dc>
  80a928:	8089c83a 	sub	r4,r16,r2
  80a92c:	01006a0e 	bge	zero,r4,80aad8 <__adddf3+0x3d8>
  80a930:	10003326 	beq	r2,zero,80aa00 <__adddf3+0x300>
  80a934:	0081ffc4 	movi	r2,2047
  80a938:	80bf9026 	beq	r16,r2,80a77c <__alt_data_end+0xff80a77c>
  80a93c:	42002034 	orhi	r8,r8,128
  80a940:	00800e04 	movi	r2,56
  80a944:	1100b116 	blt	r2,r4,80ac0c <__adddf3+0x50c>
  80a948:	008007c4 	movi	r2,31
  80a94c:	1100e216 	blt	r2,r4,80acd8 <__adddf3+0x5d8>
  80a950:	00800804 	movi	r2,32
  80a954:	1105c83a 	sub	r2,r2,r4
  80a958:	4092983a 	sll	r9,r8,r2
  80a95c:	310ed83a 	srl	r7,r6,r4
  80a960:	3084983a 	sll	r2,r6,r2
  80a964:	4110d83a 	srl	r8,r8,r4
  80a968:	49ccb03a 	or	r6,r9,r7
  80a96c:	1004c03a 	cmpne	r2,r2,zero
  80a970:	308cb03a 	or	r6,r6,r2
  80a974:	344d883a 	add	r6,r6,r17
  80a978:	3463803a 	cmpltu	r17,r6,r17
  80a97c:	414b883a 	add	r5,r8,r5
  80a980:	2c4b883a 	add	r5,r5,r17
  80a984:	3023883a 	mov	r17,r6
  80a988:	2880202c 	andhi	r2,r5,128
  80a98c:	10002726 	beq	r2,zero,80aa2c <__adddf3+0x32c>
  80a990:	84000044 	addi	r16,r16,1
  80a994:	0081ffc4 	movi	r2,2047
  80a998:	8080ae26 	beq	r16,r2,80ac54 <__adddf3+0x554>
  80a99c:	00bfe034 	movhi	r2,65408
  80a9a0:	10bfffc4 	addi	r2,r2,-1
  80a9a4:	288a703a 	and	r5,r5,r2
  80a9a8:	880cd07a 	srli	r6,r17,1
  80a9ac:	280897fa 	slli	r4,r5,31
  80a9b0:	88c0004c 	andi	r3,r17,1
  80a9b4:	30e2b03a 	or	r17,r6,r3
  80a9b8:	280ad07a 	srli	r5,r5,1
  80a9bc:	8922b03a 	or	r17,r17,r4
  80a9c0:	003f6e06 	br	80a77c <__alt_data_end+0xff80a77c>
  80a9c4:	1148b03a 	or	r4,r2,r5
  80a9c8:	20003c26 	beq	r4,zero,80aabc <__adddf3+0x3bc>
  80a9cc:	29000234 	orhi	r4,r5,8
  80a9d0:	01400434 	movhi	r5,16
  80a9d4:	297fffc4 	addi	r5,r5,-1
  80a9d8:	2148703a 	and	r4,r4,r5
  80a9dc:	003f7f06 	br	80a7dc <__alt_data_end+0xff80a7dc>
  80a9e0:	18ffffc4 	addi	r3,r3,-1
  80a9e4:	18004d1e 	bne	r3,zero,80ab1c <__adddf3+0x41c>
  80a9e8:	898dc83a 	sub	r6,r17,r6
  80a9ec:	89a3803a 	cmpltu	r17,r17,r6
  80a9f0:	2a0bc83a 	sub	r5,r5,r8
  80a9f4:	2c4bc83a 	sub	r5,r5,r17
  80a9f8:	3023883a 	mov	r17,r6
  80a9fc:	003f9c06 	br	80a870 <__alt_data_end+0xff80a870>
  80aa00:	4184b03a 	or	r2,r8,r6
  80aa04:	103f5d26 	beq	r2,zero,80a77c <__alt_data_end+0xff80a77c>
  80aa08:	213fffc4 	addi	r4,r4,-1
  80aa0c:	203fd926 	beq	r4,zero,80a974 <__alt_data_end+0xff80a974>
  80aa10:	0081ffc4 	movi	r2,2047
  80aa14:	80bfca1e 	bne	r16,r2,80a940 <__alt_data_end+0xff80a940>
  80aa18:	003f5806 	br	80a77c <__alt_data_end+0xff80a77c>
  80aa1c:	10c8b03a 	or	r4,r2,r3
  80aa20:	20008b26 	beq	r4,zero,80ac50 <__adddf3+0x550>
  80aa24:	100b883a 	mov	r5,r2
  80aa28:	1823883a 	mov	r17,r3
  80aa2c:	888001cc 	andi	r2,r17,7
  80aa30:	103f541e 	bne	r2,zero,80a784 <__alt_data_end+0xff80a784>
  80aa34:	9007883a 	mov	r3,r18
  80aa38:	003fb006 	br	80a8fc <__alt_data_end+0xff80a8fc>
  80aa3c:	1800531e 	bne	r3,zero,80ab8c <__adddf3+0x48c>
  80aa40:	80800044 	addi	r2,r16,1
  80aa44:	1081ffcc 	andi	r2,r2,2047
  80aa48:	00c00044 	movi	r3,1
  80aa4c:	1880990e 	bge	r3,r2,80acb4 <__adddf3+0x5b4>
  80aa50:	8985c83a 	sub	r2,r17,r6
  80aa54:	8887803a 	cmpltu	r3,r17,r2
  80aa58:	2a27c83a 	sub	r19,r5,r8
  80aa5c:	98e7c83a 	sub	r19,r19,r3
  80aa60:	98c0202c 	andhi	r3,r19,128
  80aa64:	18006226 	beq	r3,zero,80abf0 <__adddf3+0x4f0>
  80aa68:	3463c83a 	sub	r17,r6,r17
  80aa6c:	4151c83a 	sub	r8,r8,r5
  80aa70:	344d803a 	cmpltu	r6,r6,r17
  80aa74:	41a7c83a 	sub	r19,r8,r6
  80aa78:	3825883a 	mov	r18,r7
  80aa7c:	983f821e 	bne	r19,zero,80a888 <__alt_data_end+0xff80a888>
  80aa80:	8809883a 	mov	r4,r17
  80aa84:	080cc9c0 	call	80cc9c <__clzsi2>
  80aa88:	10800804 	addi	r2,r2,32
  80aa8c:	10fffe04 	addi	r3,r2,-8
  80aa90:	010007c4 	movi	r4,31
  80aa94:	20ff810e 	bge	r4,r3,80a89c <__alt_data_end+0xff80a89c>
  80aa98:	14fff604 	addi	r19,r2,-40
  80aa9c:	8ce6983a 	sll	r19,r17,r19
  80aaa0:	0023883a 	mov	r17,zero
  80aaa4:	1c3f840e 	bge	r3,r16,80a8b8 <__alt_data_end+0xff80a8b8>
  80aaa8:	017fe034 	movhi	r5,65408
  80aaac:	297fffc4 	addi	r5,r5,-1
  80aab0:	80e1c83a 	sub	r16,r16,r3
  80aab4:	994a703a 	and	r5,r19,r5
  80aab8:	003f3006 	br	80a77c <__alt_data_end+0xff80a77c>
  80aabc:	0009883a 	mov	r4,zero
  80aac0:	0005883a 	mov	r2,zero
  80aac4:	003f4506 	br	80a7dc <__alt_data_end+0xff80a7dc>
  80aac8:	418cb03a 	or	r6,r8,r6
  80aacc:	300cc03a 	cmpne	r6,r6,zero
  80aad0:	0007883a 	mov	r3,zero
  80aad4:	003f6106 	br	80a85c <__alt_data_end+0xff80a85c>
  80aad8:	2000921e 	bne	r4,zero,80ad24 <__adddf3+0x624>
  80aadc:	80800044 	addi	r2,r16,1
  80aae0:	11c1ffcc 	andi	r7,r2,2047
  80aae4:	01000044 	movi	r4,1
  80aae8:	21c0610e 	bge	r4,r7,80ac70 <__adddf3+0x570>
  80aaec:	0101ffc4 	movi	r4,2047
  80aaf0:	1100a326 	beq	r2,r4,80ad80 <__adddf3+0x680>
  80aaf4:	344d883a 	add	r6,r6,r17
  80aaf8:	3463803a 	cmpltu	r17,r6,r17
  80aafc:	414b883a 	add	r5,r8,r5
  80ab00:	2c4b883a 	add	r5,r5,r17
  80ab04:	282297fa 	slli	r17,r5,31
  80ab08:	300cd07a 	srli	r6,r6,1
  80ab0c:	280ad07a 	srli	r5,r5,1
  80ab10:	1021883a 	mov	r16,r2
  80ab14:	89a2b03a 	or	r17,r17,r6
  80ab18:	003f1806 	br	80a77c <__alt_data_end+0xff80a77c>
  80ab1c:	0081ffc4 	movi	r2,2047
  80ab20:	80bf411e 	bne	r16,r2,80a828 <__alt_data_end+0xff80a828>
  80ab24:	003f1506 	br	80a77c <__alt_data_end+0xff80a77c>
  80ab28:	80bff844 	addi	r2,r16,-31
  80ab2c:	00c00804 	movi	r3,32
  80ab30:	9884d83a 	srl	r2,r19,r2
  80ab34:	28c04a26 	beq	r5,r3,80ac60 <__adddf3+0x560>
  80ab38:	00c00fc4 	movi	r3,63
  80ab3c:	1c21c83a 	sub	r16,r3,r16
  80ab40:	9c26983a 	sll	r19,r19,r16
  80ab44:	9c62b03a 	or	r17,r19,r17
  80ab48:	8822c03a 	cmpne	r17,r17,zero
  80ab4c:	88a2b03a 	or	r17,r17,r2
  80ab50:	000b883a 	mov	r5,zero
  80ab54:	0021883a 	mov	r16,zero
  80ab58:	003fb406 	br	80aa2c <__alt_data_end+0xff80aa2c>
  80ab5c:	18bff804 	addi	r2,r3,-32
  80ab60:	01000804 	movi	r4,32
  80ab64:	4084d83a 	srl	r2,r8,r2
  80ab68:	19003f26 	beq	r3,r4,80ac68 <__adddf3+0x568>
  80ab6c:	01001004 	movi	r4,64
  80ab70:	20c7c83a 	sub	r3,r4,r3
  80ab74:	40d0983a 	sll	r8,r8,r3
  80ab78:	418cb03a 	or	r6,r8,r6
  80ab7c:	300cc03a 	cmpne	r6,r6,zero
  80ab80:	308cb03a 	or	r6,r6,r2
  80ab84:	0007883a 	mov	r3,zero
  80ab88:	003f3406 	br	80a85c <__alt_data_end+0xff80a85c>
  80ab8c:	80002326 	beq	r16,zero,80ac1c <__adddf3+0x51c>
  80ab90:	0101ffc4 	movi	r4,2047
  80ab94:	11005e26 	beq	r2,r4,80ad10 <__adddf3+0x610>
  80ab98:	00c7c83a 	sub	r3,zero,r3
  80ab9c:	29402034 	orhi	r5,r5,128
  80aba0:	01000e04 	movi	r4,56
  80aba4:	20c07216 	blt	r4,r3,80ad70 <__adddf3+0x670>
  80aba8:	010007c4 	movi	r4,31
  80abac:	20c0ce16 	blt	r4,r3,80aee8 <__adddf3+0x7e8>
  80abb0:	01000804 	movi	r4,32
  80abb4:	20c9c83a 	sub	r4,r4,r3
  80abb8:	2914983a 	sll	r10,r5,r4
  80abbc:	88d2d83a 	srl	r9,r17,r3
  80abc0:	8908983a 	sll	r4,r17,r4
  80abc4:	28c6d83a 	srl	r3,r5,r3
  80abc8:	5262b03a 	or	r17,r10,r9
  80abcc:	2008c03a 	cmpne	r4,r4,zero
  80abd0:	8922b03a 	or	r17,r17,r4
  80abd4:	3463c83a 	sub	r17,r6,r17
  80abd8:	40c7c83a 	sub	r3,r8,r3
  80abdc:	344d803a 	cmpltu	r6,r6,r17
  80abe0:	198bc83a 	sub	r5,r3,r6
  80abe4:	1021883a 	mov	r16,r2
  80abe8:	3825883a 	mov	r18,r7
  80abec:	003f2006 	br	80a870 <__alt_data_end+0xff80a870>
  80abf0:	9886b03a 	or	r3,r19,r2
  80abf4:	1800141e 	bne	r3,zero,80ac48 <__adddf3+0x548>
  80abf8:	0007883a 	mov	r3,zero
  80abfc:	000b883a 	mov	r5,zero
  80ac00:	0023883a 	mov	r17,zero
  80ac04:	0021883a 	mov	r16,zero
  80ac08:	003f3c06 	br	80a8fc <__alt_data_end+0xff80a8fc>
  80ac0c:	418cb03a 	or	r6,r8,r6
  80ac10:	300cc03a 	cmpne	r6,r6,zero
  80ac14:	0011883a 	mov	r8,zero
  80ac18:	003f5606 	br	80a974 <__alt_data_end+0xff80a974>
  80ac1c:	2c48b03a 	or	r4,r5,r17
  80ac20:	20003b26 	beq	r4,zero,80ad10 <__adddf3+0x610>
  80ac24:	00c6303a 	nor	r3,zero,r3
  80ac28:	1800371e 	bne	r3,zero,80ad08 <__adddf3+0x608>
  80ac2c:	3463c83a 	sub	r17,r6,r17
  80ac30:	414bc83a 	sub	r5,r8,r5
  80ac34:	344d803a 	cmpltu	r6,r6,r17
  80ac38:	298bc83a 	sub	r5,r5,r6
  80ac3c:	1021883a 	mov	r16,r2
  80ac40:	3825883a 	mov	r18,r7
  80ac44:	003f0a06 	br	80a870 <__alt_data_end+0xff80a870>
  80ac48:	1023883a 	mov	r17,r2
  80ac4c:	003f0d06 	br	80a884 <__alt_data_end+0xff80a884>
  80ac50:	0007883a 	mov	r3,zero
  80ac54:	000b883a 	mov	r5,zero
  80ac58:	0023883a 	mov	r17,zero
  80ac5c:	003f2706 	br	80a8fc <__alt_data_end+0xff80a8fc>
  80ac60:	0027883a 	mov	r19,zero
  80ac64:	003fb706 	br	80ab44 <__alt_data_end+0xff80ab44>
  80ac68:	0011883a 	mov	r8,zero
  80ac6c:	003fc206 	br	80ab78 <__alt_data_end+0xff80ab78>
  80ac70:	2c44b03a 	or	r2,r5,r17
  80ac74:	8000871e 	bne	r16,zero,80ae94 <__adddf3+0x794>
  80ac78:	1000b126 	beq	r2,zero,80af40 <__adddf3+0x840>
  80ac7c:	4184b03a 	or	r2,r8,r6
  80ac80:	103ebe26 	beq	r2,zero,80a77c <__alt_data_end+0xff80a77c>
  80ac84:	3445883a 	add	r2,r6,r17
  80ac88:	1463803a 	cmpltu	r17,r2,r17
  80ac8c:	414b883a 	add	r5,r8,r5
  80ac90:	2c4b883a 	add	r5,r5,r17
  80ac94:	28c0202c 	andhi	r3,r5,128
  80ac98:	1023883a 	mov	r17,r2
  80ac9c:	183f6326 	beq	r3,zero,80aa2c <__alt_data_end+0xff80aa2c>
  80aca0:	00bfe034 	movhi	r2,65408
  80aca4:	10bfffc4 	addi	r2,r2,-1
  80aca8:	2021883a 	mov	r16,r4
  80acac:	288a703a 	and	r5,r5,r2
  80acb0:	003eb206 	br	80a77c <__alt_data_end+0xff80a77c>
  80acb4:	2c44b03a 	or	r2,r5,r17
  80acb8:	8000251e 	bne	r16,zero,80ad50 <__adddf3+0x650>
  80acbc:	10004b1e 	bne	r2,zero,80adec <__adddf3+0x6ec>
  80acc0:	4184b03a 	or	r2,r8,r6
  80acc4:	103fe226 	beq	r2,zero,80ac50 <__alt_data_end+0xff80ac50>
  80acc8:	400b883a 	mov	r5,r8
  80accc:	3023883a 	mov	r17,r6
  80acd0:	3825883a 	mov	r18,r7
  80acd4:	003ea906 	br	80a77c <__alt_data_end+0xff80a77c>
  80acd8:	20bff804 	addi	r2,r4,-32
  80acdc:	01c00804 	movi	r7,32
  80ace0:	4084d83a 	srl	r2,r8,r2
  80ace4:	21c07e26 	beq	r4,r7,80aee0 <__adddf3+0x7e0>
  80ace8:	01c01004 	movi	r7,64
  80acec:	3909c83a 	sub	r4,r7,r4
  80acf0:	4110983a 	sll	r8,r8,r4
  80acf4:	418cb03a 	or	r6,r8,r6
  80acf8:	300cc03a 	cmpne	r6,r6,zero
  80acfc:	308cb03a 	or	r6,r6,r2
  80ad00:	0011883a 	mov	r8,zero
  80ad04:	003f1b06 	br	80a974 <__alt_data_end+0xff80a974>
  80ad08:	0101ffc4 	movi	r4,2047
  80ad0c:	113fa41e 	bne	r2,r4,80aba0 <__alt_data_end+0xff80aba0>
  80ad10:	400b883a 	mov	r5,r8
  80ad14:	3023883a 	mov	r17,r6
  80ad18:	1021883a 	mov	r16,r2
  80ad1c:	3825883a 	mov	r18,r7
  80ad20:	003e9606 	br	80a77c <__alt_data_end+0xff80a77c>
  80ad24:	80001a1e 	bne	r16,zero,80ad90 <__adddf3+0x690>
  80ad28:	2c4eb03a 	or	r7,r5,r17
  80ad2c:	38005526 	beq	r7,zero,80ae84 <__adddf3+0x784>
  80ad30:	0108303a 	nor	r4,zero,r4
  80ad34:	2000511e 	bne	r4,zero,80ae7c <__adddf3+0x77c>
  80ad38:	89a3883a 	add	r17,r17,r6
  80ad3c:	414b883a 	add	r5,r8,r5
  80ad40:	898d803a 	cmpltu	r6,r17,r6
  80ad44:	298b883a 	add	r5,r5,r6
  80ad48:	1021883a 	mov	r16,r2
  80ad4c:	003f0e06 	br	80a988 <__alt_data_end+0xff80a988>
  80ad50:	1000341e 	bne	r2,zero,80ae24 <__adddf3+0x724>
  80ad54:	4184b03a 	or	r2,r8,r6
  80ad58:	10006f26 	beq	r2,zero,80af18 <__adddf3+0x818>
  80ad5c:	400b883a 	mov	r5,r8
  80ad60:	3023883a 	mov	r17,r6
  80ad64:	3825883a 	mov	r18,r7
  80ad68:	0401ffc4 	movi	r16,2047
  80ad6c:	003e8306 	br	80a77c <__alt_data_end+0xff80a77c>
  80ad70:	2c62b03a 	or	r17,r5,r17
  80ad74:	8822c03a 	cmpne	r17,r17,zero
  80ad78:	0007883a 	mov	r3,zero
  80ad7c:	003f9506 	br	80abd4 <__alt_data_end+0xff80abd4>
  80ad80:	1021883a 	mov	r16,r2
  80ad84:	000b883a 	mov	r5,zero
  80ad88:	0023883a 	mov	r17,zero
  80ad8c:	003edb06 	br	80a8fc <__alt_data_end+0xff80a8fc>
  80ad90:	01c1ffc4 	movi	r7,2047
  80ad94:	11c03b26 	beq	r2,r7,80ae84 <__adddf3+0x784>
  80ad98:	0109c83a 	sub	r4,zero,r4
  80ad9c:	29402034 	orhi	r5,r5,128
  80ada0:	01c00e04 	movi	r7,56
  80ada4:	39006216 	blt	r7,r4,80af30 <__adddf3+0x830>
  80ada8:	01c007c4 	movi	r7,31
  80adac:	39006b16 	blt	r7,r4,80af5c <__adddf3+0x85c>
  80adb0:	01c00804 	movi	r7,32
  80adb4:	390fc83a 	sub	r7,r7,r4
  80adb8:	29d4983a 	sll	r10,r5,r7
  80adbc:	8912d83a 	srl	r9,r17,r4
  80adc0:	89ce983a 	sll	r7,r17,r7
  80adc4:	2908d83a 	srl	r4,r5,r4
  80adc8:	5262b03a 	or	r17,r10,r9
  80adcc:	380ac03a 	cmpne	r5,r7,zero
  80add0:	8962b03a 	or	r17,r17,r5
  80add4:	89a3883a 	add	r17,r17,r6
  80add8:	2211883a 	add	r8,r4,r8
  80addc:	898d803a 	cmpltu	r6,r17,r6
  80ade0:	418b883a 	add	r5,r8,r6
  80ade4:	1021883a 	mov	r16,r2
  80ade8:	003ee706 	br	80a988 <__alt_data_end+0xff80a988>
  80adec:	4184b03a 	or	r2,r8,r6
  80adf0:	103e6226 	beq	r2,zero,80a77c <__alt_data_end+0xff80a77c>
  80adf4:	8987c83a 	sub	r3,r17,r6
  80adf8:	88c9803a 	cmpltu	r4,r17,r3
  80adfc:	2a05c83a 	sub	r2,r5,r8
  80ae00:	1105c83a 	sub	r2,r2,r4
  80ae04:	1100202c 	andhi	r4,r2,128
  80ae08:	203f0426 	beq	r4,zero,80aa1c <__alt_data_end+0xff80aa1c>
  80ae0c:	3463c83a 	sub	r17,r6,r17
  80ae10:	414bc83a 	sub	r5,r8,r5
  80ae14:	344d803a 	cmpltu	r6,r6,r17
  80ae18:	298bc83a 	sub	r5,r5,r6
  80ae1c:	3825883a 	mov	r18,r7
  80ae20:	003e5606 	br	80a77c <__alt_data_end+0xff80a77c>
  80ae24:	4184b03a 	or	r2,r8,r6
  80ae28:	10002b26 	beq	r2,zero,80aed8 <__adddf3+0x7d8>
  80ae2c:	2804d0fa 	srli	r2,r5,3
  80ae30:	8822d0fa 	srli	r17,r17,3
  80ae34:	280a977a 	slli	r5,r5,29
  80ae38:	10c0022c 	andhi	r3,r2,8
  80ae3c:	2c62b03a 	or	r17,r5,r17
  80ae40:	18000826 	beq	r3,zero,80ae64 <__adddf3+0x764>
  80ae44:	4008d0fa 	srli	r4,r8,3
  80ae48:	20c0022c 	andhi	r3,r4,8
  80ae4c:	1800051e 	bne	r3,zero,80ae64 <__adddf3+0x764>
  80ae50:	300cd0fa 	srli	r6,r6,3
  80ae54:	4010977a 	slli	r8,r8,29
  80ae58:	2005883a 	mov	r2,r4
  80ae5c:	3825883a 	mov	r18,r7
  80ae60:	41a2b03a 	or	r17,r8,r6
  80ae64:	880ad77a 	srli	r5,r17,29
  80ae68:	100490fa 	slli	r2,r2,3
  80ae6c:	882290fa 	slli	r17,r17,3
  80ae70:	0401ffc4 	movi	r16,2047
  80ae74:	288ab03a 	or	r5,r5,r2
  80ae78:	003e4006 	br	80a77c <__alt_data_end+0xff80a77c>
  80ae7c:	01c1ffc4 	movi	r7,2047
  80ae80:	11ffc71e 	bne	r2,r7,80ada0 <__alt_data_end+0xff80ada0>
  80ae84:	400b883a 	mov	r5,r8
  80ae88:	3023883a 	mov	r17,r6
  80ae8c:	1021883a 	mov	r16,r2
  80ae90:	003e3a06 	br	80a77c <__alt_data_end+0xff80a77c>
  80ae94:	10002d26 	beq	r2,zero,80af4c <__adddf3+0x84c>
  80ae98:	4184b03a 	or	r2,r8,r6
  80ae9c:	10000e26 	beq	r2,zero,80aed8 <__adddf3+0x7d8>
  80aea0:	2804d0fa 	srli	r2,r5,3
  80aea4:	8822d0fa 	srli	r17,r17,3
  80aea8:	280a977a 	slli	r5,r5,29
  80aeac:	10c0022c 	andhi	r3,r2,8
  80aeb0:	2c62b03a 	or	r17,r5,r17
  80aeb4:	183feb26 	beq	r3,zero,80ae64 <__alt_data_end+0xff80ae64>
  80aeb8:	4008d0fa 	srli	r4,r8,3
  80aebc:	20c0022c 	andhi	r3,r4,8
  80aec0:	183fe81e 	bne	r3,zero,80ae64 <__alt_data_end+0xff80ae64>
  80aec4:	300cd0fa 	srli	r6,r6,3
  80aec8:	4010977a 	slli	r8,r8,29
  80aecc:	2005883a 	mov	r2,r4
  80aed0:	41a2b03a 	or	r17,r8,r6
  80aed4:	003fe306 	br	80ae64 <__alt_data_end+0xff80ae64>
  80aed8:	0401ffc4 	movi	r16,2047
  80aedc:	003e2706 	br	80a77c <__alt_data_end+0xff80a77c>
  80aee0:	0011883a 	mov	r8,zero
  80aee4:	003f8306 	br	80acf4 <__alt_data_end+0xff80acf4>
  80aee8:	193ff804 	addi	r4,r3,-32
  80aeec:	02400804 	movi	r9,32
  80aef0:	2908d83a 	srl	r4,r5,r4
  80aef4:	1a402526 	beq	r3,r9,80af8c <__adddf3+0x88c>
  80aef8:	02401004 	movi	r9,64
  80aefc:	48c7c83a 	sub	r3,r9,r3
  80af00:	28ca983a 	sll	r5,r5,r3
  80af04:	2c62b03a 	or	r17,r5,r17
  80af08:	8822c03a 	cmpne	r17,r17,zero
  80af0c:	8922b03a 	or	r17,r17,r4
  80af10:	0007883a 	mov	r3,zero
  80af14:	003f2f06 	br	80abd4 <__alt_data_end+0xff80abd4>
  80af18:	01402034 	movhi	r5,128
  80af1c:	0007883a 	mov	r3,zero
  80af20:	297fffc4 	addi	r5,r5,-1
  80af24:	047ffe04 	movi	r17,-8
  80af28:	0401ffc4 	movi	r16,2047
  80af2c:	003e7306 	br	80a8fc <__alt_data_end+0xff80a8fc>
  80af30:	2c62b03a 	or	r17,r5,r17
  80af34:	8822c03a 	cmpne	r17,r17,zero
  80af38:	0009883a 	mov	r4,zero
  80af3c:	003fa506 	br	80add4 <__alt_data_end+0xff80add4>
  80af40:	400b883a 	mov	r5,r8
  80af44:	3023883a 	mov	r17,r6
  80af48:	003e0c06 	br	80a77c <__alt_data_end+0xff80a77c>
  80af4c:	400b883a 	mov	r5,r8
  80af50:	3023883a 	mov	r17,r6
  80af54:	0401ffc4 	movi	r16,2047
  80af58:	003e0806 	br	80a77c <__alt_data_end+0xff80a77c>
  80af5c:	21fff804 	addi	r7,r4,-32
  80af60:	02400804 	movi	r9,32
  80af64:	29ced83a 	srl	r7,r5,r7
  80af68:	22400a26 	beq	r4,r9,80af94 <__adddf3+0x894>
  80af6c:	02401004 	movi	r9,64
  80af70:	4909c83a 	sub	r4,r9,r4
  80af74:	290a983a 	sll	r5,r5,r4
  80af78:	2c62b03a 	or	r17,r5,r17
  80af7c:	8822c03a 	cmpne	r17,r17,zero
  80af80:	89e2b03a 	or	r17,r17,r7
  80af84:	0009883a 	mov	r4,zero
  80af88:	003f9206 	br	80add4 <__alt_data_end+0xff80add4>
  80af8c:	000b883a 	mov	r5,zero
  80af90:	003fdc06 	br	80af04 <__alt_data_end+0xff80af04>
  80af94:	000b883a 	mov	r5,zero
  80af98:	003ff706 	br	80af78 <__alt_data_end+0xff80af78>

0080af9c <__divdf3>:
  80af9c:	defff204 	addi	sp,sp,-56
  80afa0:	dd000815 	stw	r20,32(sp)
  80afa4:	2828d53a 	srli	r20,r5,20
  80afa8:	dd800a15 	stw	r22,40(sp)
  80afac:	282cd7fa 	srli	r22,r5,31
  80afb0:	dc000415 	stw	r16,16(sp)
  80afb4:	04000434 	movhi	r16,16
  80afb8:	df000c15 	stw	fp,48(sp)
  80afbc:	dcc00715 	stw	r19,28(sp)
  80afc0:	dc800615 	stw	r18,24(sp)
  80afc4:	dc400515 	stw	r17,20(sp)
  80afc8:	843fffc4 	addi	r16,r16,-1
  80afcc:	dfc00d15 	stw	ra,52(sp)
  80afd0:	ddc00b15 	stw	r23,44(sp)
  80afd4:	dd400915 	stw	r21,36(sp)
  80afd8:	a501ffcc 	andi	r20,r20,2047
  80afdc:	2025883a 	mov	r18,r4
  80afe0:	2027883a 	mov	r19,r4
  80afe4:	2c22703a 	and	r17,r5,r16
  80afe8:	b7003fcc 	andi	fp,r22,255
  80afec:	a0005e26 	beq	r20,zero,80b168 <__divdf3+0x1cc>
  80aff0:	0081ffc4 	movi	r2,2047
  80aff4:	a0803526 	beq	r20,r2,80b0cc <__divdf3+0x130>
  80aff8:	8c000434 	orhi	r16,r17,16
  80affc:	2004d77a 	srli	r2,r4,29
  80b000:	802090fa 	slli	r16,r16,3
  80b004:	202690fa 	slli	r19,r4,3
  80b008:	a53f0044 	addi	r20,r20,-1023
  80b00c:	80a2b03a 	or	r17,r16,r2
  80b010:	0025883a 	mov	r18,zero
  80b014:	0011883a 	mov	r8,zero
  80b018:	380ad53a 	srli	r5,r7,20
  80b01c:	382ed7fa 	srli	r23,r7,31
  80b020:	04000434 	movhi	r16,16
  80b024:	843fffc4 	addi	r16,r16,-1
  80b028:	2941ffcc 	andi	r5,r5,2047
  80b02c:	302b883a 	mov	r21,r6
  80b030:	3c20703a 	and	r16,r7,r16
  80b034:	ba403fcc 	andi	r9,r23,255
  80b038:	28006726 	beq	r5,zero,80b1d8 <__divdf3+0x23c>
  80b03c:	0081ffc4 	movi	r2,2047
  80b040:	28805f26 	beq	r5,r2,80b1c0 <__divdf3+0x224>
  80b044:	84000434 	orhi	r16,r16,16
  80b048:	3004d77a 	srli	r2,r6,29
  80b04c:	802090fa 	slli	r16,r16,3
  80b050:	302a90fa 	slli	r21,r6,3
  80b054:	297f0044 	addi	r5,r5,-1023
  80b058:	80a0b03a 	or	r16,r16,r2
  80b05c:	000f883a 	mov	r7,zero
  80b060:	3c86b03a 	or	r3,r7,r18
  80b064:	180690ba 	slli	r3,r3,2
  80b068:	00802074 	movhi	r2,129
  80b06c:	10ac2304 	addi	r2,r2,-20340
  80b070:	1887883a 	add	r3,r3,r2
  80b074:	18c00017 	ldw	r3,0(r3)
  80b078:	b5c8f03a 	xor	r4,r22,r23
  80b07c:	200d883a 	mov	r6,r4
  80b080:	24803fcc 	andi	r18,r4,255
  80b084:	a169c83a 	sub	r20,r20,r5
  80b088:	1800683a 	jmp	r3
  80b08c:	0080b2d4 	movui	r2,715
  80b090:	0080b104 	movi	r2,708
  80b094:	0080b298 	cmpnei	r2,zero,714
  80b098:	0080b0e8 	cmpgeui	r2,zero,707
  80b09c:	0080b298 	cmpnei	r2,zero,714
  80b0a0:	0080b26c 	andhi	r2,zero,713
  80b0a4:	0080b298 	cmpnei	r2,zero,714
  80b0a8:	0080b0e8 	cmpgeui	r2,zero,707
  80b0ac:	0080b104 	movi	r2,708
  80b0b0:	0080b104 	movi	r2,708
  80b0b4:	0080b26c 	andhi	r2,zero,713
  80b0b8:	0080b0e8 	cmpgeui	r2,zero,707
  80b0bc:	0080b0f8 	rdprs	r2,zero,707
  80b0c0:	0080b0f8 	rdprs	r2,zero,707
  80b0c4:	0080b0f8 	rdprs	r2,zero,707
  80b0c8:	0080b2a8 	cmpgeui	r2,zero,714
  80b0cc:	8904b03a 	or	r2,r17,r4
  80b0d0:	1000631e 	bne	r2,zero,80b260 <__divdf3+0x2c4>
  80b0d4:	04800204 	movi	r18,8
  80b0d8:	0023883a 	mov	r17,zero
  80b0dc:	0027883a 	mov	r19,zero
  80b0e0:	02000084 	movi	r8,2
  80b0e4:	003fcc06 	br	80b018 <__alt_data_end+0xff80b018>
  80b0e8:	8023883a 	mov	r17,r16
  80b0ec:	a827883a 	mov	r19,r21
  80b0f0:	4839883a 	mov	fp,r9
  80b0f4:	3811883a 	mov	r8,r7
  80b0f8:	00800084 	movi	r2,2
  80b0fc:	40812a1e 	bne	r8,r2,80b5a8 <__divdf3+0x60c>
  80b100:	e025883a 	mov	r18,fp
  80b104:	9180004c 	andi	r6,r18,1
  80b108:	0101ffc4 	movi	r4,2047
  80b10c:	000b883a 	mov	r5,zero
  80b110:	0027883a 	mov	r19,zero
  80b114:	2008953a 	slli	r4,r4,20
  80b118:	30c03fcc 	andi	r3,r6,255
  80b11c:	04000434 	movhi	r16,16
  80b120:	180697fa 	slli	r3,r3,31
  80b124:	843fffc4 	addi	r16,r16,-1
  80b128:	2c20703a 	and	r16,r5,r16
  80b12c:	8120b03a 	or	r16,r16,r4
  80b130:	80c6b03a 	or	r3,r16,r3
  80b134:	9805883a 	mov	r2,r19
  80b138:	dfc00d17 	ldw	ra,52(sp)
  80b13c:	df000c17 	ldw	fp,48(sp)
  80b140:	ddc00b17 	ldw	r23,44(sp)
  80b144:	dd800a17 	ldw	r22,40(sp)
  80b148:	dd400917 	ldw	r21,36(sp)
  80b14c:	dd000817 	ldw	r20,32(sp)
  80b150:	dcc00717 	ldw	r19,28(sp)
  80b154:	dc800617 	ldw	r18,24(sp)
  80b158:	dc400517 	ldw	r17,20(sp)
  80b15c:	dc000417 	ldw	r16,16(sp)
  80b160:	dec00e04 	addi	sp,sp,56
  80b164:	f800283a 	ret
  80b168:	8904b03a 	or	r2,r17,r4
  80b16c:	10003726 	beq	r2,zero,80b24c <__divdf3+0x2b0>
  80b170:	88011c26 	beq	r17,zero,80b5e4 <__divdf3+0x648>
  80b174:	8809883a 	mov	r4,r17
  80b178:	d9800315 	stw	r6,12(sp)
  80b17c:	d9c00115 	stw	r7,4(sp)
  80b180:	080cc9c0 	call	80cc9c <__clzsi2>
  80b184:	d9800317 	ldw	r6,12(sp)
  80b188:	d9c00117 	ldw	r7,4(sp)
  80b18c:	1007883a 	mov	r3,r2
  80b190:	01000a04 	movi	r4,40
  80b194:	1cfffe04 	addi	r19,r3,-8
  80b198:	20c9c83a 	sub	r4,r4,r3
  80b19c:	8cca983a 	sll	r5,r17,r19
  80b1a0:	9108d83a 	srl	r4,r18,r4
  80b1a4:	94e6983a 	sll	r19,r18,r19
  80b1a8:	2162b03a 	or	r17,r4,r5
  80b1ac:	053f0344 	movi	r20,-1011
  80b1b0:	a0e9c83a 	sub	r20,r20,r3
  80b1b4:	0025883a 	mov	r18,zero
  80b1b8:	0011883a 	mov	r8,zero
  80b1bc:	003f9606 	br	80b018 <__alt_data_end+0xff80b018>
  80b1c0:	8184b03a 	or	r2,r16,r6
  80b1c4:	10001f1e 	bne	r2,zero,80b244 <__divdf3+0x2a8>
  80b1c8:	0021883a 	mov	r16,zero
  80b1cc:	002b883a 	mov	r21,zero
  80b1d0:	01c00084 	movi	r7,2
  80b1d4:	003fa206 	br	80b060 <__alt_data_end+0xff80b060>
  80b1d8:	8184b03a 	or	r2,r16,r6
  80b1dc:	10001526 	beq	r2,zero,80b234 <__divdf3+0x298>
  80b1e0:	80010c26 	beq	r16,zero,80b614 <__divdf3+0x678>
  80b1e4:	8009883a 	mov	r4,r16
  80b1e8:	d9800315 	stw	r6,12(sp)
  80b1ec:	da000215 	stw	r8,8(sp)
  80b1f0:	da400015 	stw	r9,0(sp)
  80b1f4:	080cc9c0 	call	80cc9c <__clzsi2>
  80b1f8:	d9800317 	ldw	r6,12(sp)
  80b1fc:	da000217 	ldw	r8,8(sp)
  80b200:	da400017 	ldw	r9,0(sp)
  80b204:	1007883a 	mov	r3,r2
  80b208:	01000a04 	movi	r4,40
  80b20c:	1d7ffe04 	addi	r21,r3,-8
  80b210:	20c9c83a 	sub	r4,r4,r3
  80b214:	8560983a 	sll	r16,r16,r21
  80b218:	3108d83a 	srl	r4,r6,r4
  80b21c:	356a983a 	sll	r21,r6,r21
  80b220:	2420b03a 	or	r16,r4,r16
  80b224:	017f0344 	movi	r5,-1011
  80b228:	28cbc83a 	sub	r5,r5,r3
  80b22c:	000f883a 	mov	r7,zero
  80b230:	003f8b06 	br	80b060 <__alt_data_end+0xff80b060>
  80b234:	0021883a 	mov	r16,zero
  80b238:	002b883a 	mov	r21,zero
  80b23c:	01c00044 	movi	r7,1
  80b240:	003f8706 	br	80b060 <__alt_data_end+0xff80b060>
  80b244:	01c000c4 	movi	r7,3
  80b248:	003f8506 	br	80b060 <__alt_data_end+0xff80b060>
  80b24c:	04800104 	movi	r18,4
  80b250:	0023883a 	mov	r17,zero
  80b254:	0027883a 	mov	r19,zero
  80b258:	02000044 	movi	r8,1
  80b25c:	003f6e06 	br	80b018 <__alt_data_end+0xff80b018>
  80b260:	04800304 	movi	r18,12
  80b264:	020000c4 	movi	r8,3
  80b268:	003f6b06 	br	80b018 <__alt_data_end+0xff80b018>
  80b26c:	01400434 	movhi	r5,16
  80b270:	000d883a 	mov	r6,zero
  80b274:	297fffc4 	addi	r5,r5,-1
  80b278:	04ffffc4 	movi	r19,-1
  80b27c:	0101ffc4 	movi	r4,2047
  80b280:	003fa406 	br	80b114 <__alt_data_end+0xff80b114>
  80b284:	043f0084 	movi	r16,-1022
  80b288:	8521c83a 	sub	r16,r16,r20
  80b28c:	00800e04 	movi	r2,56
  80b290:	1401200e 	bge	r2,r16,80b714 <__divdf3+0x778>
  80b294:	9180004c 	andi	r6,r18,1
  80b298:	0009883a 	mov	r4,zero
  80b29c:	000b883a 	mov	r5,zero
  80b2a0:	0027883a 	mov	r19,zero
  80b2a4:	003f9b06 	br	80b114 <__alt_data_end+0xff80b114>
  80b2a8:	8880022c 	andhi	r2,r17,8
  80b2ac:	1000c726 	beq	r2,zero,80b5cc <__divdf3+0x630>
  80b2b0:	8080022c 	andhi	r2,r16,8
  80b2b4:	1000c51e 	bne	r2,zero,80b5cc <__divdf3+0x630>
  80b2b8:	00800434 	movhi	r2,16
  80b2bc:	81400234 	orhi	r5,r16,8
  80b2c0:	10bfffc4 	addi	r2,r2,-1
  80b2c4:	b80d883a 	mov	r6,r23
  80b2c8:	288a703a 	and	r5,r5,r2
  80b2cc:	a827883a 	mov	r19,r21
  80b2d0:	003fea06 	br	80b27c <__alt_data_end+0xff80b27c>
  80b2d4:	8440ea36 	bltu	r16,r17,80b680 <__divdf3+0x6e4>
  80b2d8:	8c00e826 	beq	r17,r16,80b67c <__divdf3+0x6e0>
  80b2dc:	a53fffc4 	addi	r20,r20,-1
  80b2e0:	882d883a 	mov	r22,r17
  80b2e4:	000d883a 	mov	r6,zero
  80b2e8:	a804d63a 	srli	r2,r21,24
  80b2ec:	8020923a 	slli	r16,r16,8
  80b2f0:	b009883a 	mov	r4,r22
  80b2f4:	d9800315 	stw	r6,12(sp)
  80b2f8:	1420b03a 	or	r16,r2,r16
  80b2fc:	802ed43a 	srli	r23,r16,16
  80b300:	873fffcc 	andi	fp,r16,65535
  80b304:	a82a923a 	slli	r21,r21,8
  80b308:	b80b883a 	mov	r5,r23
  80b30c:	080a6f00 	call	80a6f0 <__udivsi3>
  80b310:	b009883a 	mov	r4,r22
  80b314:	b80b883a 	mov	r5,r23
  80b318:	1023883a 	mov	r17,r2
  80b31c:	080a6f80 	call	80a6f8 <__umodsi3>
  80b320:	1004943a 	slli	r2,r2,16
  80b324:	9808d43a 	srli	r4,r19,16
  80b328:	8f2d383a 	mul	r22,r17,fp
  80b32c:	d9800317 	ldw	r6,12(sp)
  80b330:	1106b03a 	or	r3,r2,r4
  80b334:	1d80062e 	bgeu	r3,r22,80b350 <__divdf3+0x3b4>
  80b338:	1c07883a 	add	r3,r3,r16
  80b33c:	88bfffc4 	addi	r2,r17,-1
  80b340:	1c00dc36 	bltu	r3,r16,80b6b4 <__divdf3+0x718>
  80b344:	1d80db2e 	bgeu	r3,r22,80b6b4 <__divdf3+0x718>
  80b348:	8c7fff84 	addi	r17,r17,-2
  80b34c:	1c07883a 	add	r3,r3,r16
  80b350:	1dadc83a 	sub	r22,r3,r22
  80b354:	b009883a 	mov	r4,r22
  80b358:	b80b883a 	mov	r5,r23
  80b35c:	d9800315 	stw	r6,12(sp)
  80b360:	080a6f00 	call	80a6f0 <__udivsi3>
  80b364:	b009883a 	mov	r4,r22
  80b368:	b80b883a 	mov	r5,r23
  80b36c:	d8800015 	stw	r2,0(sp)
  80b370:	080a6f80 	call	80a6f8 <__umodsi3>
  80b374:	da400017 	ldw	r9,0(sp)
  80b378:	1004943a 	slli	r2,r2,16
  80b37c:	9cffffcc 	andi	r19,r19,65535
  80b380:	4f07383a 	mul	r3,r9,fp
  80b384:	14c8b03a 	or	r4,r2,r19
  80b388:	d9800317 	ldw	r6,12(sp)
  80b38c:	20c0062e 	bgeu	r4,r3,80b3a8 <__divdf3+0x40c>
  80b390:	2409883a 	add	r4,r4,r16
  80b394:	48bfffc4 	addi	r2,r9,-1
  80b398:	2400c436 	bltu	r4,r16,80b6ac <__divdf3+0x710>
  80b39c:	20c0c32e 	bgeu	r4,r3,80b6ac <__divdf3+0x710>
  80b3a0:	4a7fff84 	addi	r9,r9,-2
  80b3a4:	2409883a 	add	r4,r4,r16
  80b3a8:	8822943a 	slli	r17,r17,16
  80b3ac:	a80ed43a 	srli	r7,r21,16
  80b3b0:	aa3fffcc 	andi	r8,r21,65535
  80b3b4:	4c62b03a 	or	r17,r9,r17
  80b3b8:	8816d43a 	srli	r11,r17,16
  80b3bc:	897fffcc 	andi	r5,r17,65535
  80b3c0:	2a15383a 	mul	r10,r5,r8
  80b3c4:	5a19383a 	mul	r12,r11,r8
  80b3c8:	29cb383a 	mul	r5,r5,r7
  80b3cc:	5012d43a 	srli	r9,r10,16
  80b3d0:	20c5c83a 	sub	r2,r4,r3
  80b3d4:	614b883a 	add	r5,r12,r5
  80b3d8:	2a4b883a 	add	r5,r5,r9
  80b3dc:	59c7383a 	mul	r3,r11,r7
  80b3e0:	2b00022e 	bgeu	r5,r12,80b3ec <__divdf3+0x450>
  80b3e4:	01000074 	movhi	r4,1
  80b3e8:	1907883a 	add	r3,r3,r4
  80b3ec:	2808d43a 	srli	r4,r5,16
  80b3f0:	280a943a 	slli	r5,r5,16
  80b3f4:	54ffffcc 	andi	r19,r10,65535
  80b3f8:	1907883a 	add	r3,r3,r4
  80b3fc:	2ccb883a 	add	r5,r5,r19
  80b400:	10c09336 	bltu	r2,r3,80b650 <__divdf3+0x6b4>
  80b404:	10c0ad26 	beq	r2,r3,80b6bc <__divdf3+0x720>
  80b408:	10c7c83a 	sub	r3,r2,r3
  80b40c:	3167c83a 	sub	r19,r6,r5
  80b410:	34ed803a 	cmpltu	r22,r6,r19
  80b414:	1dadc83a 	sub	r22,r3,r22
  80b418:	b400b226 	beq	r22,r16,80b6e4 <__divdf3+0x748>
  80b41c:	b009883a 	mov	r4,r22
  80b420:	b80b883a 	mov	r5,r23
  80b424:	d9c00115 	stw	r7,4(sp)
  80b428:	da000215 	stw	r8,8(sp)
  80b42c:	080a6f00 	call	80a6f0 <__udivsi3>
  80b430:	b009883a 	mov	r4,r22
  80b434:	b80b883a 	mov	r5,r23
  80b438:	d8800315 	stw	r2,12(sp)
  80b43c:	080a6f80 	call	80a6f8 <__umodsi3>
  80b440:	d9800317 	ldw	r6,12(sp)
  80b444:	1004943a 	slli	r2,r2,16
  80b448:	9808d43a 	srli	r4,r19,16
  80b44c:	372d383a 	mul	r22,r6,fp
  80b450:	d9c00117 	ldw	r7,4(sp)
  80b454:	1106b03a 	or	r3,r2,r4
  80b458:	da000217 	ldw	r8,8(sp)
  80b45c:	1d80062e 	bgeu	r3,r22,80b478 <__divdf3+0x4dc>
  80b460:	1c07883a 	add	r3,r3,r16
  80b464:	30bfffc4 	addi	r2,r6,-1
  80b468:	1c00a036 	bltu	r3,r16,80b6ec <__divdf3+0x750>
  80b46c:	1d809f2e 	bgeu	r3,r22,80b6ec <__divdf3+0x750>
  80b470:	31bfff84 	addi	r6,r6,-2
  80b474:	1c07883a 	add	r3,r3,r16
  80b478:	1dadc83a 	sub	r22,r3,r22
  80b47c:	b009883a 	mov	r4,r22
  80b480:	b80b883a 	mov	r5,r23
  80b484:	d9800315 	stw	r6,12(sp)
  80b488:	d9c00115 	stw	r7,4(sp)
  80b48c:	da000215 	stw	r8,8(sp)
  80b490:	080a6f00 	call	80a6f0 <__udivsi3>
  80b494:	b009883a 	mov	r4,r22
  80b498:	b80b883a 	mov	r5,r23
  80b49c:	d8800015 	stw	r2,0(sp)
  80b4a0:	080a6f80 	call	80a6f8 <__umodsi3>
  80b4a4:	da400017 	ldw	r9,0(sp)
  80b4a8:	1004943a 	slli	r2,r2,16
  80b4ac:	993fffcc 	andi	r4,r19,65535
  80b4b0:	4f39383a 	mul	fp,r9,fp
  80b4b4:	1106b03a 	or	r3,r2,r4
  80b4b8:	d9800317 	ldw	r6,12(sp)
  80b4bc:	d9c00117 	ldw	r7,4(sp)
  80b4c0:	da000217 	ldw	r8,8(sp)
  80b4c4:	1f00062e 	bgeu	r3,fp,80b4e0 <__divdf3+0x544>
  80b4c8:	1c07883a 	add	r3,r3,r16
  80b4cc:	48bfffc4 	addi	r2,r9,-1
  80b4d0:	1c008836 	bltu	r3,r16,80b6f4 <__divdf3+0x758>
  80b4d4:	1f00872e 	bgeu	r3,fp,80b6f4 <__divdf3+0x758>
  80b4d8:	4a7fff84 	addi	r9,r9,-2
  80b4dc:	1c07883a 	add	r3,r3,r16
  80b4e0:	3008943a 	slli	r4,r6,16
  80b4e4:	1f07c83a 	sub	r3,r3,fp
  80b4e8:	4926b03a 	or	r19,r9,r4
  80b4ec:	993fffcc 	andi	r4,r19,65535
  80b4f0:	980cd43a 	srli	r6,r19,16
  80b4f4:	220b383a 	mul	r5,r4,r8
  80b4f8:	21c5383a 	mul	r2,r4,r7
  80b4fc:	3211383a 	mul	r8,r6,r8
  80b500:	2808d43a 	srli	r4,r5,16
  80b504:	31cf383a 	mul	r7,r6,r7
  80b508:	4085883a 	add	r2,r8,r2
  80b50c:	1105883a 	add	r2,r2,r4
  80b510:	1200022e 	bgeu	r2,r8,80b51c <__divdf3+0x580>
  80b514:	01000074 	movhi	r4,1
  80b518:	390f883a 	add	r7,r7,r4
  80b51c:	1008d43a 	srli	r4,r2,16
  80b520:	1004943a 	slli	r2,r2,16
  80b524:	297fffcc 	andi	r5,r5,65535
  80b528:	390f883a 	add	r7,r7,r4
  80b52c:	1145883a 	add	r2,r2,r5
  80b530:	19c06536 	bltu	r3,r7,80b6c8 <__divdf3+0x72c>
  80b534:	19c09f26 	beq	r3,r7,80b7b4 <__divdf3+0x818>
  80b538:	9cc00054 	ori	r19,r19,1
  80b53c:	a100ffc4 	addi	r4,r20,1023
  80b540:	013f500e 	bge	zero,r4,80b284 <__alt_data_end+0xff80b284>
  80b544:	988001cc 	andi	r2,r19,7
  80b548:	10000726 	beq	r2,zero,80b568 <__divdf3+0x5cc>
  80b54c:	98c003cc 	andi	r3,r19,15
  80b550:	00800104 	movi	r2,4
  80b554:	18800426 	beq	r3,r2,80b568 <__divdf3+0x5cc>
  80b558:	9885883a 	add	r2,r19,r2
  80b55c:	14e1803a 	cmpltu	r16,r2,r19
  80b560:	8c23883a 	add	r17,r17,r16
  80b564:	1027883a 	mov	r19,r2
  80b568:	8880402c 	andhi	r2,r17,256
  80b56c:	10000426 	beq	r2,zero,80b580 <__divdf3+0x5e4>
  80b570:	00bfc034 	movhi	r2,65280
  80b574:	10bfffc4 	addi	r2,r2,-1
  80b578:	a1010004 	addi	r4,r20,1024
  80b57c:	88a2703a 	and	r17,r17,r2
  80b580:	0081ff84 	movi	r2,2046
  80b584:	113edf16 	blt	r2,r4,80b104 <__alt_data_end+0xff80b104>
  80b588:	9826d0fa 	srli	r19,r19,3
  80b58c:	8804977a 	slli	r2,r17,29
  80b590:	8820927a 	slli	r16,r17,9
  80b594:	2101ffcc 	andi	r4,r4,2047
  80b598:	14e6b03a 	or	r19,r2,r19
  80b59c:	800ad33a 	srli	r5,r16,12
  80b5a0:	9180004c 	andi	r6,r18,1
  80b5a4:	003edb06 	br	80b114 <__alt_data_end+0xff80b114>
  80b5a8:	008000c4 	movi	r2,3
  80b5ac:	4080a826 	beq	r8,r2,80b850 <__divdf3+0x8b4>
  80b5b0:	00800044 	movi	r2,1
  80b5b4:	4080551e 	bne	r8,r2,80b70c <__divdf3+0x770>
  80b5b8:	e00d883a 	mov	r6,fp
  80b5bc:	0009883a 	mov	r4,zero
  80b5c0:	000b883a 	mov	r5,zero
  80b5c4:	0027883a 	mov	r19,zero
  80b5c8:	003ed206 	br	80b114 <__alt_data_end+0xff80b114>
  80b5cc:	00800434 	movhi	r2,16
  80b5d0:	89400234 	orhi	r5,r17,8
  80b5d4:	10bfffc4 	addi	r2,r2,-1
  80b5d8:	b00d883a 	mov	r6,r22
  80b5dc:	288a703a 	and	r5,r5,r2
  80b5e0:	003f2606 	br	80b27c <__alt_data_end+0xff80b27c>
  80b5e4:	d9800315 	stw	r6,12(sp)
  80b5e8:	d9c00115 	stw	r7,4(sp)
  80b5ec:	080cc9c0 	call	80cc9c <__clzsi2>
  80b5f0:	10c00804 	addi	r3,r2,32
  80b5f4:	010009c4 	movi	r4,39
  80b5f8:	d9800317 	ldw	r6,12(sp)
  80b5fc:	d9c00117 	ldw	r7,4(sp)
  80b600:	20fee30e 	bge	r4,r3,80b190 <__alt_data_end+0xff80b190>
  80b604:	117ffe04 	addi	r5,r2,-8
  80b608:	9162983a 	sll	r17,r18,r5
  80b60c:	0027883a 	mov	r19,zero
  80b610:	003ee606 	br	80b1ac <__alt_data_end+0xff80b1ac>
  80b614:	3009883a 	mov	r4,r6
  80b618:	d9800315 	stw	r6,12(sp)
  80b61c:	da000215 	stw	r8,8(sp)
  80b620:	da400015 	stw	r9,0(sp)
  80b624:	080cc9c0 	call	80cc9c <__clzsi2>
  80b628:	10c00804 	addi	r3,r2,32
  80b62c:	010009c4 	movi	r4,39
  80b630:	d9800317 	ldw	r6,12(sp)
  80b634:	da000217 	ldw	r8,8(sp)
  80b638:	da400017 	ldw	r9,0(sp)
  80b63c:	20fef20e 	bge	r4,r3,80b208 <__alt_data_end+0xff80b208>
  80b640:	10bffe04 	addi	r2,r2,-8
  80b644:	a8a0983a 	sll	r16,r21,r2
  80b648:	002b883a 	mov	r21,zero
  80b64c:	003ef506 	br	80b224 <__alt_data_end+0xff80b224>
  80b650:	354d883a 	add	r6,r6,r21
  80b654:	3549803a 	cmpltu	r4,r6,r21
  80b658:	2409883a 	add	r4,r4,r16
  80b65c:	2089883a 	add	r4,r4,r2
  80b660:	88bfffc4 	addi	r2,r17,-1
  80b664:	81000c2e 	bgeu	r16,r4,80b698 <__divdf3+0x6fc>
  80b668:	20c04436 	bltu	r4,r3,80b77c <__divdf3+0x7e0>
  80b66c:	19006f26 	beq	r3,r4,80b82c <__divdf3+0x890>
  80b670:	20c7c83a 	sub	r3,r4,r3
  80b674:	1023883a 	mov	r17,r2
  80b678:	003f6406 	br	80b40c <__alt_data_end+0xff80b40c>
  80b67c:	9d7f1736 	bltu	r19,r21,80b2dc <__alt_data_end+0xff80b2dc>
  80b680:	9806d07a 	srli	r3,r19,1
  80b684:	880497fa 	slli	r2,r17,31
  80b688:	980c97fa 	slli	r6,r19,31
  80b68c:	882cd07a 	srli	r22,r17,1
  80b690:	18a6b03a 	or	r19,r3,r2
  80b694:	003f1406 	br	80b2e8 <__alt_data_end+0xff80b2e8>
  80b698:	243ff51e 	bne	r4,r16,80b670 <__alt_data_end+0xff80b670>
  80b69c:	357ff22e 	bgeu	r6,r21,80b668 <__alt_data_end+0xff80b668>
  80b6a0:	80c7c83a 	sub	r3,r16,r3
  80b6a4:	1023883a 	mov	r17,r2
  80b6a8:	003f5806 	br	80b40c <__alt_data_end+0xff80b40c>
  80b6ac:	1013883a 	mov	r9,r2
  80b6b0:	003f3d06 	br	80b3a8 <__alt_data_end+0xff80b3a8>
  80b6b4:	1023883a 	mov	r17,r2
  80b6b8:	003f2506 	br	80b350 <__alt_data_end+0xff80b350>
  80b6bc:	317fe436 	bltu	r6,r5,80b650 <__alt_data_end+0xff80b650>
  80b6c0:	0007883a 	mov	r3,zero
  80b6c4:	003f5106 	br	80b40c <__alt_data_end+0xff80b40c>
  80b6c8:	1c07883a 	add	r3,r3,r16
  80b6cc:	993fffc4 	addi	r4,r19,-1
  80b6d0:	1c000a2e 	bgeu	r3,r16,80b6fc <__divdf3+0x760>
  80b6d4:	2027883a 	mov	r19,r4
  80b6d8:	19ff971e 	bne	r3,r7,80b538 <__alt_data_end+0xff80b538>
  80b6dc:	a8bf961e 	bne	r21,r2,80b538 <__alt_data_end+0xff80b538>
  80b6e0:	003f9606 	br	80b53c <__alt_data_end+0xff80b53c>
  80b6e4:	04ffffc4 	movi	r19,-1
  80b6e8:	003f9406 	br	80b53c <__alt_data_end+0xff80b53c>
  80b6ec:	100d883a 	mov	r6,r2
  80b6f0:	003f6106 	br	80b478 <__alt_data_end+0xff80b478>
  80b6f4:	1013883a 	mov	r9,r2
  80b6f8:	003f7906 	br	80b4e0 <__alt_data_end+0xff80b4e0>
  80b6fc:	19c02636 	bltu	r3,r7,80b798 <__divdf3+0x7fc>
  80b700:	38c04d26 	beq	r7,r3,80b838 <__divdf3+0x89c>
  80b704:	2027883a 	mov	r19,r4
  80b708:	003f8b06 	br	80b538 <__alt_data_end+0xff80b538>
  80b70c:	e025883a 	mov	r18,fp
  80b710:	003f8a06 	br	80b53c <__alt_data_end+0xff80b53c>
  80b714:	008007c4 	movi	r2,31
  80b718:	14002a16 	blt	r2,r16,80b7c4 <__divdf3+0x828>
  80b71c:	a5010784 	addi	r20,r20,1054
  80b720:	8d04983a 	sll	r2,r17,r20
  80b724:	9c06d83a 	srl	r3,r19,r16
  80b728:	9d28983a 	sll	r20,r19,r20
  80b72c:	8c20d83a 	srl	r16,r17,r16
  80b730:	1886b03a 	or	r3,r3,r2
  80b734:	a004c03a 	cmpne	r2,r20,zero
  80b738:	1884b03a 	or	r2,r3,r2
  80b73c:	10c001cc 	andi	r3,r2,7
  80b740:	18000726 	beq	r3,zero,80b760 <__divdf3+0x7c4>
  80b744:	110003cc 	andi	r4,r2,15
  80b748:	00c00104 	movi	r3,4
  80b74c:	20c00426 	beq	r4,r3,80b760 <__divdf3+0x7c4>
  80b750:	10c00104 	addi	r3,r2,4
  80b754:	1885803a 	cmpltu	r2,r3,r2
  80b758:	80a1883a 	add	r16,r16,r2
  80b75c:	1805883a 	mov	r2,r3
  80b760:	80c0202c 	andhi	r3,r16,128
  80b764:	18002d26 	beq	r3,zero,80b81c <__divdf3+0x880>
  80b768:	9180004c 	andi	r6,r18,1
  80b76c:	01000044 	movi	r4,1
  80b770:	000b883a 	mov	r5,zero
  80b774:	0027883a 	mov	r19,zero
  80b778:	003e6606 	br	80b114 <__alt_data_end+0xff80b114>
  80b77c:	354d883a 	add	r6,r6,r21
  80b780:	356d803a 	cmpltu	r22,r6,r21
  80b784:	b42d883a 	add	r22,r22,r16
  80b788:	b12d883a 	add	r22,r22,r4
  80b78c:	8c7fff84 	addi	r17,r17,-2
  80b790:	b0c7c83a 	sub	r3,r22,r3
  80b794:	003f1d06 	br	80b40c <__alt_data_end+0xff80b40c>
  80b798:	ad4b883a 	add	r5,r21,r21
  80b79c:	2d6b803a 	cmpltu	r21,r5,r21
  80b7a0:	ac2b883a 	add	r21,r21,r16
  80b7a4:	1d47883a 	add	r3,r3,r21
  80b7a8:	993fff84 	addi	r4,r19,-2
  80b7ac:	282b883a 	mov	r21,r5
  80b7b0:	003fc806 	br	80b6d4 <__alt_data_end+0xff80b6d4>
  80b7b4:	103fc41e 	bne	r2,zero,80b6c8 <__alt_data_end+0xff80b6c8>
  80b7b8:	002b883a 	mov	r21,zero
  80b7bc:	a8bf5e1e 	bne	r21,r2,80b538 <__alt_data_end+0xff80b538>
  80b7c0:	003f5e06 	br	80b53c <__alt_data_end+0xff80b53c>
  80b7c4:	00bef884 	movi	r2,-1054
  80b7c8:	1505c83a 	sub	r2,r2,r20
  80b7cc:	00c00804 	movi	r3,32
  80b7d0:	8884d83a 	srl	r2,r17,r2
  80b7d4:	80c01c26 	beq	r16,r3,80b848 <__divdf3+0x8ac>
  80b7d8:	a0c10f84 	addi	r3,r20,1086
  80b7dc:	88c6983a 	sll	r3,r17,r3
  80b7e0:	1cc6b03a 	or	r3,r3,r19
  80b7e4:	1806c03a 	cmpne	r3,r3,zero
  80b7e8:	1884b03a 	or	r2,r3,r2
  80b7ec:	140001cc 	andi	r16,r2,7
  80b7f0:	8000061e 	bne	r16,zero,80b80c <__divdf3+0x870>
  80b7f4:	000b883a 	mov	r5,zero
  80b7f8:	1004d0fa 	srli	r2,r2,3
  80b7fc:	9180004c 	andi	r6,r18,1
  80b800:	0009883a 	mov	r4,zero
  80b804:	1426b03a 	or	r19,r2,r16
  80b808:	003e4206 	br	80b114 <__alt_data_end+0xff80b114>
  80b80c:	110003cc 	andi	r4,r2,15
  80b810:	00c00104 	movi	r3,4
  80b814:	0021883a 	mov	r16,zero
  80b818:	20ffcd1e 	bne	r4,r3,80b750 <__alt_data_end+0xff80b750>
  80b81c:	800a927a 	slli	r5,r16,9
  80b820:	8020977a 	slli	r16,r16,29
  80b824:	280ad33a 	srli	r5,r5,12
  80b828:	003ff306 	br	80b7f8 <__alt_data_end+0xff80b7f8>
  80b82c:	317fd336 	bltu	r6,r5,80b77c <__alt_data_end+0xff80b77c>
  80b830:	1023883a 	mov	r17,r2
  80b834:	003fa206 	br	80b6c0 <__alt_data_end+0xff80b6c0>
  80b838:	a8bfd736 	bltu	r21,r2,80b798 <__alt_data_end+0xff80b798>
  80b83c:	2027883a 	mov	r19,r4
  80b840:	a8bf3d1e 	bne	r21,r2,80b538 <__alt_data_end+0xff80b538>
  80b844:	003f3d06 	br	80b53c <__alt_data_end+0xff80b53c>
  80b848:	0007883a 	mov	r3,zero
  80b84c:	003fe406 	br	80b7e0 <__alt_data_end+0xff80b7e0>
  80b850:	00800434 	movhi	r2,16
  80b854:	89400234 	orhi	r5,r17,8
  80b858:	10bfffc4 	addi	r2,r2,-1
  80b85c:	e00d883a 	mov	r6,fp
  80b860:	288a703a 	and	r5,r5,r2
  80b864:	003e8506 	br	80b27c <__alt_data_end+0xff80b27c>

0080b868 <__eqdf2>:
  80b868:	2804d53a 	srli	r2,r5,20
  80b86c:	3806d53a 	srli	r3,r7,20
  80b870:	02000434 	movhi	r8,16
  80b874:	423fffc4 	addi	r8,r8,-1
  80b878:	1081ffcc 	andi	r2,r2,2047
  80b87c:	0241ffc4 	movi	r9,2047
  80b880:	2a14703a 	and	r10,r5,r8
  80b884:	18c1ffcc 	andi	r3,r3,2047
  80b888:	3a10703a 	and	r8,r7,r8
  80b88c:	280ad7fa 	srli	r5,r5,31
  80b890:	380ed7fa 	srli	r7,r7,31
  80b894:	12400f26 	beq	r2,r9,80b8d4 <__eqdf2+0x6c>
  80b898:	0241ffc4 	movi	r9,2047
  80b89c:	1a400326 	beq	r3,r9,80b8ac <__eqdf2+0x44>
  80b8a0:	10c00526 	beq	r2,r3,80b8b8 <__eqdf2+0x50>
  80b8a4:	00800044 	movi	r2,1
  80b8a8:	f800283a 	ret
  80b8ac:	4192b03a 	or	r9,r8,r6
  80b8b0:	483ffc1e 	bne	r9,zero,80b8a4 <__alt_data_end+0xff80b8a4>
  80b8b4:	10fffb1e 	bne	r2,r3,80b8a4 <__alt_data_end+0xff80b8a4>
  80b8b8:	523ffa1e 	bne	r10,r8,80b8a4 <__alt_data_end+0xff80b8a4>
  80b8bc:	21bff91e 	bne	r4,r6,80b8a4 <__alt_data_end+0xff80b8a4>
  80b8c0:	29c00826 	beq	r5,r7,80b8e4 <__eqdf2+0x7c>
  80b8c4:	103ff71e 	bne	r2,zero,80b8a4 <__alt_data_end+0xff80b8a4>
  80b8c8:	5104b03a 	or	r2,r10,r4
  80b8cc:	1004c03a 	cmpne	r2,r2,zero
  80b8d0:	f800283a 	ret
  80b8d4:	5112b03a 	or	r9,r10,r4
  80b8d8:	483fef26 	beq	r9,zero,80b898 <__alt_data_end+0xff80b898>
  80b8dc:	00800044 	movi	r2,1
  80b8e0:	f800283a 	ret
  80b8e4:	0005883a 	mov	r2,zero
  80b8e8:	f800283a 	ret

0080b8ec <__gedf2>:
  80b8ec:	2804d53a 	srli	r2,r5,20
  80b8f0:	3806d53a 	srli	r3,r7,20
  80b8f4:	02000434 	movhi	r8,16
  80b8f8:	423fffc4 	addi	r8,r8,-1
  80b8fc:	0241ffc4 	movi	r9,2047
  80b900:	1081ffcc 	andi	r2,r2,2047
  80b904:	2a14703a 	and	r10,r5,r8
  80b908:	1a46703a 	and	r3,r3,r9
  80b90c:	3a10703a 	and	r8,r7,r8
  80b910:	280ad7fa 	srli	r5,r5,31
  80b914:	380ed7fa 	srli	r7,r7,31
  80b918:	12400b26 	beq	r2,r9,80b948 <__gedf2+0x5c>
  80b91c:	1a401626 	beq	r3,r9,80b978 <__gedf2+0x8c>
  80b920:	10000c1e 	bne	r2,zero,80b954 <__gedf2+0x68>
  80b924:	5112b03a 	or	r9,r10,r4
  80b928:	4813003a 	cmpeq	r9,r9,zero
  80b92c:	4817883a 	mov	r11,r9
  80b930:	18000c1e 	bne	r3,zero,80b964 <__gedf2+0x78>
  80b934:	4198b03a 	or	r12,r8,r6
  80b938:	60000a1e 	bne	r12,zero,80b964 <__gedf2+0x78>
  80b93c:	48001326 	beq	r9,zero,80b98c <__gedf2+0xa0>
  80b940:	0005883a 	mov	r2,zero
  80b944:	f800283a 	ret
  80b948:	5112b03a 	or	r9,r10,r4
  80b94c:	4800191e 	bne	r9,zero,80b9b4 <__gedf2+0xc8>
  80b950:	18800926 	beq	r3,r2,80b978 <__gedf2+0x8c>
  80b954:	18000b1e 	bne	r3,zero,80b984 <__gedf2+0x98>
  80b958:	4192b03a 	or	r9,r8,r6
  80b95c:	0017883a 	mov	r11,zero
  80b960:	48000a26 	beq	r9,zero,80b98c <__gedf2+0xa0>
  80b964:	39c03fcc 	andi	r7,r7,255
  80b968:	58000726 	beq	r11,zero,80b988 <__gedf2+0x9c>
  80b96c:	3800081e 	bne	r7,zero,80b990 <__gedf2+0xa4>
  80b970:	00bfffc4 	movi	r2,-1
  80b974:	f800283a 	ret
  80b978:	4192b03a 	or	r9,r8,r6
  80b97c:	48000d1e 	bne	r9,zero,80b9b4 <__gedf2+0xc8>
  80b980:	103fe826 	beq	r2,zero,80b924 <__alt_data_end+0xff80b924>
  80b984:	39c03fcc 	andi	r7,r7,255
  80b988:	29c00326 	beq	r5,r7,80b998 <__gedf2+0xac>
  80b98c:	283ff81e 	bne	r5,zero,80b970 <__alt_data_end+0xff80b970>
  80b990:	00800044 	movi	r2,1
  80b994:	f800283a 	ret
  80b998:	18bffc16 	blt	r3,r2,80b98c <__alt_data_end+0xff80b98c>
  80b99c:	10c00316 	blt	r2,r3,80b9ac <__gedf2+0xc0>
  80b9a0:	42bffa36 	bltu	r8,r10,80b98c <__alt_data_end+0xff80b98c>
  80b9a4:	52000526 	beq	r10,r8,80b9bc <__gedf2+0xd0>
  80b9a8:	523fe52e 	bgeu	r10,r8,80b940 <__alt_data_end+0xff80b940>
  80b9ac:	283ff026 	beq	r5,zero,80b970 <__alt_data_end+0xff80b970>
  80b9b0:	003ff706 	br	80b990 <__alt_data_end+0xff80b990>
  80b9b4:	00bfff84 	movi	r2,-2
  80b9b8:	f800283a 	ret
  80b9bc:	313ff336 	bltu	r6,r4,80b98c <__alt_data_end+0xff80b98c>
  80b9c0:	21bfdf2e 	bgeu	r4,r6,80b940 <__alt_data_end+0xff80b940>
  80b9c4:	283fea26 	beq	r5,zero,80b970 <__alt_data_end+0xff80b970>
  80b9c8:	003ff106 	br	80b990 <__alt_data_end+0xff80b990>

0080b9cc <__ledf2>:
  80b9cc:	2804d53a 	srli	r2,r5,20
  80b9d0:	3810d53a 	srli	r8,r7,20
  80b9d4:	00c00434 	movhi	r3,16
  80b9d8:	18ffffc4 	addi	r3,r3,-1
  80b9dc:	0241ffc4 	movi	r9,2047
  80b9e0:	1081ffcc 	andi	r2,r2,2047
  80b9e4:	28d4703a 	and	r10,r5,r3
  80b9e8:	4250703a 	and	r8,r8,r9
  80b9ec:	38c6703a 	and	r3,r7,r3
  80b9f0:	280ad7fa 	srli	r5,r5,31
  80b9f4:	380ed7fa 	srli	r7,r7,31
  80b9f8:	12400b26 	beq	r2,r9,80ba28 <__ledf2+0x5c>
  80b9fc:	42401926 	beq	r8,r9,80ba64 <__ledf2+0x98>
  80ba00:	10000c1e 	bne	r2,zero,80ba34 <__ledf2+0x68>
  80ba04:	5112b03a 	or	r9,r10,r4
  80ba08:	4813003a 	cmpeq	r9,r9,zero
  80ba0c:	4817883a 	mov	r11,r9
  80ba10:	40000f26 	beq	r8,zero,80ba50 <__ledf2+0x84>
  80ba14:	39c03fcc 	andi	r7,r7,255
  80ba18:	58001826 	beq	r11,zero,80ba7c <__ledf2+0xb0>
  80ba1c:	38000a1e 	bne	r7,zero,80ba48 <__ledf2+0x7c>
  80ba20:	00bfffc4 	movi	r2,-1
  80ba24:	f800283a 	ret
  80ba28:	5112b03a 	or	r9,r10,r4
  80ba2c:	48000f1e 	bne	r9,zero,80ba6c <__ledf2+0xa0>
  80ba30:	40800c26 	beq	r8,r2,80ba64 <__ledf2+0x98>
  80ba34:	4000101e 	bne	r8,zero,80ba78 <__ledf2+0xac>
  80ba38:	1992b03a 	or	r9,r3,r6
  80ba3c:	0017883a 	mov	r11,zero
  80ba40:	483ff41e 	bne	r9,zero,80ba14 <__alt_data_end+0xff80ba14>
  80ba44:	283ff61e 	bne	r5,zero,80ba20 <__alt_data_end+0xff80ba20>
  80ba48:	00800044 	movi	r2,1
  80ba4c:	f800283a 	ret
  80ba50:	1998b03a 	or	r12,r3,r6
  80ba54:	603fef1e 	bne	r12,zero,80ba14 <__alt_data_end+0xff80ba14>
  80ba58:	483ffa26 	beq	r9,zero,80ba44 <__alt_data_end+0xff80ba44>
  80ba5c:	0005883a 	mov	r2,zero
  80ba60:	f800283a 	ret
  80ba64:	1992b03a 	or	r9,r3,r6
  80ba68:	48000226 	beq	r9,zero,80ba74 <__ledf2+0xa8>
  80ba6c:	00800084 	movi	r2,2
  80ba70:	f800283a 	ret
  80ba74:	103fe326 	beq	r2,zero,80ba04 <__alt_data_end+0xff80ba04>
  80ba78:	39c03fcc 	andi	r7,r7,255
  80ba7c:	29fff11e 	bne	r5,r7,80ba44 <__alt_data_end+0xff80ba44>
  80ba80:	40bff016 	blt	r8,r2,80ba44 <__alt_data_end+0xff80ba44>
  80ba84:	12000316 	blt	r2,r8,80ba94 <__ledf2+0xc8>
  80ba88:	1abfee36 	bltu	r3,r10,80ba44 <__alt_data_end+0xff80ba44>
  80ba8c:	50c00326 	beq	r10,r3,80ba9c <__ledf2+0xd0>
  80ba90:	50fff22e 	bgeu	r10,r3,80ba5c <__alt_data_end+0xff80ba5c>
  80ba94:	283fe226 	beq	r5,zero,80ba20 <__alt_data_end+0xff80ba20>
  80ba98:	003feb06 	br	80ba48 <__alt_data_end+0xff80ba48>
  80ba9c:	313fe936 	bltu	r6,r4,80ba44 <__alt_data_end+0xff80ba44>
  80baa0:	21bfee2e 	bgeu	r4,r6,80ba5c <__alt_data_end+0xff80ba5c>
  80baa4:	283fde26 	beq	r5,zero,80ba20 <__alt_data_end+0xff80ba20>
  80baa8:	003fe706 	br	80ba48 <__alt_data_end+0xff80ba48>

0080baac <__muldf3>:
  80baac:	defff204 	addi	sp,sp,-56
  80bab0:	2804d53a 	srli	r2,r5,20
  80bab4:	dd800a15 	stw	r22,40(sp)
  80bab8:	282cd7fa 	srli	r22,r5,31
  80babc:	dc000415 	stw	r16,16(sp)
  80bac0:	04000434 	movhi	r16,16
  80bac4:	df000c15 	stw	fp,48(sp)
  80bac8:	dd000815 	stw	r20,32(sp)
  80bacc:	dcc00715 	stw	r19,28(sp)
  80bad0:	dc800615 	stw	r18,24(sp)
  80bad4:	dc400515 	stw	r17,20(sp)
  80bad8:	843fffc4 	addi	r16,r16,-1
  80badc:	dfc00d15 	stw	ra,52(sp)
  80bae0:	ddc00b15 	stw	r23,44(sp)
  80bae4:	dd400915 	stw	r21,36(sp)
  80bae8:	1501ffcc 	andi	r20,r2,2047
  80baec:	2023883a 	mov	r17,r4
  80baf0:	2025883a 	mov	r18,r4
  80baf4:	2c20703a 	and	r16,r5,r16
  80baf8:	b027883a 	mov	r19,r22
  80bafc:	b7003fcc 	andi	fp,r22,255
  80bb00:	a0005926 	beq	r20,zero,80bc68 <__muldf3+0x1bc>
  80bb04:	0081ffc4 	movi	r2,2047
  80bb08:	a0803426 	beq	r20,r2,80bbdc <__muldf3+0x130>
  80bb0c:	84000434 	orhi	r16,r16,16
  80bb10:	2004d77a 	srli	r2,r4,29
  80bb14:	802090fa 	slli	r16,r16,3
  80bb18:	202490fa 	slli	r18,r4,3
  80bb1c:	a53f0044 	addi	r20,r20,-1023
  80bb20:	80a0b03a 	or	r16,r16,r2
  80bb24:	002b883a 	mov	r21,zero
  80bb28:	0015883a 	mov	r10,zero
  80bb2c:	3812d53a 	srli	r9,r7,20
  80bb30:	3806d7fa 	srli	r3,r7,31
  80bb34:	02000434 	movhi	r8,16
  80bb38:	423fffc4 	addi	r8,r8,-1
  80bb3c:	4941ffcc 	andi	r5,r9,2047
  80bb40:	302f883a 	mov	r23,r6
  80bb44:	3a22703a 	and	r17,r7,r8
  80bb48:	1ac03fcc 	andi	r11,r3,255
  80bb4c:	28006226 	beq	r5,zero,80bcd8 <__muldf3+0x22c>
  80bb50:	0081ffc4 	movi	r2,2047
  80bb54:	28805a26 	beq	r5,r2,80bcc0 <__muldf3+0x214>
  80bb58:	8a000434 	orhi	r8,r17,16
  80bb5c:	3004d77a 	srli	r2,r6,29
  80bb60:	401090fa 	slli	r8,r8,3
  80bb64:	302e90fa 	slli	r23,r6,3
  80bb68:	297f0044 	addi	r5,r5,-1023
  80bb6c:	40a2b03a 	or	r17,r8,r2
  80bb70:	0013883a 	mov	r9,zero
  80bb74:	4d4cb03a 	or	r6,r9,r21
  80bb78:	300c90ba 	slli	r6,r6,2
  80bb7c:	02002074 	movhi	r8,129
  80bb80:	422ee704 	addi	r8,r8,-17508
  80bb84:	320d883a 	add	r6,r6,r8
  80bb88:	31800017 	ldw	r6,0(r6)
  80bb8c:	a14b883a 	add	r5,r20,r5
  80bb90:	1dacf03a 	xor	r22,r3,r22
  80bb94:	2b000044 	addi	r12,r5,1
  80bb98:	3000683a 	jmp	r6
  80bb9c:	0080bdd8 	cmpnei	r2,zero,759
  80bba0:	0080bdc4 	movi	r2,759
  80bba4:	0080bdc4 	movi	r2,759
  80bba8:	0080bdb0 	cmpltui	r2,zero,758
  80bbac:	0080bbf8 	rdprs	r2,zero,751
  80bbb0:	0080bbf8 	rdprs	r2,zero,751
  80bbb4:	0080bd98 	cmpnei	r2,zero,758
  80bbb8:	0080bdb0 	cmpltui	r2,zero,758
  80bbbc:	0080bbf8 	rdprs	r2,zero,751
  80bbc0:	0080bd98 	cmpnei	r2,zero,758
  80bbc4:	0080bbf8 	rdprs	r2,zero,751
  80bbc8:	0080bdb0 	cmpltui	r2,zero,758
  80bbcc:	0080bbfc 	xorhi	r2,zero,751
  80bbd0:	0080bbfc 	xorhi	r2,zero,751
  80bbd4:	0080bbfc 	xorhi	r2,zero,751
  80bbd8:	0080bfd4 	movui	r2,767
  80bbdc:	8104b03a 	or	r2,r16,r4
  80bbe0:	10006a1e 	bne	r2,zero,80bd8c <__muldf3+0x2e0>
  80bbe4:	05400204 	movi	r21,8
  80bbe8:	0021883a 	mov	r16,zero
  80bbec:	0025883a 	mov	r18,zero
  80bbf0:	02800084 	movi	r10,2
  80bbf4:	003fcd06 	br	80bb2c <__alt_data_end+0xff80bb2c>
  80bbf8:	b039883a 	mov	fp,r22
  80bbfc:	00800084 	movi	r2,2
  80bc00:	50804e1e 	bne	r10,r2,80bd3c <__muldf3+0x290>
  80bc04:	e4c0004c 	andi	r19,fp,1
  80bc08:	0101ffc4 	movi	r4,2047
  80bc0c:	0021883a 	mov	r16,zero
  80bc10:	0025883a 	mov	r18,zero
  80bc14:	2008953a 	slli	r4,r4,20
  80bc18:	98c03fcc 	andi	r3,r19,255
  80bc1c:	01400434 	movhi	r5,16
  80bc20:	297fffc4 	addi	r5,r5,-1
  80bc24:	180697fa 	slli	r3,r3,31
  80bc28:	8160703a 	and	r16,r16,r5
  80bc2c:	8120b03a 	or	r16,r16,r4
  80bc30:	80c6b03a 	or	r3,r16,r3
  80bc34:	9005883a 	mov	r2,r18
  80bc38:	dfc00d17 	ldw	ra,52(sp)
  80bc3c:	df000c17 	ldw	fp,48(sp)
  80bc40:	ddc00b17 	ldw	r23,44(sp)
  80bc44:	dd800a17 	ldw	r22,40(sp)
  80bc48:	dd400917 	ldw	r21,36(sp)
  80bc4c:	dd000817 	ldw	r20,32(sp)
  80bc50:	dcc00717 	ldw	r19,28(sp)
  80bc54:	dc800617 	ldw	r18,24(sp)
  80bc58:	dc400517 	ldw	r17,20(sp)
  80bc5c:	dc000417 	ldw	r16,16(sp)
  80bc60:	dec00e04 	addi	sp,sp,56
  80bc64:	f800283a 	ret
  80bc68:	8104b03a 	or	r2,r16,r4
  80bc6c:	10004226 	beq	r2,zero,80bd78 <__muldf3+0x2cc>
  80bc70:	8000f926 	beq	r16,zero,80c058 <__muldf3+0x5ac>
  80bc74:	8009883a 	mov	r4,r16
  80bc78:	d9800315 	stw	r6,12(sp)
  80bc7c:	d9c00015 	stw	r7,0(sp)
  80bc80:	080cc9c0 	call	80cc9c <__clzsi2>
  80bc84:	d9800317 	ldw	r6,12(sp)
  80bc88:	d9c00017 	ldw	r7,0(sp)
  80bc8c:	1007883a 	mov	r3,r2
  80bc90:	01000a04 	movi	r4,40
  80bc94:	18bffe04 	addi	r2,r3,-8
  80bc98:	20c9c83a 	sub	r4,r4,r3
  80bc9c:	80a0983a 	sll	r16,r16,r2
  80bca0:	8908d83a 	srl	r4,r17,r4
  80bca4:	88a4983a 	sll	r18,r17,r2
  80bca8:	2420b03a 	or	r16,r4,r16
  80bcac:	017f0344 	movi	r5,-1011
  80bcb0:	28e9c83a 	sub	r20,r5,r3
  80bcb4:	002b883a 	mov	r21,zero
  80bcb8:	0015883a 	mov	r10,zero
  80bcbc:	003f9b06 	br	80bb2c <__alt_data_end+0xff80bb2c>
  80bcc0:	8984b03a 	or	r2,r17,r6
  80bcc4:	10002a1e 	bne	r2,zero,80bd70 <__muldf3+0x2c4>
  80bcc8:	0023883a 	mov	r17,zero
  80bccc:	002f883a 	mov	r23,zero
  80bcd0:	02400084 	movi	r9,2
  80bcd4:	003fa706 	br	80bb74 <__alt_data_end+0xff80bb74>
  80bcd8:	8984b03a 	or	r2,r17,r6
  80bcdc:	10002026 	beq	r2,zero,80bd60 <__muldf3+0x2b4>
  80bce0:	8800cc26 	beq	r17,zero,80c014 <__muldf3+0x568>
  80bce4:	8809883a 	mov	r4,r17
  80bce8:	d8c00215 	stw	r3,8(sp)
  80bcec:	d9800315 	stw	r6,12(sp)
  80bcf0:	da800015 	stw	r10,0(sp)
  80bcf4:	dac00115 	stw	r11,4(sp)
  80bcf8:	080cc9c0 	call	80cc9c <__clzsi2>
  80bcfc:	d8c00217 	ldw	r3,8(sp)
  80bd00:	d9800317 	ldw	r6,12(sp)
  80bd04:	da800017 	ldw	r10,0(sp)
  80bd08:	dac00117 	ldw	r11,4(sp)
  80bd0c:	1009883a 	mov	r4,r2
  80bd10:	01400a04 	movi	r5,40
  80bd14:	25fffe04 	addi	r23,r4,-8
  80bd18:	290bc83a 	sub	r5,r5,r4
  80bd1c:	8dd0983a 	sll	r8,r17,r23
  80bd20:	314ad83a 	srl	r5,r6,r5
  80bd24:	35ee983a 	sll	r23,r6,r23
  80bd28:	2a22b03a 	or	r17,r5,r8
  80bd2c:	017f0344 	movi	r5,-1011
  80bd30:	290bc83a 	sub	r5,r5,r4
  80bd34:	0013883a 	mov	r9,zero
  80bd38:	003f8e06 	br	80bb74 <__alt_data_end+0xff80bb74>
  80bd3c:	008000c4 	movi	r2,3
  80bd40:	50811d26 	beq	r10,r2,80c1b8 <__muldf3+0x70c>
  80bd44:	00800044 	movi	r2,1
  80bd48:	5080e01e 	bne	r10,r2,80c0cc <__muldf3+0x620>
  80bd4c:	e0a6703a 	and	r19,fp,r2
  80bd50:	0009883a 	mov	r4,zero
  80bd54:	0021883a 	mov	r16,zero
  80bd58:	0025883a 	mov	r18,zero
  80bd5c:	003fad06 	br	80bc14 <__alt_data_end+0xff80bc14>
  80bd60:	0023883a 	mov	r17,zero
  80bd64:	002f883a 	mov	r23,zero
  80bd68:	02400044 	movi	r9,1
  80bd6c:	003f8106 	br	80bb74 <__alt_data_end+0xff80bb74>
  80bd70:	024000c4 	movi	r9,3
  80bd74:	003f7f06 	br	80bb74 <__alt_data_end+0xff80bb74>
  80bd78:	05400104 	movi	r21,4
  80bd7c:	0021883a 	mov	r16,zero
  80bd80:	0025883a 	mov	r18,zero
  80bd84:	02800044 	movi	r10,1
  80bd88:	003f6806 	br	80bb2c <__alt_data_end+0xff80bb2c>
  80bd8c:	05400304 	movi	r21,12
  80bd90:	028000c4 	movi	r10,3
  80bd94:	003f6506 	br	80bb2c <__alt_data_end+0xff80bb2c>
  80bd98:	04000434 	movhi	r16,16
  80bd9c:	0027883a 	mov	r19,zero
  80bda0:	843fffc4 	addi	r16,r16,-1
  80bda4:	04bfffc4 	movi	r18,-1
  80bda8:	0101ffc4 	movi	r4,2047
  80bdac:	003f9906 	br	80bc14 <__alt_data_end+0xff80bc14>
  80bdb0:	8821883a 	mov	r16,r17
  80bdb4:	b825883a 	mov	r18,r23
  80bdb8:	5839883a 	mov	fp,r11
  80bdbc:	4815883a 	mov	r10,r9
  80bdc0:	003f8e06 	br	80bbfc <__alt_data_end+0xff80bbfc>
  80bdc4:	8821883a 	mov	r16,r17
  80bdc8:	b825883a 	mov	r18,r23
  80bdcc:	b039883a 	mov	fp,r22
  80bdd0:	4815883a 	mov	r10,r9
  80bdd4:	003f8906 	br	80bbfc <__alt_data_end+0xff80bbfc>
  80bdd8:	b80cd43a 	srli	r6,r23,16
  80bddc:	9006d43a 	srli	r3,r18,16
  80bde0:	90bfffcc 	andi	r2,r18,65535
  80bde4:	bdffffcc 	andi	r23,r23,65535
  80bde8:	b891383a 	mul	r8,r23,r2
  80bdec:	b8c9383a 	mul	r4,r23,r3
  80bdf0:	309b383a 	mul	r13,r6,r2
  80bdf4:	400ed43a 	srli	r7,r8,16
  80bdf8:	30df383a 	mul	r15,r6,r3
  80bdfc:	235b883a 	add	r13,r4,r13
  80be00:	69db883a 	add	r13,r13,r7
  80be04:	6900022e 	bgeu	r13,r4,80be10 <__muldf3+0x364>
  80be08:	01000074 	movhi	r4,1
  80be0c:	791f883a 	add	r15,r15,r4
  80be10:	8828d43a 	srli	r20,r17,16
  80be14:	8c7fffcc 	andi	r17,r17,65535
  80be18:	888f383a 	mul	r7,r17,r2
  80be1c:	88d3383a 	mul	r9,r17,r3
  80be20:	a0a5383a 	mul	r18,r20,r2
  80be24:	3816d43a 	srli	r11,r7,16
  80be28:	6814943a 	slli	r10,r13,16
  80be2c:	4ca5883a 	add	r18,r9,r18
  80be30:	423fffcc 	andi	r8,r8,65535
  80be34:	92e5883a 	add	r18,r18,r11
  80be38:	6808d43a 	srli	r4,r13,16
  80be3c:	5215883a 	add	r10,r10,r8
  80be40:	a0c7383a 	mul	r3,r20,r3
  80be44:	9240022e 	bgeu	r18,r9,80be50 <__muldf3+0x3a4>
  80be48:	00800074 	movhi	r2,1
  80be4c:	1887883a 	add	r3,r3,r2
  80be50:	802ad43a 	srli	r21,r16,16
  80be54:	80bfffcc 	andi	r2,r16,65535
  80be58:	b893383a 	mul	r9,r23,r2
  80be5c:	3091383a 	mul	r8,r6,r2
  80be60:	bd6f383a 	mul	r23,r23,r21
  80be64:	9026943a 	slli	r19,r18,16
  80be68:	481ad43a 	srli	r13,r9,16
  80be6c:	9024d43a 	srli	r18,r18,16
  80be70:	39ffffcc 	andi	r7,r7,65535
  80be74:	ba11883a 	add	r8,r23,r8
  80be78:	99e7883a 	add	r19,r19,r7
  80be7c:	4351883a 	add	r8,r8,r13
  80be80:	1c97883a 	add	r11,r3,r18
  80be84:	354d383a 	mul	r6,r6,r21
  80be88:	9925883a 	add	r18,r19,r4
  80be8c:	45c0022e 	bgeu	r8,r23,80be98 <__muldf3+0x3ec>
  80be90:	00c00074 	movhi	r3,1
  80be94:	30cd883a 	add	r6,r6,r3
  80be98:	8889383a 	mul	r4,r17,r2
  80be9c:	8d63383a 	mul	r17,r17,r21
  80bea0:	a085383a 	mul	r2,r20,r2
  80bea4:	200ed43a 	srli	r7,r4,16
  80bea8:	401cd43a 	srli	r14,r8,16
  80beac:	401a943a 	slli	r13,r8,16
  80beb0:	8885883a 	add	r2,r17,r2
  80beb4:	4a3fffcc 	andi	r8,r9,65535
  80beb8:	11c5883a 	add	r2,r2,r7
  80bebc:	339d883a 	add	r14,r6,r14
  80bec0:	6a11883a 	add	r8,r13,r8
  80bec4:	a561383a 	mul	r16,r20,r21
  80bec8:	1440022e 	bgeu	r2,r17,80bed4 <__muldf3+0x428>
  80becc:	00c00074 	movhi	r3,1
  80bed0:	80e1883a 	add	r16,r16,r3
  80bed4:	1006943a 	slli	r3,r2,16
  80bed8:	213fffcc 	andi	r4,r4,65535
  80bedc:	93db883a 	add	r13,r18,r15
  80bee0:	1909883a 	add	r4,r3,r4
  80bee4:	22c7883a 	add	r3,r4,r11
  80bee8:	6cd3803a 	cmpltu	r9,r13,r19
  80beec:	6a09883a 	add	r4,r13,r8
  80bef0:	1a5b883a 	add	r13,r3,r9
  80bef4:	2211803a 	cmpltu	r8,r4,r8
  80bef8:	734d883a 	add	r6,r14,r13
  80befc:	100ed43a 	srli	r7,r2,16
  80bf00:	6a53803a 	cmpltu	r9,r13,r9
  80bf04:	3205883a 	add	r2,r6,r8
  80bf08:	1ac7803a 	cmpltu	r3,r3,r11
  80bf0c:	1211803a 	cmpltu	r8,r2,r8
  80bf10:	48c6b03a 	or	r3,r9,r3
  80bf14:	338d803a 	cmpltu	r6,r6,r14
  80bf18:	19c7883a 	add	r3,r3,r7
  80bf1c:	418cb03a 	or	r6,r8,r6
  80bf20:	1987883a 	add	r3,r3,r6
  80bf24:	2024927a 	slli	r18,r4,9
  80bf28:	1c07883a 	add	r3,r3,r16
  80bf2c:	1806927a 	slli	r3,r3,9
  80bf30:	1020d5fa 	srli	r16,r2,23
  80bf34:	2008d5fa 	srli	r4,r4,23
  80bf38:	9294b03a 	or	r10,r18,r10
  80bf3c:	1004927a 	slli	r2,r2,9
  80bf40:	5024c03a 	cmpne	r18,r10,zero
  80bf44:	1c20b03a 	or	r16,r3,r16
  80bf48:	9108b03a 	or	r4,r18,r4
  80bf4c:	80c0402c 	andhi	r3,r16,256
  80bf50:	20a4b03a 	or	r18,r4,r2
  80bf54:	18000726 	beq	r3,zero,80bf74 <__muldf3+0x4c8>
  80bf58:	9006d07a 	srli	r3,r18,1
  80bf5c:	800897fa 	slli	r4,r16,31
  80bf60:	9080004c 	andi	r2,r18,1
  80bf64:	8020d07a 	srli	r16,r16,1
  80bf68:	10c4b03a 	or	r2,r2,r3
  80bf6c:	1124b03a 	or	r18,r2,r4
  80bf70:	600b883a 	mov	r5,r12
  80bf74:	2900ffc4 	addi	r4,r5,1023
  80bf78:	01004b0e 	bge	zero,r4,80c0a8 <__muldf3+0x5fc>
  80bf7c:	908001cc 	andi	r2,r18,7
  80bf80:	10000726 	beq	r2,zero,80bfa0 <__muldf3+0x4f4>
  80bf84:	90c003cc 	andi	r3,r18,15
  80bf88:	00800104 	movi	r2,4
  80bf8c:	18800426 	beq	r3,r2,80bfa0 <__muldf3+0x4f4>
  80bf90:	9087883a 	add	r3,r18,r2
  80bf94:	1c85803a 	cmpltu	r2,r3,r18
  80bf98:	80a1883a 	add	r16,r16,r2
  80bf9c:	1825883a 	mov	r18,r3
  80bfa0:	8080402c 	andhi	r2,r16,256
  80bfa4:	10000426 	beq	r2,zero,80bfb8 <__muldf3+0x50c>
  80bfa8:	00bfc034 	movhi	r2,65280
  80bfac:	10bfffc4 	addi	r2,r2,-1
  80bfb0:	29010004 	addi	r4,r5,1024
  80bfb4:	80a0703a 	and	r16,r16,r2
  80bfb8:	0081ff84 	movi	r2,2046
  80bfbc:	1100320e 	bge	r2,r4,80c088 <__muldf3+0x5dc>
  80bfc0:	b4c0004c 	andi	r19,r22,1
  80bfc4:	0101ffc4 	movi	r4,2047
  80bfc8:	0021883a 	mov	r16,zero
  80bfcc:	0025883a 	mov	r18,zero
  80bfd0:	003f1006 	br	80bc14 <__alt_data_end+0xff80bc14>
  80bfd4:	8080022c 	andhi	r2,r16,8
  80bfd8:	10000926 	beq	r2,zero,80c000 <__muldf3+0x554>
  80bfdc:	8880022c 	andhi	r2,r17,8
  80bfe0:	1000071e 	bne	r2,zero,80c000 <__muldf3+0x554>
  80bfe4:	00800434 	movhi	r2,16
  80bfe8:	8c000234 	orhi	r16,r17,8
  80bfec:	10bfffc4 	addi	r2,r2,-1
  80bff0:	1827883a 	mov	r19,r3
  80bff4:	80a0703a 	and	r16,r16,r2
  80bff8:	b825883a 	mov	r18,r23
  80bffc:	003f6a06 	br	80bda8 <__alt_data_end+0xff80bda8>
  80c000:	00800434 	movhi	r2,16
  80c004:	84000234 	orhi	r16,r16,8
  80c008:	10bfffc4 	addi	r2,r2,-1
  80c00c:	80a0703a 	and	r16,r16,r2
  80c010:	003f6506 	br	80bda8 <__alt_data_end+0xff80bda8>
  80c014:	3009883a 	mov	r4,r6
  80c018:	d8c00215 	stw	r3,8(sp)
  80c01c:	d9800315 	stw	r6,12(sp)
  80c020:	da800015 	stw	r10,0(sp)
  80c024:	dac00115 	stw	r11,4(sp)
  80c028:	080cc9c0 	call	80cc9c <__clzsi2>
  80c02c:	11000804 	addi	r4,r2,32
  80c030:	014009c4 	movi	r5,39
  80c034:	d8c00217 	ldw	r3,8(sp)
  80c038:	d9800317 	ldw	r6,12(sp)
  80c03c:	da800017 	ldw	r10,0(sp)
  80c040:	dac00117 	ldw	r11,4(sp)
  80c044:	293f320e 	bge	r5,r4,80bd10 <__alt_data_end+0xff80bd10>
  80c048:	10bffe04 	addi	r2,r2,-8
  80c04c:	b8a2983a 	sll	r17,r23,r2
  80c050:	002f883a 	mov	r23,zero
  80c054:	003f3506 	br	80bd2c <__alt_data_end+0xff80bd2c>
  80c058:	d9800315 	stw	r6,12(sp)
  80c05c:	d9c00015 	stw	r7,0(sp)
  80c060:	080cc9c0 	call	80cc9c <__clzsi2>
  80c064:	10c00804 	addi	r3,r2,32
  80c068:	010009c4 	movi	r4,39
  80c06c:	d9800317 	ldw	r6,12(sp)
  80c070:	d9c00017 	ldw	r7,0(sp)
  80c074:	20ff060e 	bge	r4,r3,80bc90 <__alt_data_end+0xff80bc90>
  80c078:	10bffe04 	addi	r2,r2,-8
  80c07c:	88a0983a 	sll	r16,r17,r2
  80c080:	0025883a 	mov	r18,zero
  80c084:	003f0906 	br	80bcac <__alt_data_end+0xff80bcac>
  80c088:	9004d0fa 	srli	r2,r18,3
  80c08c:	8024977a 	slli	r18,r16,29
  80c090:	8020927a 	slli	r16,r16,9
  80c094:	2101ffcc 	andi	r4,r4,2047
  80c098:	90a4b03a 	or	r18,r18,r2
  80c09c:	8020d33a 	srli	r16,r16,12
  80c0a0:	b4c0004c 	andi	r19,r22,1
  80c0a4:	003edb06 	br	80bc14 <__alt_data_end+0xff80bc14>
  80c0a8:	00ff0084 	movi	r3,-1022
  80c0ac:	1947c83a 	sub	r3,r3,r5
  80c0b0:	00800e04 	movi	r2,56
  80c0b4:	10c0080e 	bge	r2,r3,80c0d8 <__muldf3+0x62c>
  80c0b8:	b4c0004c 	andi	r19,r22,1
  80c0bc:	0009883a 	mov	r4,zero
  80c0c0:	0021883a 	mov	r16,zero
  80c0c4:	0025883a 	mov	r18,zero
  80c0c8:	003ed206 	br	80bc14 <__alt_data_end+0xff80bc14>
  80c0cc:	600b883a 	mov	r5,r12
  80c0d0:	e02d883a 	mov	r22,fp
  80c0d4:	003fa706 	br	80bf74 <__alt_data_end+0xff80bf74>
  80c0d8:	008007c4 	movi	r2,31
  80c0dc:	10c01816 	blt	r2,r3,80c140 <__muldf3+0x694>
  80c0e0:	29410784 	addi	r5,r5,1054
  80c0e4:	8144983a 	sll	r2,r16,r5
  80c0e8:	90c8d83a 	srl	r4,r18,r3
  80c0ec:	914a983a 	sll	r5,r18,r5
  80c0f0:	80c6d83a 	srl	r3,r16,r3
  80c0f4:	2088b03a 	or	r4,r4,r2
  80c0f8:	2804c03a 	cmpne	r2,r5,zero
  80c0fc:	2084b03a 	or	r2,r4,r2
  80c100:	110001cc 	andi	r4,r2,7
  80c104:	20000726 	beq	r4,zero,80c124 <__muldf3+0x678>
  80c108:	114003cc 	andi	r5,r2,15
  80c10c:	01000104 	movi	r4,4
  80c110:	29000426 	beq	r5,r4,80c124 <__muldf3+0x678>
  80c114:	11000104 	addi	r4,r2,4
  80c118:	2085803a 	cmpltu	r2,r4,r2
  80c11c:	1887883a 	add	r3,r3,r2
  80c120:	2005883a 	mov	r2,r4
  80c124:	1900202c 	andhi	r4,r3,128
  80c128:	20001826 	beq	r4,zero,80c18c <__muldf3+0x6e0>
  80c12c:	b4c0004c 	andi	r19,r22,1
  80c130:	01000044 	movi	r4,1
  80c134:	0021883a 	mov	r16,zero
  80c138:	0025883a 	mov	r18,zero
  80c13c:	003eb506 	br	80bc14 <__alt_data_end+0xff80bc14>
  80c140:	00bef884 	movi	r2,-1054
  80c144:	1145c83a 	sub	r2,r2,r5
  80c148:	8088d83a 	srl	r4,r16,r2
  80c14c:	00800804 	movi	r2,32
  80c150:	18801726 	beq	r3,r2,80c1b0 <__muldf3+0x704>
  80c154:	28810f84 	addi	r2,r5,1086
  80c158:	8084983a 	sll	r2,r16,r2
  80c15c:	1484b03a 	or	r2,r2,r18
  80c160:	1004c03a 	cmpne	r2,r2,zero
  80c164:	1104b03a 	or	r2,r2,r4
  80c168:	10c001cc 	andi	r3,r2,7
  80c16c:	18000b1e 	bne	r3,zero,80c19c <__muldf3+0x6f0>
  80c170:	0021883a 	mov	r16,zero
  80c174:	1004d0fa 	srli	r2,r2,3
  80c178:	b4c0004c 	andi	r19,r22,1
  80c17c:	0009883a 	mov	r4,zero
  80c180:	10e4b03a 	or	r18,r2,r3
  80c184:	003ea306 	br	80bc14 <__alt_data_end+0xff80bc14>
  80c188:	0007883a 	mov	r3,zero
  80c18c:	1820927a 	slli	r16,r3,9
  80c190:	1806977a 	slli	r3,r3,29
  80c194:	8020d33a 	srli	r16,r16,12
  80c198:	003ff606 	br	80c174 <__alt_data_end+0xff80c174>
  80c19c:	110003cc 	andi	r4,r2,15
  80c1a0:	00c00104 	movi	r3,4
  80c1a4:	20fff826 	beq	r4,r3,80c188 <__alt_data_end+0xff80c188>
  80c1a8:	0007883a 	mov	r3,zero
  80c1ac:	003fd906 	br	80c114 <__alt_data_end+0xff80c114>
  80c1b0:	0005883a 	mov	r2,zero
  80c1b4:	003fe906 	br	80c15c <__alt_data_end+0xff80c15c>
  80c1b8:	00800434 	movhi	r2,16
  80c1bc:	84000234 	orhi	r16,r16,8
  80c1c0:	10bfffc4 	addi	r2,r2,-1
  80c1c4:	e4c0004c 	andi	r19,fp,1
  80c1c8:	80a0703a 	and	r16,r16,r2
  80c1cc:	003ef606 	br	80bda8 <__alt_data_end+0xff80bda8>

0080c1d0 <__subdf3>:
  80c1d0:	00c00434 	movhi	r3,16
  80c1d4:	18ffffc4 	addi	r3,r3,-1
  80c1d8:	defffb04 	addi	sp,sp,-20
  80c1dc:	28d2703a 	and	r9,r5,r3
  80c1e0:	3814d53a 	srli	r10,r7,20
  80c1e4:	38c6703a 	and	r3,r7,r3
  80c1e8:	3004d77a 	srli	r2,r6,29
  80c1ec:	dc800215 	stw	r18,8(sp)
  80c1f0:	dc000015 	stw	r16,0(sp)
  80c1f4:	2824d7fa 	srli	r18,r5,31
  80c1f8:	2820d53a 	srli	r16,r5,20
  80c1fc:	481290fa 	slli	r9,r9,3
  80c200:	200ad77a 	srli	r5,r4,29
  80c204:	180690fa 	slli	r3,r3,3
  80c208:	dc400115 	stw	r17,4(sp)
  80c20c:	dfc00415 	stw	ra,16(sp)
  80c210:	202290fa 	slli	r17,r4,3
  80c214:	dcc00315 	stw	r19,12(sp)
  80c218:	5281ffcc 	andi	r10,r10,2047
  80c21c:	0101ffc4 	movi	r4,2047
  80c220:	9011883a 	mov	r8,r18
  80c224:	8401ffcc 	andi	r16,r16,2047
  80c228:	94803fcc 	andi	r18,r18,255
  80c22c:	494ab03a 	or	r5,r9,r5
  80c230:	380ed7fa 	srli	r7,r7,31
  80c234:	1886b03a 	or	r3,r3,r2
  80c238:	300c90fa 	slli	r6,r6,3
  80c23c:	51009026 	beq	r10,r4,80c480 <__subdf3+0x2b0>
  80c240:	39c0005c 	xori	r7,r7,1
  80c244:	8285c83a 	sub	r2,r16,r10
  80c248:	91c06f26 	beq	r18,r7,80c408 <__subdf3+0x238>
  80c24c:	0080b10e 	bge	zero,r2,80c514 <__subdf3+0x344>
  80c250:	50002a1e 	bne	r10,zero,80c2fc <__subdf3+0x12c>
  80c254:	1988b03a 	or	r4,r3,r6
  80c258:	2000941e 	bne	r4,zero,80c4ac <__subdf3+0x2dc>
  80c25c:	888001cc 	andi	r2,r17,7
  80c260:	10005b26 	beq	r2,zero,80c3d0 <__subdf3+0x200>
  80c264:	88c003cc 	andi	r3,r17,15
  80c268:	00800104 	movi	r2,4
  80c26c:	18805826 	beq	r3,r2,80c3d0 <__subdf3+0x200>
  80c270:	88c00104 	addi	r3,r17,4
  80c274:	1c63803a 	cmpltu	r17,r3,r17
  80c278:	2c4b883a 	add	r5,r5,r17
  80c27c:	2880202c 	andhi	r2,r5,128
  80c280:	9200004c 	andi	r8,r18,1
  80c284:	1823883a 	mov	r17,r3
  80c288:	10005426 	beq	r2,zero,80c3dc <__subdf3+0x20c>
  80c28c:	84000044 	addi	r16,r16,1
  80c290:	0081ffc4 	movi	r2,2047
  80c294:	8080bf26 	beq	r16,r2,80c594 <__subdf3+0x3c4>
  80c298:	013fe034 	movhi	r4,65408
  80c29c:	213fffc4 	addi	r4,r4,-1
  80c2a0:	290a703a 	and	r5,r5,r4
  80c2a4:	2804977a 	slli	r2,r5,29
  80c2a8:	280a927a 	slli	r5,r5,9
  80c2ac:	8822d0fa 	srli	r17,r17,3
  80c2b0:	8401ffcc 	andi	r16,r16,2047
  80c2b4:	2808d33a 	srli	r4,r5,12
  80c2b8:	1444b03a 	or	r2,r2,r17
  80c2bc:	8401ffcc 	andi	r16,r16,2047
  80c2c0:	800a953a 	slli	r5,r16,20
  80c2c4:	40c03fcc 	andi	r3,r8,255
  80c2c8:	04000434 	movhi	r16,16
  80c2cc:	180697fa 	slli	r3,r3,31
  80c2d0:	843fffc4 	addi	r16,r16,-1
  80c2d4:	2420703a 	and	r16,r4,r16
  80c2d8:	8160b03a 	or	r16,r16,r5
  80c2dc:	80c6b03a 	or	r3,r16,r3
  80c2e0:	dfc00417 	ldw	ra,16(sp)
  80c2e4:	dcc00317 	ldw	r19,12(sp)
  80c2e8:	dc800217 	ldw	r18,8(sp)
  80c2ec:	dc400117 	ldw	r17,4(sp)
  80c2f0:	dc000017 	ldw	r16,0(sp)
  80c2f4:	dec00504 	addi	sp,sp,20
  80c2f8:	f800283a 	ret
  80c2fc:	0101ffc4 	movi	r4,2047
  80c300:	813fd626 	beq	r16,r4,80c25c <__alt_data_end+0xff80c25c>
  80c304:	18c02034 	orhi	r3,r3,128
  80c308:	01000e04 	movi	r4,56
  80c30c:	2080a416 	blt	r4,r2,80c5a0 <__subdf3+0x3d0>
  80c310:	010007c4 	movi	r4,31
  80c314:	2080c716 	blt	r4,r2,80c634 <__subdf3+0x464>
  80c318:	01000804 	movi	r4,32
  80c31c:	2089c83a 	sub	r4,r4,r2
  80c320:	1910983a 	sll	r8,r3,r4
  80c324:	308ed83a 	srl	r7,r6,r2
  80c328:	3108983a 	sll	r4,r6,r4
  80c32c:	1884d83a 	srl	r2,r3,r2
  80c330:	41ccb03a 	or	r6,r8,r7
  80c334:	2008c03a 	cmpne	r4,r4,zero
  80c338:	310cb03a 	or	r6,r6,r4
  80c33c:	898dc83a 	sub	r6,r17,r6
  80c340:	89a3803a 	cmpltu	r17,r17,r6
  80c344:	288bc83a 	sub	r5,r5,r2
  80c348:	2c4bc83a 	sub	r5,r5,r17
  80c34c:	3023883a 	mov	r17,r6
  80c350:	2880202c 	andhi	r2,r5,128
  80c354:	10006b26 	beq	r2,zero,80c504 <__subdf3+0x334>
  80c358:	04c02034 	movhi	r19,128
  80c35c:	9cffffc4 	addi	r19,r19,-1
  80c360:	2ce6703a 	and	r19,r5,r19
  80c364:	98007c26 	beq	r19,zero,80c558 <__subdf3+0x388>
  80c368:	9809883a 	mov	r4,r19
  80c36c:	080cc9c0 	call	80cc9c <__clzsi2>
  80c370:	10fffe04 	addi	r3,r2,-8
  80c374:	010007c4 	movi	r4,31
  80c378:	20c07d16 	blt	r4,r3,80c570 <__subdf3+0x3a0>
  80c37c:	01400a04 	movi	r5,40
  80c380:	2885c83a 	sub	r2,r5,r2
  80c384:	888ad83a 	srl	r5,r17,r2
  80c388:	98e6983a 	sll	r19,r19,r3
  80c38c:	88e2983a 	sll	r17,r17,r3
  80c390:	2ce6b03a 	or	r19,r5,r19
  80c394:	1c007a16 	blt	r3,r16,80c580 <__subdf3+0x3b0>
  80c398:	1c21c83a 	sub	r16,r3,r16
  80c39c:	81400044 	addi	r5,r16,1
  80c3a0:	00c007c4 	movi	r3,31
  80c3a4:	19409616 	blt	r3,r5,80c600 <__subdf3+0x430>
  80c3a8:	1c21c83a 	sub	r16,r3,r16
  80c3ac:	8c08983a 	sll	r4,r17,r16
  80c3b0:	8946d83a 	srl	r3,r17,r5
  80c3b4:	9c20983a 	sll	r16,r19,r16
  80c3b8:	2008c03a 	cmpne	r4,r4,zero
  80c3bc:	994ad83a 	srl	r5,r19,r5
  80c3c0:	1c06b03a 	or	r3,r3,r16
  80c3c4:	1922b03a 	or	r17,r3,r4
  80c3c8:	0021883a 	mov	r16,zero
  80c3cc:	003fa306 	br	80c25c <__alt_data_end+0xff80c25c>
  80c3d0:	2880202c 	andhi	r2,r5,128
  80c3d4:	9200004c 	andi	r8,r18,1
  80c3d8:	103fac1e 	bne	r2,zero,80c28c <__alt_data_end+0xff80c28c>
  80c3dc:	2804977a 	slli	r2,r5,29
  80c3e0:	8822d0fa 	srli	r17,r17,3
  80c3e4:	00c1ffc4 	movi	r3,2047
  80c3e8:	280ad0fa 	srli	r5,r5,3
  80c3ec:	1444b03a 	or	r2,r2,r17
  80c3f0:	80c02726 	beq	r16,r3,80c490 <__subdf3+0x2c0>
  80c3f4:	01000434 	movhi	r4,16
  80c3f8:	213fffc4 	addi	r4,r4,-1
  80c3fc:	80e0703a 	and	r16,r16,r3
  80c400:	2908703a 	and	r4,r5,r4
  80c404:	003fad06 	br	80c2bc <__alt_data_end+0xff80c2bc>
  80c408:	0080690e 	bge	zero,r2,80c5b0 <__subdf3+0x3e0>
  80c40c:	50002f26 	beq	r10,zero,80c4cc <__subdf3+0x2fc>
  80c410:	0101ffc4 	movi	r4,2047
  80c414:	813f9126 	beq	r16,r4,80c25c <__alt_data_end+0xff80c25c>
  80c418:	18c02034 	orhi	r3,r3,128
  80c41c:	01000e04 	movi	r4,56
  80c420:	2080b00e 	bge	r4,r2,80c6e4 <__subdf3+0x514>
  80c424:	198cb03a 	or	r6,r3,r6
  80c428:	300ec03a 	cmpne	r7,r6,zero
  80c42c:	0005883a 	mov	r2,zero
  80c430:	3c4f883a 	add	r7,r7,r17
  80c434:	3c63803a 	cmpltu	r17,r7,r17
  80c438:	114b883a 	add	r5,r2,r5
  80c43c:	2c4b883a 	add	r5,r5,r17
  80c440:	3823883a 	mov	r17,r7
  80c444:	2880202c 	andhi	r2,r5,128
  80c448:	10002e26 	beq	r2,zero,80c504 <__subdf3+0x334>
  80c44c:	84000044 	addi	r16,r16,1
  80c450:	0081ffc4 	movi	r2,2047
  80c454:	8080de26 	beq	r16,r2,80c7d0 <__subdf3+0x600>
  80c458:	00bfe034 	movhi	r2,65408
  80c45c:	10bfffc4 	addi	r2,r2,-1
  80c460:	288a703a 	and	r5,r5,r2
  80c464:	880cd07a 	srli	r6,r17,1
  80c468:	280897fa 	slli	r4,r5,31
  80c46c:	88c0004c 	andi	r3,r17,1
  80c470:	30e2b03a 	or	r17,r6,r3
  80c474:	280ad07a 	srli	r5,r5,1
  80c478:	8922b03a 	or	r17,r17,r4
  80c47c:	003f7706 	br	80c25c <__alt_data_end+0xff80c25c>
  80c480:	1984b03a 	or	r2,r3,r6
  80c484:	103f6e26 	beq	r2,zero,80c240 <__alt_data_end+0xff80c240>
  80c488:	39c03fcc 	andi	r7,r7,255
  80c48c:	003f6d06 	br	80c244 <__alt_data_end+0xff80c244>
  80c490:	1146b03a 	or	r3,r2,r5
  80c494:	18003f26 	beq	r3,zero,80c594 <__subdf3+0x3c4>
  80c498:	00c00434 	movhi	r3,16
  80c49c:	29000234 	orhi	r4,r5,8
  80c4a0:	18ffffc4 	addi	r3,r3,-1
  80c4a4:	20c8703a 	and	r4,r4,r3
  80c4a8:	003f8406 	br	80c2bc <__alt_data_end+0xff80c2bc>
  80c4ac:	10bfffc4 	addi	r2,r2,-1
  80c4b0:	1000501e 	bne	r2,zero,80c5f4 <__subdf3+0x424>
  80c4b4:	898fc83a 	sub	r7,r17,r6
  80c4b8:	89e3803a 	cmpltu	r17,r17,r7
  80c4bc:	28cbc83a 	sub	r5,r5,r3
  80c4c0:	2c4bc83a 	sub	r5,r5,r17
  80c4c4:	3823883a 	mov	r17,r7
  80c4c8:	003fa106 	br	80c350 <__alt_data_end+0xff80c350>
  80c4cc:	1988b03a 	or	r4,r3,r6
  80c4d0:	203f6226 	beq	r4,zero,80c25c <__alt_data_end+0xff80c25c>
  80c4d4:	10bfffc4 	addi	r2,r2,-1
  80c4d8:	10009b1e 	bne	r2,zero,80c748 <__subdf3+0x578>
  80c4dc:	344d883a 	add	r6,r6,r17
  80c4e0:	3463803a 	cmpltu	r17,r6,r17
  80c4e4:	194b883a 	add	r5,r3,r5
  80c4e8:	2c4b883a 	add	r5,r5,r17
  80c4ec:	3023883a 	mov	r17,r6
  80c4f0:	003fd406 	br	80c444 <__alt_data_end+0xff80c444>
  80c4f4:	1106b03a 	or	r3,r2,r4
  80c4f8:	1800b426 	beq	r3,zero,80c7cc <__subdf3+0x5fc>
  80c4fc:	100b883a 	mov	r5,r2
  80c500:	2023883a 	mov	r17,r4
  80c504:	888001cc 	andi	r2,r17,7
  80c508:	103f561e 	bne	r2,zero,80c264 <__alt_data_end+0xff80c264>
  80c50c:	9200004c 	andi	r8,r18,1
  80c510:	003fb206 	br	80c3dc <__alt_data_end+0xff80c3dc>
  80c514:	1000531e 	bne	r2,zero,80c664 <__subdf3+0x494>
  80c518:	80800044 	addi	r2,r16,1
  80c51c:	1081ffcc 	andi	r2,r2,2047
  80c520:	01000044 	movi	r4,1
  80c524:	2080a00e 	bge	r4,r2,80c7a8 <__subdf3+0x5d8>
  80c528:	8985c83a 	sub	r2,r17,r6
  80c52c:	8889803a 	cmpltu	r4,r17,r2
  80c530:	28e7c83a 	sub	r19,r5,r3
  80c534:	9927c83a 	sub	r19,r19,r4
  80c538:	9900202c 	andhi	r4,r19,128
  80c53c:	20006226 	beq	r4,zero,80c6c8 <__subdf3+0x4f8>
  80c540:	3463c83a 	sub	r17,r6,r17
  80c544:	194bc83a 	sub	r5,r3,r5
  80c548:	344d803a 	cmpltu	r6,r6,r17
  80c54c:	29a7c83a 	sub	r19,r5,r6
  80c550:	3825883a 	mov	r18,r7
  80c554:	983f841e 	bne	r19,zero,80c368 <__alt_data_end+0xff80c368>
  80c558:	8809883a 	mov	r4,r17
  80c55c:	080cc9c0 	call	80cc9c <__clzsi2>
  80c560:	10800804 	addi	r2,r2,32
  80c564:	10fffe04 	addi	r3,r2,-8
  80c568:	010007c4 	movi	r4,31
  80c56c:	20ff830e 	bge	r4,r3,80c37c <__alt_data_end+0xff80c37c>
  80c570:	14fff604 	addi	r19,r2,-40
  80c574:	8ce6983a 	sll	r19,r17,r19
  80c578:	0023883a 	mov	r17,zero
  80c57c:	1c3f860e 	bge	r3,r16,80c398 <__alt_data_end+0xff80c398>
  80c580:	017fe034 	movhi	r5,65408
  80c584:	297fffc4 	addi	r5,r5,-1
  80c588:	80e1c83a 	sub	r16,r16,r3
  80c58c:	994a703a 	and	r5,r19,r5
  80c590:	003f3206 	br	80c25c <__alt_data_end+0xff80c25c>
  80c594:	0009883a 	mov	r4,zero
  80c598:	0005883a 	mov	r2,zero
  80c59c:	003f4706 	br	80c2bc <__alt_data_end+0xff80c2bc>
  80c5a0:	198cb03a 	or	r6,r3,r6
  80c5a4:	300cc03a 	cmpne	r6,r6,zero
  80c5a8:	0005883a 	mov	r2,zero
  80c5ac:	003f6306 	br	80c33c <__alt_data_end+0xff80c33c>
  80c5b0:	10009d1e 	bne	r2,zero,80c828 <__subdf3+0x658>
  80c5b4:	81c00044 	addi	r7,r16,1
  80c5b8:	3881ffcc 	andi	r2,r7,2047
  80c5bc:	02400044 	movi	r9,1
  80c5c0:	4880680e 	bge	r9,r2,80c764 <__subdf3+0x594>
  80c5c4:	0081ffc4 	movi	r2,2047
  80c5c8:	3880ae26 	beq	r7,r2,80c884 <__subdf3+0x6b4>
  80c5cc:	344d883a 	add	r6,r6,r17
  80c5d0:	3463803a 	cmpltu	r17,r6,r17
  80c5d4:	194b883a 	add	r5,r3,r5
  80c5d8:	2c4b883a 	add	r5,r5,r17
  80c5dc:	282297fa 	slli	r17,r5,31
  80c5e0:	300cd07a 	srli	r6,r6,1
  80c5e4:	280ad07a 	srli	r5,r5,1
  80c5e8:	3821883a 	mov	r16,r7
  80c5ec:	89a2b03a 	or	r17,r17,r6
  80c5f0:	003f1a06 	br	80c25c <__alt_data_end+0xff80c25c>
  80c5f4:	0101ffc4 	movi	r4,2047
  80c5f8:	813f431e 	bne	r16,r4,80c308 <__alt_data_end+0xff80c308>
  80c5fc:	003f1706 	br	80c25c <__alt_data_end+0xff80c25c>
  80c600:	80bff844 	addi	r2,r16,-31
  80c604:	00c00804 	movi	r3,32
  80c608:	9884d83a 	srl	r2,r19,r2
  80c60c:	28c05126 	beq	r5,r3,80c754 <__subdf3+0x584>
  80c610:	00c00fc4 	movi	r3,63
  80c614:	1c21c83a 	sub	r16,r3,r16
  80c618:	9c26983a 	sll	r19,r19,r16
  80c61c:	9c62b03a 	or	r17,r19,r17
  80c620:	8822c03a 	cmpne	r17,r17,zero
  80c624:	88a2b03a 	or	r17,r17,r2
  80c628:	000b883a 	mov	r5,zero
  80c62c:	0021883a 	mov	r16,zero
  80c630:	003fb406 	br	80c504 <__alt_data_end+0xff80c504>
  80c634:	113ff804 	addi	r4,r2,-32
  80c638:	01c00804 	movi	r7,32
  80c63c:	1908d83a 	srl	r4,r3,r4
  80c640:	11c04626 	beq	r2,r7,80c75c <__subdf3+0x58c>
  80c644:	01c01004 	movi	r7,64
  80c648:	3885c83a 	sub	r2,r7,r2
  80c64c:	1884983a 	sll	r2,r3,r2
  80c650:	118cb03a 	or	r6,r2,r6
  80c654:	300cc03a 	cmpne	r6,r6,zero
  80c658:	310cb03a 	or	r6,r6,r4
  80c65c:	0005883a 	mov	r2,zero
  80c660:	003f3606 	br	80c33c <__alt_data_end+0xff80c33c>
  80c664:	80002b26 	beq	r16,zero,80c714 <__subdf3+0x544>
  80c668:	0101ffc4 	movi	r4,2047
  80c66c:	51006926 	beq	r10,r4,80c814 <__subdf3+0x644>
  80c670:	0085c83a 	sub	r2,zero,r2
  80c674:	29402034 	orhi	r5,r5,128
  80c678:	01000e04 	movi	r4,56
  80c67c:	20807d16 	blt	r4,r2,80c874 <__subdf3+0x6a4>
  80c680:	010007c4 	movi	r4,31
  80c684:	2080d916 	blt	r4,r2,80c9ec <__subdf3+0x81c>
  80c688:	01000804 	movi	r4,32
  80c68c:	2089c83a 	sub	r4,r4,r2
  80c690:	2912983a 	sll	r9,r5,r4
  80c694:	8890d83a 	srl	r8,r17,r2
  80c698:	8908983a 	sll	r4,r17,r4
  80c69c:	2884d83a 	srl	r2,r5,r2
  80c6a0:	4a22b03a 	or	r17,r9,r8
  80c6a4:	2008c03a 	cmpne	r4,r4,zero
  80c6a8:	8922b03a 	or	r17,r17,r4
  80c6ac:	3463c83a 	sub	r17,r6,r17
  80c6b0:	1885c83a 	sub	r2,r3,r2
  80c6b4:	344d803a 	cmpltu	r6,r6,r17
  80c6b8:	118bc83a 	sub	r5,r2,r6
  80c6bc:	5021883a 	mov	r16,r10
  80c6c0:	3825883a 	mov	r18,r7
  80c6c4:	003f2206 	br	80c350 <__alt_data_end+0xff80c350>
  80c6c8:	9886b03a 	or	r3,r19,r2
  80c6cc:	18001c1e 	bne	r3,zero,80c740 <__subdf3+0x570>
  80c6d0:	0011883a 	mov	r8,zero
  80c6d4:	000b883a 	mov	r5,zero
  80c6d8:	0023883a 	mov	r17,zero
  80c6dc:	0021883a 	mov	r16,zero
  80c6e0:	003f3e06 	br	80c3dc <__alt_data_end+0xff80c3dc>
  80c6e4:	010007c4 	movi	r4,31
  80c6e8:	20803c16 	blt	r4,r2,80c7dc <__subdf3+0x60c>
  80c6ec:	01000804 	movi	r4,32
  80c6f0:	2089c83a 	sub	r4,r4,r2
  80c6f4:	1912983a 	sll	r9,r3,r4
  80c6f8:	308ed83a 	srl	r7,r6,r2
  80c6fc:	3108983a 	sll	r4,r6,r4
  80c700:	1884d83a 	srl	r2,r3,r2
  80c704:	49ceb03a 	or	r7,r9,r7
  80c708:	2008c03a 	cmpne	r4,r4,zero
  80c70c:	390eb03a 	or	r7,r7,r4
  80c710:	003f4706 	br	80c430 <__alt_data_end+0xff80c430>
  80c714:	2c48b03a 	or	r4,r5,r17
  80c718:	20003e26 	beq	r4,zero,80c814 <__subdf3+0x644>
  80c71c:	0084303a 	nor	r2,zero,r2
  80c720:	10003a1e 	bne	r2,zero,80c80c <__subdf3+0x63c>
  80c724:	3463c83a 	sub	r17,r6,r17
  80c728:	194bc83a 	sub	r5,r3,r5
  80c72c:	344d803a 	cmpltu	r6,r6,r17
  80c730:	298bc83a 	sub	r5,r5,r6
  80c734:	5021883a 	mov	r16,r10
  80c738:	3825883a 	mov	r18,r7
  80c73c:	003f0406 	br	80c350 <__alt_data_end+0xff80c350>
  80c740:	1023883a 	mov	r17,r2
  80c744:	003f0706 	br	80c364 <__alt_data_end+0xff80c364>
  80c748:	0101ffc4 	movi	r4,2047
  80c74c:	813f331e 	bne	r16,r4,80c41c <__alt_data_end+0xff80c41c>
  80c750:	003ec206 	br	80c25c <__alt_data_end+0xff80c25c>
  80c754:	0027883a 	mov	r19,zero
  80c758:	003fb006 	br	80c61c <__alt_data_end+0xff80c61c>
  80c75c:	0005883a 	mov	r2,zero
  80c760:	003fbb06 	br	80c650 <__alt_data_end+0xff80c650>
  80c764:	2c44b03a 	or	r2,r5,r17
  80c768:	80008b1e 	bne	r16,zero,80c998 <__subdf3+0x7c8>
  80c76c:	1000b526 	beq	r2,zero,80ca44 <__subdf3+0x874>
  80c770:	1984b03a 	or	r2,r3,r6
  80c774:	103eb926 	beq	r2,zero,80c25c <__alt_data_end+0xff80c25c>
  80c778:	3449883a 	add	r4,r6,r17
  80c77c:	2463803a 	cmpltu	r17,r4,r17
  80c780:	194b883a 	add	r5,r3,r5
  80c784:	2c4b883a 	add	r5,r5,r17
  80c788:	2880202c 	andhi	r2,r5,128
  80c78c:	2023883a 	mov	r17,r4
  80c790:	103f5c26 	beq	r2,zero,80c504 <__alt_data_end+0xff80c504>
  80c794:	00bfe034 	movhi	r2,65408
  80c798:	10bfffc4 	addi	r2,r2,-1
  80c79c:	4821883a 	mov	r16,r9
  80c7a0:	288a703a 	and	r5,r5,r2
  80c7a4:	003ead06 	br	80c25c <__alt_data_end+0xff80c25c>
  80c7a8:	2c44b03a 	or	r2,r5,r17
  80c7ac:	8000291e 	bne	r16,zero,80c854 <__subdf3+0x684>
  80c7b0:	10004f1e 	bne	r2,zero,80c8f0 <__subdf3+0x720>
  80c7b4:	1984b03a 	or	r2,r3,r6
  80c7b8:	10000426 	beq	r2,zero,80c7cc <__subdf3+0x5fc>
  80c7bc:	180b883a 	mov	r5,r3
  80c7c0:	3023883a 	mov	r17,r6
  80c7c4:	3825883a 	mov	r18,r7
  80c7c8:	003ea406 	br	80c25c <__alt_data_end+0xff80c25c>
  80c7cc:	0011883a 	mov	r8,zero
  80c7d0:	000b883a 	mov	r5,zero
  80c7d4:	0023883a 	mov	r17,zero
  80c7d8:	003f0006 	br	80c3dc <__alt_data_end+0xff80c3dc>
  80c7dc:	11fff804 	addi	r7,r2,-32
  80c7e0:	19c8d83a 	srl	r4,r3,r7
  80c7e4:	01c00804 	movi	r7,32
  80c7e8:	11c07e26 	beq	r2,r7,80c9e4 <__subdf3+0x814>
  80c7ec:	01c01004 	movi	r7,64
  80c7f0:	3885c83a 	sub	r2,r7,r2
  80c7f4:	1884983a 	sll	r2,r3,r2
  80c7f8:	118cb03a 	or	r6,r2,r6
  80c7fc:	300ec03a 	cmpne	r7,r6,zero
  80c800:	390eb03a 	or	r7,r7,r4
  80c804:	0005883a 	mov	r2,zero
  80c808:	003f0906 	br	80c430 <__alt_data_end+0xff80c430>
  80c80c:	0101ffc4 	movi	r4,2047
  80c810:	513f991e 	bne	r10,r4,80c678 <__alt_data_end+0xff80c678>
  80c814:	180b883a 	mov	r5,r3
  80c818:	3023883a 	mov	r17,r6
  80c81c:	5021883a 	mov	r16,r10
  80c820:	3825883a 	mov	r18,r7
  80c824:	003e8d06 	br	80c25c <__alt_data_end+0xff80c25c>
  80c828:	80001a1e 	bne	r16,zero,80c894 <__subdf3+0x6c4>
  80c82c:	2c48b03a 	or	r4,r5,r17
  80c830:	20005526 	beq	r4,zero,80c988 <__subdf3+0x7b8>
  80c834:	0084303a 	nor	r2,zero,r2
  80c838:	1000511e 	bne	r2,zero,80c980 <__subdf3+0x7b0>
  80c83c:	89a3883a 	add	r17,r17,r6
  80c840:	194b883a 	add	r5,r3,r5
  80c844:	898d803a 	cmpltu	r6,r17,r6
  80c848:	298b883a 	add	r5,r5,r6
  80c84c:	5021883a 	mov	r16,r10
  80c850:	003efc06 	br	80c444 <__alt_data_end+0xff80c444>
  80c854:	1000341e 	bne	r2,zero,80c928 <__subdf3+0x758>
  80c858:	1984b03a 	or	r2,r3,r6
  80c85c:	10006f26 	beq	r2,zero,80ca1c <__subdf3+0x84c>
  80c860:	180b883a 	mov	r5,r3
  80c864:	3023883a 	mov	r17,r6
  80c868:	3825883a 	mov	r18,r7
  80c86c:	0401ffc4 	movi	r16,2047
  80c870:	003e7a06 	br	80c25c <__alt_data_end+0xff80c25c>
  80c874:	2c62b03a 	or	r17,r5,r17
  80c878:	8822c03a 	cmpne	r17,r17,zero
  80c87c:	0005883a 	mov	r2,zero
  80c880:	003f8a06 	br	80c6ac <__alt_data_end+0xff80c6ac>
  80c884:	3821883a 	mov	r16,r7
  80c888:	000b883a 	mov	r5,zero
  80c88c:	0023883a 	mov	r17,zero
  80c890:	003ed206 	br	80c3dc <__alt_data_end+0xff80c3dc>
  80c894:	0101ffc4 	movi	r4,2047
  80c898:	51003b26 	beq	r10,r4,80c988 <__subdf3+0x7b8>
  80c89c:	0085c83a 	sub	r2,zero,r2
  80c8a0:	29402034 	orhi	r5,r5,128
  80c8a4:	01000e04 	movi	r4,56
  80c8a8:	20806216 	blt	r4,r2,80ca34 <__subdf3+0x864>
  80c8ac:	010007c4 	movi	r4,31
  80c8b0:	20806b16 	blt	r4,r2,80ca60 <__subdf3+0x890>
  80c8b4:	01000804 	movi	r4,32
  80c8b8:	2089c83a 	sub	r4,r4,r2
  80c8bc:	2912983a 	sll	r9,r5,r4
  80c8c0:	888ed83a 	srl	r7,r17,r2
  80c8c4:	8908983a 	sll	r4,r17,r4
  80c8c8:	2884d83a 	srl	r2,r5,r2
  80c8cc:	49e2b03a 	or	r17,r9,r7
  80c8d0:	2008c03a 	cmpne	r4,r4,zero
  80c8d4:	8922b03a 	or	r17,r17,r4
  80c8d8:	89a3883a 	add	r17,r17,r6
  80c8dc:	10c5883a 	add	r2,r2,r3
  80c8e0:	898d803a 	cmpltu	r6,r17,r6
  80c8e4:	118b883a 	add	r5,r2,r6
  80c8e8:	5021883a 	mov	r16,r10
  80c8ec:	003ed506 	br	80c444 <__alt_data_end+0xff80c444>
  80c8f0:	1984b03a 	or	r2,r3,r6
  80c8f4:	103e5926 	beq	r2,zero,80c25c <__alt_data_end+0xff80c25c>
  80c8f8:	8989c83a 	sub	r4,r17,r6
  80c8fc:	8911803a 	cmpltu	r8,r17,r4
  80c900:	28c5c83a 	sub	r2,r5,r3
  80c904:	1205c83a 	sub	r2,r2,r8
  80c908:	1200202c 	andhi	r8,r2,128
  80c90c:	403ef926 	beq	r8,zero,80c4f4 <__alt_data_end+0xff80c4f4>
  80c910:	3463c83a 	sub	r17,r6,r17
  80c914:	194bc83a 	sub	r5,r3,r5
  80c918:	344d803a 	cmpltu	r6,r6,r17
  80c91c:	298bc83a 	sub	r5,r5,r6
  80c920:	3825883a 	mov	r18,r7
  80c924:	003e4d06 	br	80c25c <__alt_data_end+0xff80c25c>
  80c928:	1984b03a 	or	r2,r3,r6
  80c92c:	10002b26 	beq	r2,zero,80c9dc <__subdf3+0x80c>
  80c930:	2808d0fa 	srli	r4,r5,3
  80c934:	8822d0fa 	srli	r17,r17,3
  80c938:	280a977a 	slli	r5,r5,29
  80c93c:	2080022c 	andhi	r2,r4,8
  80c940:	2c62b03a 	or	r17,r5,r17
  80c944:	10000826 	beq	r2,zero,80c968 <__subdf3+0x798>
  80c948:	1810d0fa 	srli	r8,r3,3
  80c94c:	4080022c 	andhi	r2,r8,8
  80c950:	1000051e 	bne	r2,zero,80c968 <__subdf3+0x798>
  80c954:	300cd0fa 	srli	r6,r6,3
  80c958:	1804977a 	slli	r2,r3,29
  80c95c:	4009883a 	mov	r4,r8
  80c960:	3825883a 	mov	r18,r7
  80c964:	11a2b03a 	or	r17,r2,r6
  80c968:	880ad77a 	srli	r5,r17,29
  80c96c:	200890fa 	slli	r4,r4,3
  80c970:	882290fa 	slli	r17,r17,3
  80c974:	0401ffc4 	movi	r16,2047
  80c978:	290ab03a 	or	r5,r5,r4
  80c97c:	003e3706 	br	80c25c <__alt_data_end+0xff80c25c>
  80c980:	0101ffc4 	movi	r4,2047
  80c984:	513fc71e 	bne	r10,r4,80c8a4 <__alt_data_end+0xff80c8a4>
  80c988:	180b883a 	mov	r5,r3
  80c98c:	3023883a 	mov	r17,r6
  80c990:	5021883a 	mov	r16,r10
  80c994:	003e3106 	br	80c25c <__alt_data_end+0xff80c25c>
  80c998:	10002d26 	beq	r2,zero,80ca50 <__subdf3+0x880>
  80c99c:	1984b03a 	or	r2,r3,r6
  80c9a0:	10000e26 	beq	r2,zero,80c9dc <__subdf3+0x80c>
  80c9a4:	2808d0fa 	srli	r4,r5,3
  80c9a8:	8822d0fa 	srli	r17,r17,3
  80c9ac:	280a977a 	slli	r5,r5,29
  80c9b0:	2080022c 	andhi	r2,r4,8
  80c9b4:	2c62b03a 	or	r17,r5,r17
  80c9b8:	103feb26 	beq	r2,zero,80c968 <__alt_data_end+0xff80c968>
  80c9bc:	180ed0fa 	srli	r7,r3,3
  80c9c0:	3880022c 	andhi	r2,r7,8
  80c9c4:	103fe81e 	bne	r2,zero,80c968 <__alt_data_end+0xff80c968>
  80c9c8:	300cd0fa 	srli	r6,r6,3
  80c9cc:	1804977a 	slli	r2,r3,29
  80c9d0:	3809883a 	mov	r4,r7
  80c9d4:	11a2b03a 	or	r17,r2,r6
  80c9d8:	003fe306 	br	80c968 <__alt_data_end+0xff80c968>
  80c9dc:	0401ffc4 	movi	r16,2047
  80c9e0:	003e1e06 	br	80c25c <__alt_data_end+0xff80c25c>
  80c9e4:	0005883a 	mov	r2,zero
  80c9e8:	003f8306 	br	80c7f8 <__alt_data_end+0xff80c7f8>
  80c9ec:	113ff804 	addi	r4,r2,-32
  80c9f0:	02000804 	movi	r8,32
  80c9f4:	2908d83a 	srl	r4,r5,r4
  80c9f8:	12002526 	beq	r2,r8,80ca90 <__subdf3+0x8c0>
  80c9fc:	02001004 	movi	r8,64
  80ca00:	4085c83a 	sub	r2,r8,r2
  80ca04:	288a983a 	sll	r5,r5,r2
  80ca08:	2c62b03a 	or	r17,r5,r17
  80ca0c:	8822c03a 	cmpne	r17,r17,zero
  80ca10:	8922b03a 	or	r17,r17,r4
  80ca14:	0005883a 	mov	r2,zero
  80ca18:	003f2406 	br	80c6ac <__alt_data_end+0xff80c6ac>
  80ca1c:	01402034 	movhi	r5,128
  80ca20:	0011883a 	mov	r8,zero
  80ca24:	297fffc4 	addi	r5,r5,-1
  80ca28:	047ffe04 	movi	r17,-8
  80ca2c:	0401ffc4 	movi	r16,2047
  80ca30:	003e6a06 	br	80c3dc <__alt_data_end+0xff80c3dc>
  80ca34:	2c62b03a 	or	r17,r5,r17
  80ca38:	8822c03a 	cmpne	r17,r17,zero
  80ca3c:	0005883a 	mov	r2,zero
  80ca40:	003fa506 	br	80c8d8 <__alt_data_end+0xff80c8d8>
  80ca44:	180b883a 	mov	r5,r3
  80ca48:	3023883a 	mov	r17,r6
  80ca4c:	003e0306 	br	80c25c <__alt_data_end+0xff80c25c>
  80ca50:	180b883a 	mov	r5,r3
  80ca54:	3023883a 	mov	r17,r6
  80ca58:	0401ffc4 	movi	r16,2047
  80ca5c:	003dff06 	br	80c25c <__alt_data_end+0xff80c25c>
  80ca60:	113ff804 	addi	r4,r2,-32
  80ca64:	01c00804 	movi	r7,32
  80ca68:	2908d83a 	srl	r4,r5,r4
  80ca6c:	11c00a26 	beq	r2,r7,80ca98 <__subdf3+0x8c8>
  80ca70:	01c01004 	movi	r7,64
  80ca74:	3885c83a 	sub	r2,r7,r2
  80ca78:	288a983a 	sll	r5,r5,r2
  80ca7c:	2c62b03a 	or	r17,r5,r17
  80ca80:	8822c03a 	cmpne	r17,r17,zero
  80ca84:	8922b03a 	or	r17,r17,r4
  80ca88:	0005883a 	mov	r2,zero
  80ca8c:	003f9206 	br	80c8d8 <__alt_data_end+0xff80c8d8>
  80ca90:	000b883a 	mov	r5,zero
  80ca94:	003fdc06 	br	80ca08 <__alt_data_end+0xff80ca08>
  80ca98:	000b883a 	mov	r5,zero
  80ca9c:	003ff706 	br	80ca7c <__alt_data_end+0xff80ca7c>

0080caa0 <__fixdfsi>:
  80caa0:	2806d53a 	srli	r3,r5,20
  80caa4:	00800434 	movhi	r2,16
  80caa8:	10bfffc4 	addi	r2,r2,-1
  80caac:	18c1ffcc 	andi	r3,r3,2047
  80cab0:	0180ff84 	movi	r6,1022
  80cab4:	2884703a 	and	r2,r5,r2
  80cab8:	280ad7fa 	srli	r5,r5,31
  80cabc:	30c0130e 	bge	r6,r3,80cb0c <__fixdfsi+0x6c>
  80cac0:	01810744 	movi	r6,1053
  80cac4:	30c00d16 	blt	r6,r3,80cafc <__fixdfsi+0x5c>
  80cac8:	01810cc4 	movi	r6,1075
  80cacc:	30cdc83a 	sub	r6,r6,r3
  80cad0:	01c007c4 	movi	r7,31
  80cad4:	10800434 	orhi	r2,r2,16
  80cad8:	39800e0e 	bge	r7,r6,80cb14 <__fixdfsi+0x74>
  80cadc:	010104c4 	movi	r4,1043
  80cae0:	20c7c83a 	sub	r3,r4,r3
  80cae4:	10c6d83a 	srl	r3,r2,r3
  80cae8:	29403fcc 	andi	r5,r5,255
  80caec:	0145c83a 	sub	r2,zero,r5
  80caf0:	1884f03a 	xor	r2,r3,r2
  80caf4:	1145883a 	add	r2,r2,r5
  80caf8:	f800283a 	ret
  80cafc:	00a00034 	movhi	r2,32768
  80cb00:	10bfffc4 	addi	r2,r2,-1
  80cb04:	2885883a 	add	r2,r5,r2
  80cb08:	f800283a 	ret
  80cb0c:	0005883a 	mov	r2,zero
  80cb10:	f800283a 	ret
  80cb14:	18fefb44 	addi	r3,r3,-1043
  80cb18:	2188d83a 	srl	r4,r4,r6
  80cb1c:	10c6983a 	sll	r3,r2,r3
  80cb20:	20c6b03a 	or	r3,r4,r3
  80cb24:	003ff006 	br	80cae8 <__alt_data_end+0xff80cae8>

0080cb28 <__floatsidf>:
  80cb28:	defffd04 	addi	sp,sp,-12
  80cb2c:	dc400115 	stw	r17,4(sp)
  80cb30:	dfc00215 	stw	ra,8(sp)
  80cb34:	dc000015 	stw	r16,0(sp)
  80cb38:	2023883a 	mov	r17,r4
  80cb3c:	20001426 	beq	r4,zero,80cb90 <__floatsidf+0x68>
  80cb40:	2020d7fa 	srli	r16,r4,31
  80cb44:	80000126 	beq	r16,zero,80cb4c <__floatsidf+0x24>
  80cb48:	0123c83a 	sub	r17,zero,r4
  80cb4c:	8809883a 	mov	r4,r17
  80cb50:	080cc9c0 	call	80cc9c <__clzsi2>
  80cb54:	01410784 	movi	r5,1054
  80cb58:	00c00284 	movi	r3,10
  80cb5c:	288bc83a 	sub	r5,r5,r2
  80cb60:	18801c16 	blt	r3,r2,80cbd4 <__floatsidf+0xac>
  80cb64:	00c002c4 	movi	r3,11
  80cb68:	1887c83a 	sub	r3,r3,r2
  80cb6c:	88c8d83a 	srl	r4,r17,r3
  80cb70:	00c00434 	movhi	r3,16
  80cb74:	18ffffc4 	addi	r3,r3,-1
  80cb78:	10800544 	addi	r2,r2,21
  80cb7c:	20c8703a 	and	r4,r4,r3
  80cb80:	8884983a 	sll	r2,r17,r2
  80cb84:	28c1ffcc 	andi	r3,r5,2047
  80cb88:	800d883a 	mov	r6,r16
  80cb8c:	00000406 	br	80cba0 <__floatsidf+0x78>
  80cb90:	000d883a 	mov	r6,zero
  80cb94:	0007883a 	mov	r3,zero
  80cb98:	0009883a 	mov	r4,zero
  80cb9c:	0005883a 	mov	r2,zero
  80cba0:	180a953a 	slli	r5,r3,20
  80cba4:	31803fcc 	andi	r6,r6,255
  80cba8:	00c00434 	movhi	r3,16
  80cbac:	300c97fa 	slli	r6,r6,31
  80cbb0:	18ffffc4 	addi	r3,r3,-1
  80cbb4:	20c6703a 	and	r3,r4,r3
  80cbb8:	1946b03a 	or	r3,r3,r5
  80cbbc:	1986b03a 	or	r3,r3,r6
  80cbc0:	dfc00217 	ldw	ra,8(sp)
  80cbc4:	dc400117 	ldw	r17,4(sp)
  80cbc8:	dc000017 	ldw	r16,0(sp)
  80cbcc:	dec00304 	addi	sp,sp,12
  80cbd0:	f800283a 	ret
  80cbd4:	10fffd44 	addi	r3,r2,-11
  80cbd8:	88c8983a 	sll	r4,r17,r3
  80cbdc:	00800434 	movhi	r2,16
  80cbe0:	10bfffc4 	addi	r2,r2,-1
  80cbe4:	2088703a 	and	r4,r4,r2
  80cbe8:	28c1ffcc 	andi	r3,r5,2047
  80cbec:	800d883a 	mov	r6,r16
  80cbf0:	0005883a 	mov	r2,zero
  80cbf4:	003fea06 	br	80cba0 <__alt_data_end+0xff80cba0>

0080cbf8 <__floatunsidf>:
  80cbf8:	defffe04 	addi	sp,sp,-8
  80cbfc:	dc000015 	stw	r16,0(sp)
  80cc00:	dfc00115 	stw	ra,4(sp)
  80cc04:	2021883a 	mov	r16,r4
  80cc08:	20001026 	beq	r4,zero,80cc4c <__floatunsidf+0x54>
  80cc0c:	080cc9c0 	call	80cc9c <__clzsi2>
  80cc10:	01410784 	movi	r5,1054
  80cc14:	100d883a 	mov	r6,r2
  80cc18:	288bc83a 	sub	r5,r5,r2
  80cc1c:	00800284 	movi	r2,10
  80cc20:	11801616 	blt	r2,r6,80cc7c <__floatunsidf+0x84>
  80cc24:	008002c4 	movi	r2,11
  80cc28:	1185c83a 	sub	r2,r2,r6
  80cc2c:	8084d83a 	srl	r2,r16,r2
  80cc30:	00c00434 	movhi	r3,16
  80cc34:	31c00544 	addi	r7,r6,21
  80cc38:	18ffffc4 	addi	r3,r3,-1
  80cc3c:	81e0983a 	sll	r16,r16,r7
  80cc40:	10cc703a 	and	r6,r2,r3
  80cc44:	2941ffcc 	andi	r5,r5,2047
  80cc48:	00000206 	br	80cc54 <__floatunsidf+0x5c>
  80cc4c:	000b883a 	mov	r5,zero
  80cc50:	000d883a 	mov	r6,zero
  80cc54:	280a953a 	slli	r5,r5,20
  80cc58:	00c00434 	movhi	r3,16
  80cc5c:	18ffffc4 	addi	r3,r3,-1
  80cc60:	30c6703a 	and	r3,r6,r3
  80cc64:	8005883a 	mov	r2,r16
  80cc68:	1946b03a 	or	r3,r3,r5
  80cc6c:	dfc00117 	ldw	ra,4(sp)
  80cc70:	dc000017 	ldw	r16,0(sp)
  80cc74:	dec00204 	addi	sp,sp,8
  80cc78:	f800283a 	ret
  80cc7c:	31bffd44 	addi	r6,r6,-11
  80cc80:	818c983a 	sll	r6,r16,r6
  80cc84:	00800434 	movhi	r2,16
  80cc88:	10bfffc4 	addi	r2,r2,-1
  80cc8c:	2941ffcc 	andi	r5,r5,2047
  80cc90:	0021883a 	mov	r16,zero
  80cc94:	308c703a 	and	r6,r6,r2
  80cc98:	003fee06 	br	80cc54 <__alt_data_end+0xff80cc54>

0080cc9c <__clzsi2>:
  80cc9c:	00bfffd4 	movui	r2,65535
  80cca0:	11000b36 	bltu	r2,r4,80ccd0 <__clzsi2+0x34>
  80cca4:	00803fc4 	movi	r2,255
  80cca8:	1100122e 	bgeu	r2,r4,80ccf4 <__clzsi2+0x58>
  80ccac:	00c00204 	movi	r3,8
  80ccb0:	01400604 	movi	r5,24
  80ccb4:	20c8d83a 	srl	r4,r4,r3
  80ccb8:	00802074 	movhi	r2,129
  80ccbc:	1081c604 	addi	r2,r2,1816
  80ccc0:	1109883a 	add	r4,r2,r4
  80ccc4:	20800003 	ldbu	r2,0(r4)
  80ccc8:	2885c83a 	sub	r2,r5,r2
  80cccc:	f800283a 	ret
  80ccd0:	00804034 	movhi	r2,256
  80ccd4:	10bfffc4 	addi	r2,r2,-1
  80ccd8:	11000336 	bltu	r2,r4,80cce8 <__clzsi2+0x4c>
  80ccdc:	00c00404 	movi	r3,16
  80cce0:	180b883a 	mov	r5,r3
  80cce4:	003ff306 	br	80ccb4 <__alt_data_end+0xff80ccb4>
  80cce8:	00c00604 	movi	r3,24
  80ccec:	01400204 	movi	r5,8
  80ccf0:	003ff006 	br	80ccb4 <__alt_data_end+0xff80ccb4>
  80ccf4:	0007883a 	mov	r3,zero
  80ccf8:	01400804 	movi	r5,32
  80ccfc:	003fed06 	br	80ccb4 <__alt_data_end+0xff80ccb4>

0080cd00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cd00:	defffe04 	addi	sp,sp,-8
  80cd04:	dfc00115 	stw	ra,4(sp)
  80cd08:	df000015 	stw	fp,0(sp)
  80cd0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80cd10:	00802074 	movhi	r2,129
  80cd14:	10860204 	addi	r2,r2,6152
  80cd18:	10800017 	ldw	r2,0(r2)
  80cd1c:	10000526 	beq	r2,zero,80cd34 <alt_get_errno+0x34>
  80cd20:	00802074 	movhi	r2,129
  80cd24:	10860204 	addi	r2,r2,6152
  80cd28:	10800017 	ldw	r2,0(r2)
  80cd2c:	103ee83a 	callr	r2
  80cd30:	00000206 	br	80cd3c <alt_get_errno+0x3c>
  80cd34:	00802074 	movhi	r2,129
  80cd38:	10895404 	addi	r2,r2,9552
}
  80cd3c:	e037883a 	mov	sp,fp
  80cd40:	dfc00117 	ldw	ra,4(sp)
  80cd44:	df000017 	ldw	fp,0(sp)
  80cd48:	dec00204 	addi	sp,sp,8
  80cd4c:	f800283a 	ret

0080cd50 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80cd50:	defffb04 	addi	sp,sp,-20
  80cd54:	dfc00415 	stw	ra,16(sp)
  80cd58:	df000315 	stw	fp,12(sp)
  80cd5c:	df000304 	addi	fp,sp,12
  80cd60:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80cd64:	e0bfff17 	ldw	r2,-4(fp)
  80cd68:	10000616 	blt	r2,zero,80cd84 <close+0x34>
  80cd6c:	e0bfff17 	ldw	r2,-4(fp)
  80cd70:	10c00324 	muli	r3,r2,12
  80cd74:	00802074 	movhi	r2,129
  80cd78:	1084fb04 	addi	r2,r2,5100
  80cd7c:	1885883a 	add	r2,r3,r2
  80cd80:	00000106 	br	80cd88 <close+0x38>
  80cd84:	0005883a 	mov	r2,zero
  80cd88:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80cd8c:	e0bffd17 	ldw	r2,-12(fp)
  80cd90:	10001926 	beq	r2,zero,80cdf8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80cd94:	e0bffd17 	ldw	r2,-12(fp)
  80cd98:	10800017 	ldw	r2,0(r2)
  80cd9c:	10800417 	ldw	r2,16(r2)
  80cda0:	10000626 	beq	r2,zero,80cdbc <close+0x6c>
  80cda4:	e0bffd17 	ldw	r2,-12(fp)
  80cda8:	10800017 	ldw	r2,0(r2)
  80cdac:	10800417 	ldw	r2,16(r2)
  80cdb0:	e13ffd17 	ldw	r4,-12(fp)
  80cdb4:	103ee83a 	callr	r2
  80cdb8:	00000106 	br	80cdc0 <close+0x70>
  80cdbc:	0005883a 	mov	r2,zero
  80cdc0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80cdc4:	e13fff17 	ldw	r4,-4(fp)
  80cdc8:	080d5fc0 	call	80d5fc <alt_release_fd>
    if (rval < 0)
  80cdcc:	e0bffe17 	ldw	r2,-8(fp)
  80cdd0:	1000070e 	bge	r2,zero,80cdf0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80cdd4:	080cd000 	call	80cd00 <alt_get_errno>
  80cdd8:	1007883a 	mov	r3,r2
  80cddc:	e0bffe17 	ldw	r2,-8(fp)
  80cde0:	0085c83a 	sub	r2,zero,r2
  80cde4:	18800015 	stw	r2,0(r3)
      return -1;
  80cde8:	00bfffc4 	movi	r2,-1
  80cdec:	00000706 	br	80ce0c <close+0xbc>
    }
    return 0;
  80cdf0:	0005883a 	mov	r2,zero
  80cdf4:	00000506 	br	80ce0c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80cdf8:	080cd000 	call	80cd00 <alt_get_errno>
  80cdfc:	1007883a 	mov	r3,r2
  80ce00:	00801444 	movi	r2,81
  80ce04:	18800015 	stw	r2,0(r3)
    return -1;
  80ce08:	00bfffc4 	movi	r2,-1
  }
}
  80ce0c:	e037883a 	mov	sp,fp
  80ce10:	dfc00117 	ldw	ra,4(sp)
  80ce14:	df000017 	ldw	fp,0(sp)
  80ce18:	dec00204 	addi	sp,sp,8
  80ce1c:	f800283a 	ret

0080ce20 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80ce20:	defffc04 	addi	sp,sp,-16
  80ce24:	df000315 	stw	fp,12(sp)
  80ce28:	df000304 	addi	fp,sp,12
  80ce2c:	e13ffd15 	stw	r4,-12(fp)
  80ce30:	e17ffe15 	stw	r5,-8(fp)
  80ce34:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80ce38:	e0bfff17 	ldw	r2,-4(fp)
}
  80ce3c:	e037883a 	mov	sp,fp
  80ce40:	df000017 	ldw	fp,0(sp)
  80ce44:	dec00104 	addi	sp,sp,4
  80ce48:	f800283a 	ret

0080ce4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ce4c:	defffe04 	addi	sp,sp,-8
  80ce50:	dfc00115 	stw	ra,4(sp)
  80ce54:	df000015 	stw	fp,0(sp)
  80ce58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ce5c:	00802074 	movhi	r2,129
  80ce60:	10860204 	addi	r2,r2,6152
  80ce64:	10800017 	ldw	r2,0(r2)
  80ce68:	10000526 	beq	r2,zero,80ce80 <alt_get_errno+0x34>
  80ce6c:	00802074 	movhi	r2,129
  80ce70:	10860204 	addi	r2,r2,6152
  80ce74:	10800017 	ldw	r2,0(r2)
  80ce78:	103ee83a 	callr	r2
  80ce7c:	00000206 	br	80ce88 <alt_get_errno+0x3c>
  80ce80:	00802074 	movhi	r2,129
  80ce84:	10895404 	addi	r2,r2,9552
}
  80ce88:	e037883a 	mov	sp,fp
  80ce8c:	dfc00117 	ldw	ra,4(sp)
  80ce90:	df000017 	ldw	fp,0(sp)
  80ce94:	dec00204 	addi	sp,sp,8
  80ce98:	f800283a 	ret

0080ce9c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80ce9c:	defffb04 	addi	sp,sp,-20
  80cea0:	dfc00415 	stw	ra,16(sp)
  80cea4:	df000315 	stw	fp,12(sp)
  80cea8:	df000304 	addi	fp,sp,12
  80ceac:	e13ffe15 	stw	r4,-8(fp)
  80ceb0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ceb4:	e0bffe17 	ldw	r2,-8(fp)
  80ceb8:	10000616 	blt	r2,zero,80ced4 <fstat+0x38>
  80cebc:	e0bffe17 	ldw	r2,-8(fp)
  80cec0:	10c00324 	muli	r3,r2,12
  80cec4:	00802074 	movhi	r2,129
  80cec8:	1084fb04 	addi	r2,r2,5100
  80cecc:	1885883a 	add	r2,r3,r2
  80ced0:	00000106 	br	80ced8 <fstat+0x3c>
  80ced4:	0005883a 	mov	r2,zero
  80ced8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80cedc:	e0bffd17 	ldw	r2,-12(fp)
  80cee0:	10001026 	beq	r2,zero,80cf24 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80cee4:	e0bffd17 	ldw	r2,-12(fp)
  80cee8:	10800017 	ldw	r2,0(r2)
  80ceec:	10800817 	ldw	r2,32(r2)
  80cef0:	10000726 	beq	r2,zero,80cf10 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80cef4:	e0bffd17 	ldw	r2,-12(fp)
  80cef8:	10800017 	ldw	r2,0(r2)
  80cefc:	10800817 	ldw	r2,32(r2)
  80cf00:	e13ffd17 	ldw	r4,-12(fp)
  80cf04:	e17fff17 	ldw	r5,-4(fp)
  80cf08:	103ee83a 	callr	r2
  80cf0c:	00000a06 	br	80cf38 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80cf10:	e0bfff17 	ldw	r2,-4(fp)
  80cf14:	00c80004 	movi	r3,8192
  80cf18:	10c00115 	stw	r3,4(r2)
      return 0;
  80cf1c:	0005883a 	mov	r2,zero
  80cf20:	00000506 	br	80cf38 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80cf24:	080ce4c0 	call	80ce4c <alt_get_errno>
  80cf28:	1007883a 	mov	r3,r2
  80cf2c:	00801444 	movi	r2,81
  80cf30:	18800015 	stw	r2,0(r3)
    return -1;
  80cf34:	00bfffc4 	movi	r2,-1
  }
}
  80cf38:	e037883a 	mov	sp,fp
  80cf3c:	dfc00117 	ldw	ra,4(sp)
  80cf40:	df000017 	ldw	fp,0(sp)
  80cf44:	dec00204 	addi	sp,sp,8
  80cf48:	f800283a 	ret

0080cf4c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80cf4c:	defff004 	addi	sp,sp,-64
  80cf50:	df000f15 	stw	fp,60(sp)
  80cf54:	df000f04 	addi	fp,sp,60
  80cf58:	e13ffd15 	stw	r4,-12(fp)
  80cf5c:	e17ffe15 	stw	r5,-8(fp)
  80cf60:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  80cf64:	00bffa84 	movi	r2,-22
  80cf68:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80cf6c:	e0bffd17 	ldw	r2,-12(fp)
  80cf70:	10800828 	cmpgeui	r2,r2,32
  80cf74:	10005c1e 	bne	r2,zero,80d0e8 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cf78:	0005303a 	rdctl	r2,status
  80cf7c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cf80:	e0fff317 	ldw	r3,-52(fp)
  80cf84:	00bfff84 	movi	r2,-2
  80cf88:	1884703a 	and	r2,r3,r2
  80cf8c:	1001703a 	wrctl	status,r2
  
  return context;
  80cf90:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80cf94:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
  80cf98:	00802074 	movhi	r2,129
  80cf9c:	10896604 	addi	r2,r2,9624
  80cfa0:	e0fffd17 	ldw	r3,-12(fp)
  80cfa4:	180690fa 	slli	r3,r3,3
  80cfa8:	10c5883a 	add	r2,r2,r3
  80cfac:	e0ffff17 	ldw	r3,-4(fp)
  80cfb0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  80cfb4:	00802074 	movhi	r2,129
  80cfb8:	10896604 	addi	r2,r2,9624
  80cfbc:	e0fffd17 	ldw	r3,-12(fp)
  80cfc0:	180690fa 	slli	r3,r3,3
  80cfc4:	18c00104 	addi	r3,r3,4
  80cfc8:	10c5883a 	add	r2,r2,r3
  80cfcc:	e0fffe17 	ldw	r3,-8(fp)
  80cfd0:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80cfd4:	e0bfff17 	ldw	r2,-4(fp)
  80cfd8:	10001f26 	beq	r2,zero,80d058 <alt_irq_register+0x10c>
  80cfdc:	e0bffd17 	ldw	r2,-12(fp)
  80cfe0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cfe4:	0005303a 	rdctl	r2,status
  80cfe8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cfec:	e0fff517 	ldw	r3,-44(fp)
  80cff0:	00bfff84 	movi	r2,-2
  80cff4:	1884703a 	and	r2,r3,r2
  80cff8:	1001703a 	wrctl	status,r2
  
  return context;
  80cffc:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80d000:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
  80d004:	e0bff417 	ldw	r2,-48(fp)
  80d008:	00c00044 	movi	r3,1
  80d00c:	1884983a 	sll	r2,r3,r2
  80d010:	1007883a 	mov	r3,r2
  80d014:	00802074 	movhi	r2,129
  80d018:	10895504 	addi	r2,r2,9556
  80d01c:	10800017 	ldw	r2,0(r2)
  80d020:	1886b03a 	or	r3,r3,r2
  80d024:	00802074 	movhi	r2,129
  80d028:	10895504 	addi	r2,r2,9556
  80d02c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80d030:	00802074 	movhi	r2,129
  80d034:	10895504 	addi	r2,r2,9556
  80d038:	10800017 	ldw	r2,0(r2)
  80d03c:	100170fa 	wrctl	ienable,r2
  80d040:	e0bff617 	ldw	r2,-40(fp)
  80d044:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d048:	e0bff717 	ldw	r2,-36(fp)
  80d04c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80d050:	0005883a 	mov	r2,zero
  80d054:	00001f06 	br	80d0d4 <alt_irq_register+0x188>
  80d058:	e0bffd17 	ldw	r2,-12(fp)
  80d05c:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d060:	0005303a 	rdctl	r2,status
  80d064:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d068:	e0fff917 	ldw	r3,-28(fp)
  80d06c:	00bfff84 	movi	r2,-2
  80d070:	1884703a 	and	r2,r3,r2
  80d074:	1001703a 	wrctl	status,r2
  
  return context;
  80d078:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80d07c:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
  80d080:	e0bff817 	ldw	r2,-32(fp)
  80d084:	00c00044 	movi	r3,1
  80d088:	1884983a 	sll	r2,r3,r2
  80d08c:	0084303a 	nor	r2,zero,r2
  80d090:	1007883a 	mov	r3,r2
  80d094:	00802074 	movhi	r2,129
  80d098:	10895504 	addi	r2,r2,9556
  80d09c:	10800017 	ldw	r2,0(r2)
  80d0a0:	1886703a 	and	r3,r3,r2
  80d0a4:	00802074 	movhi	r2,129
  80d0a8:	10895504 	addi	r2,r2,9556
  80d0ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80d0b0:	00802074 	movhi	r2,129
  80d0b4:	10895504 	addi	r2,r2,9556
  80d0b8:	10800017 	ldw	r2,0(r2)
  80d0bc:	100170fa 	wrctl	ienable,r2
  80d0c0:	e0bffa17 	ldw	r2,-24(fp)
  80d0c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d0c8:	e0bffb17 	ldw	r2,-20(fp)
  80d0cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80d0d0:	0005883a 	mov	r2,zero
  80d0d4:	e0bff115 	stw	r2,-60(fp)
  80d0d8:	e0bff217 	ldw	r2,-56(fp)
  80d0dc:	e0bffc15 	stw	r2,-16(fp)
  80d0e0:	e0bffc17 	ldw	r2,-16(fp)
  80d0e4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80d0e8:	e0bff117 	ldw	r2,-60(fp)
}
  80d0ec:	e037883a 	mov	sp,fp
  80d0f0:	df000017 	ldw	fp,0(sp)
  80d0f4:	dec00104 	addi	sp,sp,4
  80d0f8:	f800283a 	ret

0080d0fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d0fc:	defffe04 	addi	sp,sp,-8
  80d100:	dfc00115 	stw	ra,4(sp)
  80d104:	df000015 	stw	fp,0(sp)
  80d108:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d10c:	00802074 	movhi	r2,129
  80d110:	10860204 	addi	r2,r2,6152
  80d114:	10800017 	ldw	r2,0(r2)
  80d118:	10000526 	beq	r2,zero,80d130 <alt_get_errno+0x34>
  80d11c:	00802074 	movhi	r2,129
  80d120:	10860204 	addi	r2,r2,6152
  80d124:	10800017 	ldw	r2,0(r2)
  80d128:	103ee83a 	callr	r2
  80d12c:	00000206 	br	80d138 <alt_get_errno+0x3c>
  80d130:	00802074 	movhi	r2,129
  80d134:	10895404 	addi	r2,r2,9552
}
  80d138:	e037883a 	mov	sp,fp
  80d13c:	dfc00117 	ldw	ra,4(sp)
  80d140:	df000017 	ldw	fp,0(sp)
  80d144:	dec00204 	addi	sp,sp,8
  80d148:	f800283a 	ret

0080d14c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80d14c:	deffed04 	addi	sp,sp,-76
  80d150:	dfc01215 	stw	ra,72(sp)
  80d154:	df001115 	stw	fp,68(sp)
  80d158:	df001104 	addi	fp,sp,68
  80d15c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d160:	e0bfff17 	ldw	r2,-4(fp)
  80d164:	10000616 	blt	r2,zero,80d180 <isatty+0x34>
  80d168:	e0bfff17 	ldw	r2,-4(fp)
  80d16c:	10c00324 	muli	r3,r2,12
  80d170:	00802074 	movhi	r2,129
  80d174:	1084fb04 	addi	r2,r2,5100
  80d178:	1885883a 	add	r2,r3,r2
  80d17c:	00000106 	br	80d184 <isatty+0x38>
  80d180:	0005883a 	mov	r2,zero
  80d184:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80d188:	e0bfef17 	ldw	r2,-68(fp)
  80d18c:	10000e26 	beq	r2,zero,80d1c8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80d190:	e0bfef17 	ldw	r2,-68(fp)
  80d194:	10800017 	ldw	r2,0(r2)
  80d198:	10800817 	ldw	r2,32(r2)
  80d19c:	1000021e 	bne	r2,zero,80d1a8 <isatty+0x5c>
    {
      return 1;
  80d1a0:	00800044 	movi	r2,1
  80d1a4:	00000d06 	br	80d1dc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80d1a8:	e0bff004 	addi	r2,fp,-64
  80d1ac:	e13fff17 	ldw	r4,-4(fp)
  80d1b0:	100b883a 	mov	r5,r2
  80d1b4:	080ce9c0 	call	80ce9c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80d1b8:	e0bff117 	ldw	r2,-60(fp)
  80d1bc:	10880020 	cmpeqi	r2,r2,8192
  80d1c0:	10803fcc 	andi	r2,r2,255
  80d1c4:	00000506 	br	80d1dc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80d1c8:	080d0fc0 	call	80d0fc <alt_get_errno>
  80d1cc:	1007883a 	mov	r3,r2
  80d1d0:	00801444 	movi	r2,81
  80d1d4:	18800015 	stw	r2,0(r3)
    return 0;
  80d1d8:	0005883a 	mov	r2,zero
  }
}
  80d1dc:	e037883a 	mov	sp,fp
  80d1e0:	dfc00117 	ldw	ra,4(sp)
  80d1e4:	df000017 	ldw	fp,0(sp)
  80d1e8:	dec00204 	addi	sp,sp,8
  80d1ec:	f800283a 	ret

0080d1f0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80d1f0:	defffc04 	addi	sp,sp,-16
  80d1f4:	df000315 	stw	fp,12(sp)
  80d1f8:	df000304 	addi	fp,sp,12
  80d1fc:	e13ffd15 	stw	r4,-12(fp)
  80d200:	e17ffe15 	stw	r5,-8(fp)
  80d204:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80d208:	e0fffe17 	ldw	r3,-8(fp)
  80d20c:	e0bffd17 	ldw	r2,-12(fp)
  80d210:	18800c26 	beq	r3,r2,80d244 <alt_load_section+0x54>
  {
    while( to != end )
  80d214:	00000806 	br	80d238 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80d218:	e0bffe17 	ldw	r2,-8(fp)
  80d21c:	10c00104 	addi	r3,r2,4
  80d220:	e0fffe15 	stw	r3,-8(fp)
  80d224:	e0fffd17 	ldw	r3,-12(fp)
  80d228:	19000104 	addi	r4,r3,4
  80d22c:	e13ffd15 	stw	r4,-12(fp)
  80d230:	18c00017 	ldw	r3,0(r3)
  80d234:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80d238:	e0fffe17 	ldw	r3,-8(fp)
  80d23c:	e0bfff17 	ldw	r2,-4(fp)
  80d240:	18bff51e 	bne	r3,r2,80d218 <__alt_data_end+0xff80d218>
    {
      *to++ = *from++;
    }
  }
}
  80d244:	e037883a 	mov	sp,fp
  80d248:	df000017 	ldw	fp,0(sp)
  80d24c:	dec00104 	addi	sp,sp,4
  80d250:	f800283a 	ret

0080d254 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80d254:	defffe04 	addi	sp,sp,-8
  80d258:	dfc00115 	stw	ra,4(sp)
  80d25c:	df000015 	stw	fp,0(sp)
  80d260:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80d264:	01002074 	movhi	r4,129
  80d268:	21060904 	addi	r4,r4,6180
  80d26c:	01402074 	movhi	r5,129
  80d270:	2942c504 	addi	r5,r5,2836
  80d274:	01802074 	movhi	r6,129
  80d278:	31860904 	addi	r6,r6,6180
  80d27c:	080d1f00 	call	80d1f0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80d280:	01002034 	movhi	r4,128
  80d284:	21000804 	addi	r4,r4,32
  80d288:	01402034 	movhi	r5,128
  80d28c:	29400804 	addi	r5,r5,32
  80d290:	01802034 	movhi	r6,128
  80d294:	31809104 	addi	r6,r6,580
  80d298:	080d1f00 	call	80d1f0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80d29c:	01002074 	movhi	r4,129
  80d2a0:	21012b04 	addi	r4,r4,1196
  80d2a4:	01402074 	movhi	r5,129
  80d2a8:	29412b04 	addi	r5,r5,1196
  80d2ac:	01802074 	movhi	r6,129
  80d2b0:	3182c504 	addi	r6,r6,2836
  80d2b4:	080d1f00 	call	80d1f0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80d2b8:	080f4780 	call	80f478 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80d2bc:	080f6680 	call	80f668 <alt_icache_flush_all>
}
  80d2c0:	e037883a 	mov	sp,fp
  80d2c4:	dfc00117 	ldw	ra,4(sp)
  80d2c8:	df000017 	ldw	fp,0(sp)
  80d2cc:	dec00204 	addi	sp,sp,8
  80d2d0:	f800283a 	ret

0080d2d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d2d4:	defffe04 	addi	sp,sp,-8
  80d2d8:	dfc00115 	stw	ra,4(sp)
  80d2dc:	df000015 	stw	fp,0(sp)
  80d2e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d2e4:	00802074 	movhi	r2,129
  80d2e8:	10860204 	addi	r2,r2,6152
  80d2ec:	10800017 	ldw	r2,0(r2)
  80d2f0:	10000526 	beq	r2,zero,80d308 <alt_get_errno+0x34>
  80d2f4:	00802074 	movhi	r2,129
  80d2f8:	10860204 	addi	r2,r2,6152
  80d2fc:	10800017 	ldw	r2,0(r2)
  80d300:	103ee83a 	callr	r2
  80d304:	00000206 	br	80d310 <alt_get_errno+0x3c>
  80d308:	00802074 	movhi	r2,129
  80d30c:	10895404 	addi	r2,r2,9552
}
  80d310:	e037883a 	mov	sp,fp
  80d314:	dfc00117 	ldw	ra,4(sp)
  80d318:	df000017 	ldw	fp,0(sp)
  80d31c:	dec00204 	addi	sp,sp,8
  80d320:	f800283a 	ret

0080d324 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80d324:	defff904 	addi	sp,sp,-28
  80d328:	dfc00615 	stw	ra,24(sp)
  80d32c:	df000515 	stw	fp,20(sp)
  80d330:	df000504 	addi	fp,sp,20
  80d334:	e13ffd15 	stw	r4,-12(fp)
  80d338:	e17ffe15 	stw	r5,-8(fp)
  80d33c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80d340:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d344:	e0bffd17 	ldw	r2,-12(fp)
  80d348:	10000616 	blt	r2,zero,80d364 <lseek+0x40>
  80d34c:	e0bffd17 	ldw	r2,-12(fp)
  80d350:	10c00324 	muli	r3,r2,12
  80d354:	00802074 	movhi	r2,129
  80d358:	1084fb04 	addi	r2,r2,5100
  80d35c:	1885883a 	add	r2,r3,r2
  80d360:	00000106 	br	80d368 <lseek+0x44>
  80d364:	0005883a 	mov	r2,zero
  80d368:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80d36c:	e0bffc17 	ldw	r2,-16(fp)
  80d370:	10001026 	beq	r2,zero,80d3b4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80d374:	e0bffc17 	ldw	r2,-16(fp)
  80d378:	10800017 	ldw	r2,0(r2)
  80d37c:	10800717 	ldw	r2,28(r2)
  80d380:	10000926 	beq	r2,zero,80d3a8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80d384:	e0bffc17 	ldw	r2,-16(fp)
  80d388:	10800017 	ldw	r2,0(r2)
  80d38c:	10800717 	ldw	r2,28(r2)
  80d390:	e13ffc17 	ldw	r4,-16(fp)
  80d394:	e17ffe17 	ldw	r5,-8(fp)
  80d398:	e1bfff17 	ldw	r6,-4(fp)
  80d39c:	103ee83a 	callr	r2
  80d3a0:	e0bffb15 	stw	r2,-20(fp)
  80d3a4:	00000506 	br	80d3bc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80d3a8:	00bfde84 	movi	r2,-134
  80d3ac:	e0bffb15 	stw	r2,-20(fp)
  80d3b0:	00000206 	br	80d3bc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80d3b4:	00bfebc4 	movi	r2,-81
  80d3b8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80d3bc:	e0bffb17 	ldw	r2,-20(fp)
  80d3c0:	1000070e 	bge	r2,zero,80d3e0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80d3c4:	080d2d40 	call	80d2d4 <alt_get_errno>
  80d3c8:	1007883a 	mov	r3,r2
  80d3cc:	e0bffb17 	ldw	r2,-20(fp)
  80d3d0:	0085c83a 	sub	r2,zero,r2
  80d3d4:	18800015 	stw	r2,0(r3)
    rc = -1;
  80d3d8:	00bfffc4 	movi	r2,-1
  80d3dc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80d3e0:	e0bffb17 	ldw	r2,-20(fp)
}
  80d3e4:	e037883a 	mov	sp,fp
  80d3e8:	dfc00117 	ldw	ra,4(sp)
  80d3ec:	df000017 	ldw	fp,0(sp)
  80d3f0:	dec00204 	addi	sp,sp,8
  80d3f4:	f800283a 	ret

0080d3f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80d3f8:	defffd04 	addi	sp,sp,-12
  80d3fc:	dfc00215 	stw	ra,8(sp)
  80d400:	df000115 	stw	fp,4(sp)
  80d404:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80d408:	0009883a 	mov	r4,zero
  80d40c:	080d88c0 	call	80d88c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80d410:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80d414:	080d8c00 	call	80d8c0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80d418:	01002074 	movhi	r4,129
  80d41c:	21020904 	addi	r4,r4,2084
  80d420:	01402074 	movhi	r5,129
  80d424:	29420904 	addi	r5,r5,2084
  80d428:	01802074 	movhi	r6,129
  80d42c:	31820904 	addi	r6,r6,2084
  80d430:	080f7580 	call	80f758 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80d434:	080f5b00 	call	80f5b0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80d438:	01002074 	movhi	r4,129
  80d43c:	213d8304 	addi	r4,r4,-2548
  80d440:	08101080 	call	810108 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80d444:	d1235f17 	ldw	r4,-29316(gp)
  80d448:	d0e36017 	ldw	r3,-29312(gp)
  80d44c:	d0a36117 	ldw	r2,-29308(gp)
  80d450:	180b883a 	mov	r5,r3
  80d454:	100d883a 	mov	r6,r2
  80d458:	080082c0 	call	80082c <main>
  80d45c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80d460:	01000044 	movi	r4,1
  80d464:	080cd500 	call	80cd50 <close>
  exit (result);
  80d468:	e13fff17 	ldw	r4,-4(fp)
  80d46c:	081011c0 	call	81011c <exit>

0080d470 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80d470:	defffe04 	addi	sp,sp,-8
  80d474:	df000115 	stw	fp,4(sp)
  80d478:	df000104 	addi	fp,sp,4
  80d47c:	e13fff15 	stw	r4,-4(fp)
}
  80d480:	e037883a 	mov	sp,fp
  80d484:	df000017 	ldw	fp,0(sp)
  80d488:	dec00104 	addi	sp,sp,4
  80d48c:	f800283a 	ret

0080d490 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80d490:	defffe04 	addi	sp,sp,-8
  80d494:	df000115 	stw	fp,4(sp)
  80d498:	df000104 	addi	fp,sp,4
  80d49c:	e13fff15 	stw	r4,-4(fp)
}
  80d4a0:	e037883a 	mov	sp,fp
  80d4a4:	df000017 	ldw	fp,0(sp)
  80d4a8:	dec00104 	addi	sp,sp,4
  80d4ac:	f800283a 	ret

0080d4b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d4b0:	defffe04 	addi	sp,sp,-8
  80d4b4:	dfc00115 	stw	ra,4(sp)
  80d4b8:	df000015 	stw	fp,0(sp)
  80d4bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d4c0:	00802074 	movhi	r2,129
  80d4c4:	10860204 	addi	r2,r2,6152
  80d4c8:	10800017 	ldw	r2,0(r2)
  80d4cc:	10000526 	beq	r2,zero,80d4e4 <alt_get_errno+0x34>
  80d4d0:	00802074 	movhi	r2,129
  80d4d4:	10860204 	addi	r2,r2,6152
  80d4d8:	10800017 	ldw	r2,0(r2)
  80d4dc:	103ee83a 	callr	r2
  80d4e0:	00000206 	br	80d4ec <alt_get_errno+0x3c>
  80d4e4:	00802074 	movhi	r2,129
  80d4e8:	10895404 	addi	r2,r2,9552
}
  80d4ec:	e037883a 	mov	sp,fp
  80d4f0:	dfc00117 	ldw	ra,4(sp)
  80d4f4:	df000017 	ldw	fp,0(sp)
  80d4f8:	dec00204 	addi	sp,sp,8
  80d4fc:	f800283a 	ret

0080d500 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80d500:	defff904 	addi	sp,sp,-28
  80d504:	dfc00615 	stw	ra,24(sp)
  80d508:	df000515 	stw	fp,20(sp)
  80d50c:	df000504 	addi	fp,sp,20
  80d510:	e13ffd15 	stw	r4,-12(fp)
  80d514:	e17ffe15 	stw	r5,-8(fp)
  80d518:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d51c:	e0bffd17 	ldw	r2,-12(fp)
  80d520:	10000616 	blt	r2,zero,80d53c <read+0x3c>
  80d524:	e0bffd17 	ldw	r2,-12(fp)
  80d528:	10c00324 	muli	r3,r2,12
  80d52c:	00802074 	movhi	r2,129
  80d530:	1084fb04 	addi	r2,r2,5100
  80d534:	1885883a 	add	r2,r3,r2
  80d538:	00000106 	br	80d540 <read+0x40>
  80d53c:	0005883a 	mov	r2,zero
  80d540:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80d544:	e0bffb17 	ldw	r2,-20(fp)
  80d548:	10002226 	beq	r2,zero,80d5d4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80d54c:	e0bffb17 	ldw	r2,-20(fp)
  80d550:	10800217 	ldw	r2,8(r2)
  80d554:	108000cc 	andi	r2,r2,3
  80d558:	10800060 	cmpeqi	r2,r2,1
  80d55c:	1000181e 	bne	r2,zero,80d5c0 <read+0xc0>
        (fd->dev->read))
  80d560:	e0bffb17 	ldw	r2,-20(fp)
  80d564:	10800017 	ldw	r2,0(r2)
  80d568:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80d56c:	10001426 	beq	r2,zero,80d5c0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80d570:	e0bffb17 	ldw	r2,-20(fp)
  80d574:	10800017 	ldw	r2,0(r2)
  80d578:	10800517 	ldw	r2,20(r2)
  80d57c:	e0ffff17 	ldw	r3,-4(fp)
  80d580:	e13ffb17 	ldw	r4,-20(fp)
  80d584:	e17ffe17 	ldw	r5,-8(fp)
  80d588:	180d883a 	mov	r6,r3
  80d58c:	103ee83a 	callr	r2
  80d590:	e0bffc15 	stw	r2,-16(fp)
  80d594:	e0bffc17 	ldw	r2,-16(fp)
  80d598:	1000070e 	bge	r2,zero,80d5b8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80d59c:	080d4b00 	call	80d4b0 <alt_get_errno>
  80d5a0:	1007883a 	mov	r3,r2
  80d5a4:	e0bffc17 	ldw	r2,-16(fp)
  80d5a8:	0085c83a 	sub	r2,zero,r2
  80d5ac:	18800015 	stw	r2,0(r3)
          return -1;
  80d5b0:	00bfffc4 	movi	r2,-1
  80d5b4:	00000c06 	br	80d5e8 <read+0xe8>
        }
        return rval;
  80d5b8:	e0bffc17 	ldw	r2,-16(fp)
  80d5bc:	00000a06 	br	80d5e8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80d5c0:	080d4b00 	call	80d4b0 <alt_get_errno>
  80d5c4:	1007883a 	mov	r3,r2
  80d5c8:	00800344 	movi	r2,13
  80d5cc:	18800015 	stw	r2,0(r3)
  80d5d0:	00000406 	br	80d5e4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80d5d4:	080d4b00 	call	80d4b0 <alt_get_errno>
  80d5d8:	1007883a 	mov	r3,r2
  80d5dc:	00801444 	movi	r2,81
  80d5e0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80d5e4:	00bfffc4 	movi	r2,-1
}
  80d5e8:	e037883a 	mov	sp,fp
  80d5ec:	dfc00117 	ldw	ra,4(sp)
  80d5f0:	df000017 	ldw	fp,0(sp)
  80d5f4:	dec00204 	addi	sp,sp,8
  80d5f8:	f800283a 	ret

0080d5fc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80d5fc:	defffe04 	addi	sp,sp,-8
  80d600:	df000115 	stw	fp,4(sp)
  80d604:	df000104 	addi	fp,sp,4
  80d608:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80d60c:	e0bfff17 	ldw	r2,-4(fp)
  80d610:	108000d0 	cmplti	r2,r2,3
  80d614:	10000d1e 	bne	r2,zero,80d64c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80d618:	00802074 	movhi	r2,129
  80d61c:	1084fb04 	addi	r2,r2,5100
  80d620:	e0ffff17 	ldw	r3,-4(fp)
  80d624:	18c00324 	muli	r3,r3,12
  80d628:	18c00204 	addi	r3,r3,8
  80d62c:	10c5883a 	add	r2,r2,r3
  80d630:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80d634:	00802074 	movhi	r2,129
  80d638:	1084fb04 	addi	r2,r2,5100
  80d63c:	e0ffff17 	ldw	r3,-4(fp)
  80d640:	18c00324 	muli	r3,r3,12
  80d644:	10c5883a 	add	r2,r2,r3
  80d648:	10000015 	stw	zero,0(r2)
  }
}
  80d64c:	e037883a 	mov	sp,fp
  80d650:	df000017 	ldw	fp,0(sp)
  80d654:	dec00104 	addi	sp,sp,4
  80d658:	f800283a 	ret

0080d65c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80d65c:	defff904 	addi	sp,sp,-28
  80d660:	df000615 	stw	fp,24(sp)
  80d664:	df000604 	addi	fp,sp,24
  80d668:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d66c:	0005303a 	rdctl	r2,status
  80d670:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d674:	e0fffc17 	ldw	r3,-16(fp)
  80d678:	00bfff84 	movi	r2,-2
  80d67c:	1884703a 	and	r2,r3,r2
  80d680:	1001703a 	wrctl	status,r2
  
  return context;
  80d684:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80d688:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80d68c:	d0a00d17 	ldw	r2,-32716(gp)
  80d690:	10c000c4 	addi	r3,r2,3
  80d694:	00bfff04 	movi	r2,-4
  80d698:	1884703a 	and	r2,r3,r2
  80d69c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80d6a0:	d0e00d17 	ldw	r3,-32716(gp)
  80d6a4:	e0bfff17 	ldw	r2,-4(fp)
  80d6a8:	1887883a 	add	r3,r3,r2
  80d6ac:	00804034 	movhi	r2,256
  80d6b0:	10800004 	addi	r2,r2,0
  80d6b4:	10c0062e 	bgeu	r2,r3,80d6d0 <sbrk+0x74>
  80d6b8:	e0bffa17 	ldw	r2,-24(fp)
  80d6bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d6c0:	e0bffd17 	ldw	r2,-12(fp)
  80d6c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80d6c8:	00bfffc4 	movi	r2,-1
  80d6cc:	00000b06 	br	80d6fc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80d6d0:	d0a00d17 	ldw	r2,-32716(gp)
  80d6d4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
  80d6d8:	d0e00d17 	ldw	r3,-32716(gp)
  80d6dc:	e0bfff17 	ldw	r2,-4(fp)
  80d6e0:	1885883a 	add	r2,r3,r2
  80d6e4:	d0a00d15 	stw	r2,-32716(gp)
  80d6e8:	e0bffa17 	ldw	r2,-24(fp)
  80d6ec:	e0bffe15 	stw	r2,-8(fp)
  80d6f0:	e0bffe17 	ldw	r2,-8(fp)
  80d6f4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80d6f8:	e0bffb17 	ldw	r2,-20(fp)
} 
  80d6fc:	e037883a 	mov	sp,fp
  80d700:	df000017 	ldw	fp,0(sp)
  80d704:	dec00104 	addi	sp,sp,4
  80d708:	f800283a 	ret

0080d70c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d70c:	defffe04 	addi	sp,sp,-8
  80d710:	dfc00115 	stw	ra,4(sp)
  80d714:	df000015 	stw	fp,0(sp)
  80d718:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d71c:	00802074 	movhi	r2,129
  80d720:	10860204 	addi	r2,r2,6152
  80d724:	10800017 	ldw	r2,0(r2)
  80d728:	10000526 	beq	r2,zero,80d740 <alt_get_errno+0x34>
  80d72c:	00802074 	movhi	r2,129
  80d730:	10860204 	addi	r2,r2,6152
  80d734:	10800017 	ldw	r2,0(r2)
  80d738:	103ee83a 	callr	r2
  80d73c:	00000206 	br	80d748 <alt_get_errno+0x3c>
  80d740:	00802074 	movhi	r2,129
  80d744:	10895404 	addi	r2,r2,9552
}
  80d748:	e037883a 	mov	sp,fp
  80d74c:	dfc00117 	ldw	ra,4(sp)
  80d750:	df000017 	ldw	fp,0(sp)
  80d754:	dec00204 	addi	sp,sp,8
  80d758:	f800283a 	ret

0080d75c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80d75c:	defff904 	addi	sp,sp,-28
  80d760:	dfc00615 	stw	ra,24(sp)
  80d764:	df000515 	stw	fp,20(sp)
  80d768:	df000504 	addi	fp,sp,20
  80d76c:	e13ffd15 	stw	r4,-12(fp)
  80d770:	e17ffe15 	stw	r5,-8(fp)
  80d774:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d778:	e0bffd17 	ldw	r2,-12(fp)
  80d77c:	10000616 	blt	r2,zero,80d798 <write+0x3c>
  80d780:	e0bffd17 	ldw	r2,-12(fp)
  80d784:	10c00324 	muli	r3,r2,12
  80d788:	00802074 	movhi	r2,129
  80d78c:	1084fb04 	addi	r2,r2,5100
  80d790:	1885883a 	add	r2,r3,r2
  80d794:	00000106 	br	80d79c <write+0x40>
  80d798:	0005883a 	mov	r2,zero
  80d79c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80d7a0:	e0bffb17 	ldw	r2,-20(fp)
  80d7a4:	10002126 	beq	r2,zero,80d82c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80d7a8:	e0bffb17 	ldw	r2,-20(fp)
  80d7ac:	10800217 	ldw	r2,8(r2)
  80d7b0:	108000cc 	andi	r2,r2,3
  80d7b4:	10001826 	beq	r2,zero,80d818 <write+0xbc>
  80d7b8:	e0bffb17 	ldw	r2,-20(fp)
  80d7bc:	10800017 	ldw	r2,0(r2)
  80d7c0:	10800617 	ldw	r2,24(r2)
  80d7c4:	10001426 	beq	r2,zero,80d818 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80d7c8:	e0bffb17 	ldw	r2,-20(fp)
  80d7cc:	10800017 	ldw	r2,0(r2)
  80d7d0:	10800617 	ldw	r2,24(r2)
  80d7d4:	e0ffff17 	ldw	r3,-4(fp)
  80d7d8:	e13ffb17 	ldw	r4,-20(fp)
  80d7dc:	e17ffe17 	ldw	r5,-8(fp)
  80d7e0:	180d883a 	mov	r6,r3
  80d7e4:	103ee83a 	callr	r2
  80d7e8:	e0bffc15 	stw	r2,-16(fp)
  80d7ec:	e0bffc17 	ldw	r2,-16(fp)
  80d7f0:	1000070e 	bge	r2,zero,80d810 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80d7f4:	080d70c0 	call	80d70c <alt_get_errno>
  80d7f8:	1007883a 	mov	r3,r2
  80d7fc:	e0bffc17 	ldw	r2,-16(fp)
  80d800:	0085c83a 	sub	r2,zero,r2
  80d804:	18800015 	stw	r2,0(r3)
        return -1;
  80d808:	00bfffc4 	movi	r2,-1
  80d80c:	00000c06 	br	80d840 <write+0xe4>
      }
      return rval;
  80d810:	e0bffc17 	ldw	r2,-16(fp)
  80d814:	00000a06 	br	80d840 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80d818:	080d70c0 	call	80d70c <alt_get_errno>
  80d81c:	1007883a 	mov	r3,r2
  80d820:	00800344 	movi	r2,13
  80d824:	18800015 	stw	r2,0(r3)
  80d828:	00000406 	br	80d83c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80d82c:	080d70c0 	call	80d70c <alt_get_errno>
  80d830:	1007883a 	mov	r3,r2
  80d834:	00801444 	movi	r2,81
  80d838:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80d83c:	00bfffc4 	movi	r2,-1
}
  80d840:	e037883a 	mov	sp,fp
  80d844:	dfc00117 	ldw	ra,4(sp)
  80d848:	df000017 	ldw	fp,0(sp)
  80d84c:	dec00204 	addi	sp,sp,8
  80d850:	f800283a 	ret

0080d854 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80d854:	defffd04 	addi	sp,sp,-12
  80d858:	dfc00215 	stw	ra,8(sp)
  80d85c:	df000115 	stw	fp,4(sp)
  80d860:	df000104 	addi	fp,sp,4
  80d864:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80d868:	e13fff17 	ldw	r4,-4(fp)
  80d86c:	01402074 	movhi	r5,129
  80d870:	2945ff04 	addi	r5,r5,6140
  80d874:	080f50c0 	call	80f50c <alt_dev_llist_insert>
}
  80d878:	e037883a 	mov	sp,fp
  80d87c:	dfc00117 	ldw	ra,4(sp)
  80d880:	df000017 	ldw	fp,0(sp)
  80d884:	dec00204 	addi	sp,sp,8
  80d888:	f800283a 	ret

0080d88c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80d88c:	defffd04 	addi	sp,sp,-12
  80d890:	dfc00215 	stw	ra,8(sp)
  80d894:	df000115 	stw	fp,4(sp)
  80d898:	df000104 	addi	fp,sp,4
  80d89c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  80d8a0:	080fc100 	call	80fc10 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80d8a4:	00800044 	movi	r2,1
  80d8a8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80d8ac:	e037883a 	mov	sp,fp
  80d8b0:	dfc00117 	ldw	ra,4(sp)
  80d8b4:	df000017 	ldw	fp,0(sp)
  80d8b8:	dec00204 	addi	sp,sp,8
  80d8bc:	f800283a 	ret

0080d8c0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80d8c0:	defffe04 	addi	sp,sp,-8
  80d8c4:	dfc00115 	stw	ra,4(sp)
  80d8c8:	df000015 	stw	fp,0(sp)
  80d8cc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80d8d0:	01002074 	movhi	r4,129
  80d8d4:	21055b04 	addi	r4,r4,5484
  80d8d8:	080d8540 	call	80d854 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
  80d8dc:	01002074 	movhi	r4,129
  80d8e0:	21057004 	addi	r4,r4,5568
  80d8e4:	080e8b40 	call	80e8b4 <altera_avalon_lcd_16207_init>
  80d8e8:	01002074 	movhi	r4,129
  80d8ec:	21056604 	addi	r4,r4,5528
  80d8f0:	080d8540 	call	80d854 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  80d8f4:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80d8f8:	01002074 	movhi	r4,129
  80d8fc:	2105b804 	addi	r4,r4,5856
  80d900:	000b883a 	mov	r5,zero
  80d904:	018000c4 	movi	r6,3
  80d908:	080eb5c0 	call	80eb5c <altera_avalon_uart_init>
  80d90c:	01002074 	movhi	r4,129
  80d910:	2105ae04 	addi	r4,r4,5816
  80d914:	080d8540 	call	80d854 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_I2C_CONFIG, audio_i2c_config);
  80d918:	01002074 	movhi	r4,129
  80d91c:	2105df04 	addi	r4,r4,6012
  80d920:	080d8540 	call	80d854 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
  80d924:	01002074 	movhi	r4,129
  80d928:	2105eb04 	addi	r4,r4,6060
  80d92c:	080d8540 	call	80d854 <alt_dev_reg>
}
  80d930:	e037883a 	mov	sp,fp
  80d934:	dfc00117 	ldw	ra,4(sp)
  80d938:	df000017 	ldw	fp,0(sp)
  80d93c:	dec00204 	addi	sp,sp,8
  80d940:	f800283a 	ret

0080d944 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80d944:	defffa04 	addi	sp,sp,-24
  80d948:	dfc00515 	stw	ra,20(sp)
  80d94c:	df000415 	stw	fp,16(sp)
  80d950:	df000404 	addi	fp,sp,16
  80d954:	e13ffd15 	stw	r4,-12(fp)
  80d958:	e17ffe15 	stw	r5,-8(fp)
  80d95c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80d960:	e0bffd17 	ldw	r2,-12(fp)
  80d964:	10800017 	ldw	r2,0(r2)
  80d968:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80d96c:	e0bffc17 	ldw	r2,-16(fp)
  80d970:	10c00a04 	addi	r3,r2,40
  80d974:	e0bffd17 	ldw	r2,-12(fp)
  80d978:	10800217 	ldw	r2,8(r2)
  80d97c:	1809883a 	mov	r4,r3
  80d980:	e17ffe17 	ldw	r5,-8(fp)
  80d984:	e1bfff17 	ldw	r6,-4(fp)
  80d988:	100f883a 	mov	r7,r2
  80d98c:	080da040 	call	80da04 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80d990:	e037883a 	mov	sp,fp
  80d994:	dfc00117 	ldw	ra,4(sp)
  80d998:	df000017 	ldw	fp,0(sp)
  80d99c:	dec00204 	addi	sp,sp,8
  80d9a0:	f800283a 	ret

0080d9a4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80d9a4:	defffa04 	addi	sp,sp,-24
  80d9a8:	dfc00515 	stw	ra,20(sp)
  80d9ac:	df000415 	stw	fp,16(sp)
  80d9b0:	df000404 	addi	fp,sp,16
  80d9b4:	e13ffd15 	stw	r4,-12(fp)
  80d9b8:	e17ffe15 	stw	r5,-8(fp)
  80d9bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80d9c0:	e0bffd17 	ldw	r2,-12(fp)
  80d9c4:	10800017 	ldw	r2,0(r2)
  80d9c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80d9cc:	e0bffc17 	ldw	r2,-16(fp)
  80d9d0:	10c00a04 	addi	r3,r2,40
  80d9d4:	e0bffd17 	ldw	r2,-12(fp)
  80d9d8:	10800217 	ldw	r2,8(r2)
  80d9dc:	1809883a 	mov	r4,r3
  80d9e0:	e17ffe17 	ldw	r5,-8(fp)
  80d9e4:	e1bfff17 	ldw	r6,-4(fp)
  80d9e8:	100f883a 	mov	r7,r2
  80d9ec:	080dae80 	call	80dae8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80d9f0:	e037883a 	mov	sp,fp
  80d9f4:	dfc00117 	ldw	ra,4(sp)
  80d9f8:	df000017 	ldw	fp,0(sp)
  80d9fc:	dec00204 	addi	sp,sp,8
  80da00:	f800283a 	ret

0080da04 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  80da04:	defff704 	addi	sp,sp,-36
  80da08:	df000815 	stw	fp,32(sp)
  80da0c:	df000804 	addi	fp,sp,32
  80da10:	e13ffc15 	stw	r4,-16(fp)
  80da14:	e17ffd15 	stw	r5,-12(fp)
  80da18:	e1bffe15 	stw	r6,-8(fp)
  80da1c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  80da20:	e0bffc17 	ldw	r2,-16(fp)
  80da24:	10800017 	ldw	r2,0(r2)
  80da28:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
  80da2c:	e0bffd17 	ldw	r2,-12(fp)
  80da30:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
  80da34:	e0bffe17 	ldw	r2,-8(fp)
  80da38:	e0fffd17 	ldw	r3,-12(fp)
  80da3c:	1885883a 	add	r2,r3,r2
  80da40:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
  80da44:	00001406 	br	80da98 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80da48:	e0bff917 	ldw	r2,-28(fp)
  80da4c:	10800037 	ldwio	r2,0(r2)
  80da50:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  80da54:	e0bffb17 	ldw	r2,-20(fp)
  80da58:	10a0000c 	andi	r2,r2,32768
  80da5c:	10000626 	beq	r2,zero,80da78 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80da60:	e0bff817 	ldw	r2,-32(fp)
  80da64:	10c00044 	addi	r3,r2,1
  80da68:	e0fff815 	stw	r3,-32(fp)
  80da6c:	e0fffb17 	ldw	r3,-20(fp)
  80da70:	10c00005 	stb	r3,0(r2)
  80da74:	00000806 	br	80da98 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
  80da78:	e0fff817 	ldw	r3,-32(fp)
  80da7c:	e0bffd17 	ldw	r2,-12(fp)
  80da80:	18800126 	beq	r3,r2,80da88 <altera_avalon_jtag_uart_read+0x84>
      break;
  80da84:	00000706 	br	80daa4 <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
  80da88:	e0bfff17 	ldw	r2,-4(fp)
  80da8c:	1090000c 	andi	r2,r2,16384
  80da90:	10000126 	beq	r2,zero,80da98 <altera_avalon_jtag_uart_read+0x94>
      break;   
  80da94:	00000306 	br	80daa4 <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  80da98:	e0fff817 	ldw	r3,-32(fp)
  80da9c:	e0bffa17 	ldw	r2,-24(fp)
  80daa0:	18bfe936 	bltu	r3,r2,80da48 <__alt_data_end+0xff80da48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
  80daa4:	e0fff817 	ldw	r3,-32(fp)
  80daa8:	e0bffd17 	ldw	r2,-12(fp)
  80daac:	18800426 	beq	r3,r2,80dac0 <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
  80dab0:	e0fff817 	ldw	r3,-32(fp)
  80dab4:	e0bffd17 	ldw	r2,-12(fp)
  80dab8:	1885c83a 	sub	r2,r3,r2
  80dabc:	00000606 	br	80dad8 <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
  80dac0:	e0bfff17 	ldw	r2,-4(fp)
  80dac4:	1090000c 	andi	r2,r2,16384
  80dac8:	10000226 	beq	r2,zero,80dad4 <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
  80dacc:	00bffd44 	movi	r2,-11
  80dad0:	00000106 	br	80dad8 <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
  80dad4:	00bffec4 	movi	r2,-5
}
  80dad8:	e037883a 	mov	sp,fp
  80dadc:	df000017 	ldw	fp,0(sp)
  80dae0:	dec00104 	addi	sp,sp,4
  80dae4:	f800283a 	ret

0080dae8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80dae8:	defff904 	addi	sp,sp,-28
  80daec:	df000615 	stw	fp,24(sp)
  80daf0:	df000604 	addi	fp,sp,24
  80daf4:	e13ffc15 	stw	r4,-16(fp)
  80daf8:	e17ffd15 	stw	r5,-12(fp)
  80dafc:	e1bffe15 	stw	r6,-8(fp)
  80db00:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  80db04:	e0bffc17 	ldw	r2,-16(fp)
  80db08:	10800017 	ldw	r2,0(r2)
  80db0c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
  80db10:	e0bffe17 	ldw	r2,-8(fp)
  80db14:	e0fffd17 	ldw	r3,-12(fp)
  80db18:	1885883a 	add	r2,r3,r2
  80db1c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
  80db20:	00000e06 	br	80db5c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  80db24:	e0bffa17 	ldw	r2,-24(fp)
  80db28:	10800104 	addi	r2,r2,4
  80db2c:	10800037 	ldwio	r2,0(r2)
  80db30:	10bfffec 	andhi	r2,r2,65535
  80db34:	10000926 	beq	r2,zero,80db5c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  80db38:	e0fffa17 	ldw	r3,-24(fp)
  80db3c:	e0bffd17 	ldw	r2,-12(fp)
  80db40:	11000044 	addi	r4,r2,1
  80db44:	e13ffd15 	stw	r4,-12(fp)
  80db48:	10800003 	ldbu	r2,0(r2)
  80db4c:	10803fcc 	andi	r2,r2,255
  80db50:	1080201c 	xori	r2,r2,128
  80db54:	10bfe004 	addi	r2,r2,-128
  80db58:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  80db5c:	e0fffd17 	ldw	r3,-12(fp)
  80db60:	e0bffb17 	ldw	r2,-20(fp)
  80db64:	18bfef36 	bltu	r3,r2,80db24 <__alt_data_end+0xff80db24>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
  80db68:	e0bffe17 	ldw	r2,-8(fp)
}
  80db6c:	e037883a 	mov	sp,fp
  80db70:	df000017 	ldw	fp,0(sp)
  80db74:	dec00104 	addi	sp,sp,4
  80db78:	f800283a 	ret

0080db7c <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80db7c:	defffa04 	addi	sp,sp,-24
  80db80:	dfc00515 	stw	ra,20(sp)
  80db84:	df000415 	stw	fp,16(sp)
  80db88:	df000404 	addi	fp,sp,16
  80db8c:	e13ffe15 	stw	r4,-8(fp)
  80db90:	2805883a 	mov	r2,r5
  80db94:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80db98:	e0bffe17 	ldw	r2,-8(fp)
  80db9c:	10800017 	ldw	r2,0(r2)
  80dba0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80dba4:	008003f4 	movhi	r2,15
  80dba8:	10909004 	addi	r2,r2,16960
  80dbac:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80dbb0:	e0bffe17 	ldw	r2,-8(fp)
  80dbb4:	10800803 	ldbu	r2,32(r2)
  80dbb8:	10803fcc 	andi	r2,r2,255
  80dbbc:	1080201c 	xori	r2,r2,128
  80dbc0:	10bfe004 	addi	r2,r2,-128
  80dbc4:	10000126 	beq	r2,zero,80dbcc <lcd_write_command+0x50>
    return;
  80dbc8:	00001406 	br	80dc1c <lcd_write_command+0xa0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80dbcc:	00000906 	br	80dbf4 <lcd_write_command+0x78>
    if (--i == 0)
  80dbd0:	e0bffc17 	ldw	r2,-16(fp)
  80dbd4:	10bfffc4 	addi	r2,r2,-1
  80dbd8:	e0bffc15 	stw	r2,-16(fp)
  80dbdc:	e0bffc17 	ldw	r2,-16(fp)
  80dbe0:	1000041e 	bne	r2,zero,80dbf4 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  80dbe4:	e0bffe17 	ldw	r2,-8(fp)
  80dbe8:	00c00044 	movi	r3,1
  80dbec:	10c00805 	stb	r3,32(r2)
      return;
  80dbf0:	00000a06 	br	80dc1c <lcd_write_command+0xa0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80dbf4:	e0bffd17 	ldw	r2,-12(fp)
  80dbf8:	10800104 	addi	r2,r2,4
  80dbfc:	10800037 	ldwio	r2,0(r2)
  80dc00:	1080200c 	andi	r2,r2,128
  80dc04:	103ff21e 	bne	r2,zero,80dbd0 <__alt_data_end+0xff80dbd0>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80dc08:	01001904 	movi	r4,100
  80dc0c:	080fbe00 	call	80fbe0 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80dc10:	e0bffd17 	ldw	r2,-12(fp)
  80dc14:	e0ffff03 	ldbu	r3,-4(fp)
  80dc18:	10c00035 	stwio	r3,0(r2)
}
  80dc1c:	e037883a 	mov	sp,fp
  80dc20:	dfc00117 	ldw	ra,4(sp)
  80dc24:	df000017 	ldw	fp,0(sp)
  80dc28:	dec00204 	addi	sp,sp,8
  80dc2c:	f800283a 	ret

0080dc30 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80dc30:	defffa04 	addi	sp,sp,-24
  80dc34:	dfc00515 	stw	ra,20(sp)
  80dc38:	df000415 	stw	fp,16(sp)
  80dc3c:	df000404 	addi	fp,sp,16
  80dc40:	e13ffe15 	stw	r4,-8(fp)
  80dc44:	2805883a 	mov	r2,r5
  80dc48:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80dc4c:	e0bffe17 	ldw	r2,-8(fp)
  80dc50:	10800017 	ldw	r2,0(r2)
  80dc54:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80dc58:	008003f4 	movhi	r2,15
  80dc5c:	10909004 	addi	r2,r2,16960
  80dc60:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80dc64:	e0bffe17 	ldw	r2,-8(fp)
  80dc68:	10800803 	ldbu	r2,32(r2)
  80dc6c:	10803fcc 	andi	r2,r2,255
  80dc70:	1080201c 	xori	r2,r2,128
  80dc74:	10bfe004 	addi	r2,r2,-128
  80dc78:	10000126 	beq	r2,zero,80dc80 <lcd_write_data+0x50>
    return;
  80dc7c:	00001c06 	br	80dcf0 <lcd_write_data+0xc0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80dc80:	00000906 	br	80dca8 <lcd_write_data+0x78>
    if (--i == 0)
  80dc84:	e0bffc17 	ldw	r2,-16(fp)
  80dc88:	10bfffc4 	addi	r2,r2,-1
  80dc8c:	e0bffc15 	stw	r2,-16(fp)
  80dc90:	e0bffc17 	ldw	r2,-16(fp)
  80dc94:	1000041e 	bne	r2,zero,80dca8 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  80dc98:	e0bffe17 	ldw	r2,-8(fp)
  80dc9c:	00c00044 	movi	r3,1
  80dca0:	10c00805 	stb	r3,32(r2)
      return;
  80dca4:	00001206 	br	80dcf0 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80dca8:	e0bffd17 	ldw	r2,-12(fp)
  80dcac:	10800104 	addi	r2,r2,4
  80dcb0:	10800037 	ldwio	r2,0(r2)
  80dcb4:	1080200c 	andi	r2,r2,128
  80dcb8:	103ff21e 	bne	r2,zero,80dc84 <__alt_data_end+0xff80dc84>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80dcbc:	01001904 	movi	r4,100
  80dcc0:	080fbe00 	call	80fbe0 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80dcc4:	e0bffd17 	ldw	r2,-12(fp)
  80dcc8:	10800204 	addi	r2,r2,8
  80dccc:	1007883a 	mov	r3,r2
  80dcd0:	e0bfff03 	ldbu	r2,-4(fp)
  80dcd4:	18800035 	stwio	r2,0(r3)

  sp->address++;
  80dcd8:	e0bffe17 	ldw	r2,-8(fp)
  80dcdc:	108008c3 	ldbu	r2,35(r2)
  80dce0:	10800044 	addi	r2,r2,1
  80dce4:	1007883a 	mov	r3,r2
  80dce8:	e0bffe17 	ldw	r2,-8(fp)
  80dcec:	10c008c5 	stb	r3,35(r2)
}
  80dcf0:	e037883a 	mov	sp,fp
  80dcf4:	dfc00117 	ldw	ra,4(sp)
  80dcf8:	df000017 	ldw	fp,0(sp)
  80dcfc:	dec00204 	addi	sp,sp,8
  80dd00:	f800283a 	ret

0080dd04 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80dd04:	defffc04 	addi	sp,sp,-16
  80dd08:	dfc00315 	stw	ra,12(sp)
  80dd0c:	df000215 	stw	fp,8(sp)
  80dd10:	df000204 	addi	fp,sp,8
  80dd14:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80dd18:	e13fff17 	ldw	r4,-4(fp)
  80dd1c:	01400044 	movi	r5,1
  80dd20:	080db7c0 	call	80db7c <lcd_write_command>

  sp->x = 0;
  80dd24:	e0bfff17 	ldw	r2,-4(fp)
  80dd28:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80dd2c:	e0bfff17 	ldw	r2,-4(fp)
  80dd30:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80dd34:	e0bfff17 	ldw	r2,-4(fp)
  80dd38:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80dd3c:	e03ffe15 	stw	zero,-8(fp)
  80dd40:	00001b06 	br	80ddb0 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80dd44:	e0bffe17 	ldw	r2,-8(fp)
  80dd48:	108018e4 	muli	r2,r2,99
  80dd4c:	10801004 	addi	r2,r2,64
  80dd50:	e0ffff17 	ldw	r3,-4(fp)
  80dd54:	1885883a 	add	r2,r3,r2
  80dd58:	1009883a 	mov	r4,r2
  80dd5c:	01400804 	movi	r5,32
  80dd60:	01801444 	movi	r6,81
  80dd64:	08063f40 	call	8063f4 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80dd68:	e0bffe17 	ldw	r2,-8(fp)
  80dd6c:	108018e4 	muli	r2,r2,99
  80dd70:	10800c04 	addi	r2,r2,48
  80dd74:	e0ffff17 	ldw	r3,-4(fp)
  80dd78:	1885883a 	add	r2,r3,r2
  80dd7c:	1009883a 	mov	r4,r2
  80dd80:	01400804 	movi	r5,32
  80dd84:	01800404 	movi	r6,16
  80dd88:	08063f40 	call	8063f4 <memset>
    sp->line[y].width = 0;
  80dd8c:	e0ffff17 	ldw	r3,-4(fp)
  80dd90:	e0bffe17 	ldw	r2,-8(fp)
  80dd94:	108018e4 	muli	r2,r2,99
  80dd98:	10802404 	addi	r2,r2,144
  80dd9c:	1885883a 	add	r2,r3,r2
  80dda0:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80dda4:	e0bffe17 	ldw	r2,-8(fp)
  80dda8:	10800044 	addi	r2,r2,1
  80ddac:	e0bffe15 	stw	r2,-8(fp)
  80ddb0:	e0bffe17 	ldw	r2,-8(fp)
  80ddb4:	10800090 	cmplti	r2,r2,2
  80ddb8:	103fe21e 	bne	r2,zero,80dd44 <__alt_data_end+0xff80dd44>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80ddbc:	e037883a 	mov	sp,fp
  80ddc0:	dfc00117 	ldw	ra,4(sp)
  80ddc4:	df000017 	ldw	fp,0(sp)
  80ddc8:	dec00204 	addi	sp,sp,8
  80ddcc:	f800283a 	ret

0080ddd0 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80ddd0:	defff704 	addi	sp,sp,-36
  80ddd4:	dfc00815 	stw	ra,32(sp)
  80ddd8:	df000715 	stw	fp,28(sp)
  80dddc:	df000704 	addi	fp,sp,28
  80dde0:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80dde4:	e0bfff17 	ldw	r2,-4(fp)
  80dde8:	10800943 	ldbu	r2,37(r2)
  80ddec:	10803fcc 	andi	r2,r2,255
  80ddf0:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80ddf4:	e03ff915 	stw	zero,-28(fp)
  80ddf8:	00006706 	br	80df98 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80ddfc:	e0ffff17 	ldw	r3,-4(fp)
  80de00:	e0bff917 	ldw	r2,-28(fp)
  80de04:	108018e4 	muli	r2,r2,99
  80de08:	10802404 	addi	r2,r2,144
  80de0c:	1885883a 	add	r2,r3,r2
  80de10:	10800043 	ldbu	r2,1(r2)
  80de14:	10803fcc 	andi	r2,r2,255
  80de18:	1080201c 	xori	r2,r2,128
  80de1c:	10bfe004 	addi	r2,r2,-128
  80de20:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80de24:	e0ffff17 	ldw	r3,-4(fp)
  80de28:	e0bff917 	ldw	r2,-28(fp)
  80de2c:	108018e4 	muli	r2,r2,99
  80de30:	10802404 	addi	r2,r2,144
  80de34:	1885883a 	add	r2,r3,r2
  80de38:	10800083 	ldbu	r2,2(r2)
  80de3c:	10c03fcc 	andi	r3,r2,255
  80de40:	e0bffc17 	ldw	r2,-16(fp)
  80de44:	1885383a 	mul	r2,r3,r2
  80de48:	1005d23a 	srai	r2,r2,8
  80de4c:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  80de50:	e0fffb17 	ldw	r3,-20(fp)
  80de54:	e0bffd17 	ldw	r2,-12(fp)
  80de58:	18800116 	blt	r3,r2,80de60 <lcd_repaint_screen+0x90>
      offset = 0;
  80de5c:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80de60:	e03ffa15 	stw	zero,-24(fp)
  80de64:	00004606 	br	80df80 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80de68:	e0fffa17 	ldw	r3,-24(fp)
  80de6c:	e0bffb17 	ldw	r2,-20(fp)
  80de70:	1885883a 	add	r2,r3,r2
  80de74:	1009883a 	mov	r4,r2
  80de78:	e17ffd17 	ldw	r5,-12(fp)
  80de7c:	080a6940 	call	80a694 <__modsi3>
  80de80:	1009883a 	mov	r4,r2
  80de84:	e0ffff17 	ldw	r3,-4(fp)
  80de88:	e0bff917 	ldw	r2,-28(fp)
  80de8c:	108018e4 	muli	r2,r2,99
  80de90:	1885883a 	add	r2,r3,r2
  80de94:	1105883a 	add	r2,r2,r4
  80de98:	10801004 	addi	r2,r2,64
  80de9c:	10800003 	ldbu	r2,0(r2)
  80dea0:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80dea4:	e0ffff17 	ldw	r3,-4(fp)
  80dea8:	e0bff917 	ldw	r2,-28(fp)
  80deac:	108018e4 	muli	r2,r2,99
  80deb0:	1887883a 	add	r3,r3,r2
  80deb4:	e0bffa17 	ldw	r2,-24(fp)
  80deb8:	1885883a 	add	r2,r3,r2
  80debc:	10800c04 	addi	r2,r2,48
  80dec0:	10800003 	ldbu	r2,0(r2)
  80dec4:	10c03fcc 	andi	r3,r2,255
  80dec8:	18c0201c 	xori	r3,r3,128
  80decc:	18ffe004 	addi	r3,r3,-128
  80ded0:	e0bffe07 	ldb	r2,-8(fp)
  80ded4:	18802726 	beq	r3,r2,80df74 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80ded8:	e0fff917 	ldw	r3,-28(fp)
  80dedc:	d0a00e04 	addi	r2,gp,-32712
  80dee0:	1885883a 	add	r2,r3,r2
  80dee4:	10800003 	ldbu	r2,0(r2)
  80dee8:	1007883a 	mov	r3,r2
  80deec:	e0bffa17 	ldw	r2,-24(fp)
  80def0:	1885883a 	add	r2,r3,r2
  80def4:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  80def8:	e0fffe43 	ldbu	r3,-7(fp)
  80defc:	e0bfff17 	ldw	r2,-4(fp)
  80df00:	108008c3 	ldbu	r2,35(r2)
  80df04:	10803fcc 	andi	r2,r2,255
  80df08:	1080201c 	xori	r2,r2,128
  80df0c:	10bfe004 	addi	r2,r2,-128
  80df10:	18800a26 	beq	r3,r2,80df3c <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80df14:	e0fffe43 	ldbu	r3,-7(fp)
  80df18:	00bfe004 	movi	r2,-128
  80df1c:	1884b03a 	or	r2,r3,r2
  80df20:	10803fcc 	andi	r2,r2,255
  80df24:	e13fff17 	ldw	r4,-4(fp)
  80df28:	100b883a 	mov	r5,r2
  80df2c:	080db7c0 	call	80db7c <lcd_write_command>
          sp->address = address;
  80df30:	e0fffe43 	ldbu	r3,-7(fp)
  80df34:	e0bfff17 	ldw	r2,-4(fp)
  80df38:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80df3c:	e0bffe03 	ldbu	r2,-8(fp)
  80df40:	10803fcc 	andi	r2,r2,255
  80df44:	e13fff17 	ldw	r4,-4(fp)
  80df48:	100b883a 	mov	r5,r2
  80df4c:	080dc300 	call	80dc30 <lcd_write_data>
        sp->line[y].visible[x] = c;
  80df50:	e0ffff17 	ldw	r3,-4(fp)
  80df54:	e0bff917 	ldw	r2,-28(fp)
  80df58:	108018e4 	muli	r2,r2,99
  80df5c:	1887883a 	add	r3,r3,r2
  80df60:	e0bffa17 	ldw	r2,-24(fp)
  80df64:	1885883a 	add	r2,r3,r2
  80df68:	10800c04 	addi	r2,r2,48
  80df6c:	e0fffe03 	ldbu	r3,-8(fp)
  80df70:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80df74:	e0bffa17 	ldw	r2,-24(fp)
  80df78:	10800044 	addi	r2,r2,1
  80df7c:	e0bffa15 	stw	r2,-24(fp)
  80df80:	e0bffa17 	ldw	r2,-24(fp)
  80df84:	10800410 	cmplti	r2,r2,16
  80df88:	103fb71e 	bne	r2,zero,80de68 <__alt_data_end+0xff80de68>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80df8c:	e0bff917 	ldw	r2,-28(fp)
  80df90:	10800044 	addi	r2,r2,1
  80df94:	e0bff915 	stw	r2,-28(fp)
  80df98:	e0bff917 	ldw	r2,-28(fp)
  80df9c:	10800090 	cmplti	r2,r2,2
  80dfa0:	103f961e 	bne	r2,zero,80ddfc <__alt_data_end+0xff80ddfc>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80dfa4:	e037883a 	mov	sp,fp
  80dfa8:	dfc00117 	ldw	ra,4(sp)
  80dfac:	df000017 	ldw	fp,0(sp)
  80dfb0:	dec00204 	addi	sp,sp,8
  80dfb4:	f800283a 	ret

0080dfb8 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80dfb8:	defffc04 	addi	sp,sp,-16
  80dfbc:	dfc00315 	stw	ra,12(sp)
  80dfc0:	df000215 	stw	fp,8(sp)
  80dfc4:	df000204 	addi	fp,sp,8
  80dfc8:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80dfcc:	e03ffe15 	stw	zero,-8(fp)
  80dfd0:	00001d06 	br	80e048 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80dfd4:	e0bffe17 	ldw	r2,-8(fp)
  80dfd8:	00800f16 	blt	zero,r2,80e018 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80dfdc:	e0bffe17 	ldw	r2,-8(fp)
  80dfe0:	108018e4 	muli	r2,r2,99
  80dfe4:	10801004 	addi	r2,r2,64
  80dfe8:	e0ffff17 	ldw	r3,-4(fp)
  80dfec:	1889883a 	add	r4,r3,r2
  80dff0:	e0bffe17 	ldw	r2,-8(fp)
  80dff4:	10800044 	addi	r2,r2,1
  80dff8:	108018e4 	muli	r2,r2,99
  80dffc:	10801004 	addi	r2,r2,64
  80e000:	e0ffff17 	ldw	r3,-4(fp)
  80e004:	1885883a 	add	r2,r3,r2
  80e008:	100b883a 	mov	r5,r2
  80e00c:	01801404 	movi	r6,80
  80e010:	08061600 	call	806160 <memcpy>
  80e014:	00000906 	br	80e03c <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80e018:	e0bffe17 	ldw	r2,-8(fp)
  80e01c:	108018e4 	muli	r2,r2,99
  80e020:	10801004 	addi	r2,r2,64
  80e024:	e0ffff17 	ldw	r3,-4(fp)
  80e028:	1885883a 	add	r2,r3,r2
  80e02c:	1009883a 	mov	r4,r2
  80e030:	01400804 	movi	r5,32
  80e034:	01801404 	movi	r6,80
  80e038:	08063f40 	call	8063f4 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80e03c:	e0bffe17 	ldw	r2,-8(fp)
  80e040:	10800044 	addi	r2,r2,1
  80e044:	e0bffe15 	stw	r2,-8(fp)
  80e048:	e0bffe17 	ldw	r2,-8(fp)
  80e04c:	10800090 	cmplti	r2,r2,2
  80e050:	103fe01e 	bne	r2,zero,80dfd4 <__alt_data_end+0xff80dfd4>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80e054:	e0bfff17 	ldw	r2,-4(fp)
  80e058:	10800883 	ldbu	r2,34(r2)
  80e05c:	10bfffc4 	addi	r2,r2,-1
  80e060:	1007883a 	mov	r3,r2
  80e064:	e0bfff17 	ldw	r2,-4(fp)
  80e068:	10c00885 	stb	r3,34(r2)
}
  80e06c:	e037883a 	mov	sp,fp
  80e070:	dfc00117 	ldw	ra,4(sp)
  80e074:	df000017 	ldw	fp,0(sp)
  80e078:	dec00204 	addi	sp,sp,8
  80e07c:	f800283a 	ret

0080e080 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80e080:	defff904 	addi	sp,sp,-28
  80e084:	dfc00615 	stw	ra,24(sp)
  80e088:	df000515 	stw	fp,20(sp)
  80e08c:	df000504 	addi	fp,sp,20
  80e090:	e13ffe15 	stw	r4,-8(fp)
  80e094:	2805883a 	mov	r2,r5
  80e098:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  80e09c:	e03ffb15 	stw	zero,-20(fp)
  80e0a0:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  80e0a4:	e0bffe17 	ldw	r2,-8(fp)
  80e0a8:	10800a03 	ldbu	r2,40(r2)
  80e0ac:	10803fcc 	andi	r2,r2,255
  80e0b0:	1080201c 	xori	r2,r2,128
  80e0b4:	10bfe004 	addi	r2,r2,-128
  80e0b8:	108016d8 	cmpnei	r2,r2,91
  80e0bc:	1000441e 	bne	r2,zero,80e1d0 <lcd_handle_escape+0x150>
  {
    char * ptr = sp->escape+1;
  80e0c0:	e0bffe17 	ldw	r2,-8(fp)
  80e0c4:	10800a44 	addi	r2,r2,41
  80e0c8:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  80e0cc:	00000c06 	br	80e100 <lcd_handle_escape+0x80>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80e0d0:	e0bffb17 	ldw	r2,-20(fp)
  80e0d4:	10c002a4 	muli	r3,r2,10
  80e0d8:	e0bffd17 	ldw	r2,-12(fp)
  80e0dc:	11000044 	addi	r4,r2,1
  80e0e0:	e13ffd15 	stw	r4,-12(fp)
  80e0e4:	10800003 	ldbu	r2,0(r2)
  80e0e8:	10803fcc 	andi	r2,r2,255
  80e0ec:	1080201c 	xori	r2,r2,128
  80e0f0:	10bfe004 	addi	r2,r2,-128
  80e0f4:	10bff404 	addi	r2,r2,-48
  80e0f8:	1885883a 	add	r2,r3,r2
  80e0fc:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80e100:	00802074 	movhi	r2,129
  80e104:	10860804 	addi	r2,r2,6176
  80e108:	10c00017 	ldw	r3,0(r2)
  80e10c:	e0bffd17 	ldw	r2,-12(fp)
  80e110:	10800003 	ldbu	r2,0(r2)
  80e114:	10803fcc 	andi	r2,r2,255
  80e118:	1080201c 	xori	r2,r2,128
  80e11c:	10bfe004 	addi	r2,r2,-128
  80e120:	10800044 	addi	r2,r2,1
  80e124:	1885883a 	add	r2,r3,r2
  80e128:	10800003 	ldbu	r2,0(r2)
  80e12c:	10803fcc 	andi	r2,r2,255
  80e130:	1080010c 	andi	r2,r2,4
  80e134:	103fe61e 	bne	r2,zero,80e0d0 <__alt_data_end+0xff80e0d0>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80e138:	e0bffd17 	ldw	r2,-12(fp)
  80e13c:	10800003 	ldbu	r2,0(r2)
  80e140:	10803fcc 	andi	r2,r2,255
  80e144:	1080201c 	xori	r2,r2,128
  80e148:	10bfe004 	addi	r2,r2,-128
  80e14c:	10800ed8 	cmpnei	r2,r2,59
  80e150:	10001e1e 	bne	r2,zero,80e1cc <lcd_handle_escape+0x14c>
    {
      ptr++;
  80e154:	e0bffd17 	ldw	r2,-12(fp)
  80e158:	10800044 	addi	r2,r2,1
  80e15c:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  80e160:	00000c06 	br	80e194 <lcd_handle_escape+0x114>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80e164:	e0bffc17 	ldw	r2,-16(fp)
  80e168:	10c002a4 	muli	r3,r2,10
  80e16c:	e0bffd17 	ldw	r2,-12(fp)
  80e170:	11000044 	addi	r4,r2,1
  80e174:	e13ffd15 	stw	r4,-12(fp)
  80e178:	10800003 	ldbu	r2,0(r2)
  80e17c:	10803fcc 	andi	r2,r2,255
  80e180:	1080201c 	xori	r2,r2,128
  80e184:	10bfe004 	addi	r2,r2,-128
  80e188:	10bff404 	addi	r2,r2,-48
  80e18c:	1885883a 	add	r2,r3,r2
  80e190:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80e194:	00802074 	movhi	r2,129
  80e198:	10860804 	addi	r2,r2,6176
  80e19c:	10c00017 	ldw	r3,0(r2)
  80e1a0:	e0bffd17 	ldw	r2,-12(fp)
  80e1a4:	10800003 	ldbu	r2,0(r2)
  80e1a8:	10803fcc 	andi	r2,r2,255
  80e1ac:	1080201c 	xori	r2,r2,128
  80e1b0:	10bfe004 	addi	r2,r2,-128
  80e1b4:	10800044 	addi	r2,r2,1
  80e1b8:	1885883a 	add	r2,r3,r2
  80e1bc:	10800003 	ldbu	r2,0(r2)
  80e1c0:	10803fcc 	andi	r2,r2,255
  80e1c4:	1080010c 	andi	r2,r2,4
  80e1c8:	103fe61e 	bne	r2,zero,80e164 <__alt_data_end+0xff80e164>
  80e1cc:	00000206 	br	80e1d8 <lcd_handle_escape+0x158>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80e1d0:	00bfffc4 	movi	r2,-1
  80e1d4:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  80e1d8:	e0bfff07 	ldb	r2,-4(fp)
  80e1dc:	10c012a0 	cmpeqi	r3,r2,74
  80e1e0:	1800281e 	bne	r3,zero,80e284 <lcd_handle_escape+0x204>
  80e1e4:	10c012c8 	cmpgei	r3,r2,75
  80e1e8:	1800031e 	bne	r3,zero,80e1f8 <lcd_handle_escape+0x178>
  80e1ec:	10801220 	cmpeqi	r2,r2,72
  80e1f0:	1000051e 	bne	r2,zero,80e208 <lcd_handle_escape+0x188>
  80e1f4:	00004506 	br	80e30c <lcd_handle_escape+0x28c>
  80e1f8:	10c012e0 	cmpeqi	r3,r2,75
  80e1fc:	1800281e 	bne	r3,zero,80e2a0 <lcd_handle_escape+0x220>
  80e200:	108019a0 	cmpeqi	r2,r2,102
  80e204:	10004126 	beq	r2,zero,80e30c <lcd_handle_escape+0x28c>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80e208:	e0bffc17 	ldw	r2,-16(fp)
  80e20c:	0080050e 	bge	zero,r2,80e224 <lcd_handle_escape+0x1a4>
      sp->x = parm2 - 1;
  80e210:	e0bffc17 	ldw	r2,-16(fp)
  80e214:	10bfffc4 	addi	r2,r2,-1
  80e218:	1007883a 	mov	r3,r2
  80e21c:	e0bffe17 	ldw	r2,-8(fp)
  80e220:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80e224:	e0bffb17 	ldw	r2,-20(fp)
  80e228:	0080150e 	bge	zero,r2,80e280 <lcd_handle_escape+0x200>
    {
      sp->y = parm1 - 1;
  80e22c:	e0bffb17 	ldw	r2,-20(fp)
  80e230:	10bfffc4 	addi	r2,r2,-1
  80e234:	1007883a 	mov	r3,r2
  80e238:	e0bffe17 	ldw	r2,-8(fp)
  80e23c:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80e240:	e0bffe17 	ldw	r2,-8(fp)
  80e244:	10800883 	ldbu	r2,34(r2)
  80e248:	10803fcc 	andi	r2,r2,255
  80e24c:	10800170 	cmpltui	r2,r2,5
  80e250:	1000031e 	bne	r2,zero,80e260 <lcd_handle_escape+0x1e0>
        sp->y = ALT_LCD_HEIGHT * 2;
  80e254:	e0bffe17 	ldw	r2,-8(fp)
  80e258:	00c00104 	movi	r3,4
  80e25c:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  80e260:	00000206 	br	80e26c <lcd_handle_escape+0x1ec>
        lcd_scroll_up(sp);
  80e264:	e13ffe17 	ldw	r4,-8(fp)
  80e268:	080dfb80 	call	80dfb8 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80e26c:	e0bffe17 	ldw	r2,-8(fp)
  80e270:	10800883 	ldbu	r2,34(r2)
  80e274:	10803fcc 	andi	r2,r2,255
  80e278:	108000e8 	cmpgeui	r2,r2,3
  80e27c:	103ff91e 	bne	r2,zero,80e264 <__alt_data_end+0xff80e264>
        lcd_scroll_up(sp);
    }
    break;
  80e280:	00002206 	br	80e30c <lcd_handle_escape+0x28c>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80e284:	e0bffb17 	ldw	r2,-20(fp)
  80e288:	10800098 	cmpnei	r2,r2,2
  80e28c:	1000031e 	bne	r2,zero,80e29c <lcd_handle_escape+0x21c>
      lcd_clear_screen(sp);
  80e290:	e13ffe17 	ldw	r4,-8(fp)
  80e294:	080dd040 	call	80dd04 <lcd_clear_screen>
    break;
  80e298:	00001c06 	br	80e30c <lcd_handle_escape+0x28c>
  80e29c:	00001b06 	br	80e30c <lcd_handle_escape+0x28c>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80e2a0:	e0bffb17 	ldw	r2,-20(fp)
  80e2a4:	00801816 	blt	zero,r2,80e308 <lcd_handle_escape+0x288>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80e2a8:	e0bffe17 	ldw	r2,-8(fp)
  80e2ac:	10800843 	ldbu	r2,33(r2)
  80e2b0:	10803fcc 	andi	r2,r2,255
  80e2b4:	10801428 	cmpgeui	r2,r2,80
  80e2b8:	1000131e 	bne	r2,zero,80e308 <lcd_handle_escape+0x288>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80e2bc:	e0bffe17 	ldw	r2,-8(fp)
  80e2c0:	10800883 	ldbu	r2,34(r2)
  80e2c4:	10803fcc 	andi	r2,r2,255
  80e2c8:	108018e4 	muli	r2,r2,99
  80e2cc:	10801004 	addi	r2,r2,64
  80e2d0:	e0fffe17 	ldw	r3,-8(fp)
  80e2d4:	1887883a 	add	r3,r3,r2
  80e2d8:	e0bffe17 	ldw	r2,-8(fp)
  80e2dc:	10800843 	ldbu	r2,33(r2)
  80e2e0:	10803fcc 	andi	r2,r2,255
  80e2e4:	1889883a 	add	r4,r3,r2
  80e2e8:	e0bffe17 	ldw	r2,-8(fp)
  80e2ec:	10800843 	ldbu	r2,33(r2)
  80e2f0:	10803fcc 	andi	r2,r2,255
  80e2f4:	00c01404 	movi	r3,80
  80e2f8:	1885c83a 	sub	r2,r3,r2
  80e2fc:	01400804 	movi	r5,32
  80e300:	100d883a 	mov	r6,r2
  80e304:	08063f40 	call	8063f4 <memset>
    }
    break;
  80e308:	0001883a 	nop
  }
}
  80e30c:	e037883a 	mov	sp,fp
  80e310:	dfc00117 	ldw	ra,4(sp)
  80e314:	df000017 	ldw	fp,0(sp)
  80e318:	dec00204 	addi	sp,sp,8
  80e31c:	f800283a 	ret

0080e320 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80e320:	defff304 	addi	sp,sp,-52
  80e324:	dfc00c15 	stw	ra,48(sp)
  80e328:	df000b15 	stw	fp,44(sp)
  80e32c:	df000b04 	addi	fp,sp,44
  80e330:	e13ffc15 	stw	r4,-16(fp)
  80e334:	e17ffd15 	stw	r5,-12(fp)
  80e338:	e1bffe15 	stw	r6,-8(fp)
  80e33c:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80e340:	e0bffe17 	ldw	r2,-8(fp)
  80e344:	e0fffd17 	ldw	r3,-12(fp)
  80e348:	1885883a 	add	r2,r3,r2
  80e34c:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80e350:	e0bffc17 	ldw	r2,-16(fp)
  80e354:	00c00044 	movi	r3,1
  80e358:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  80e35c:	00009e06 	br	80e5d8 <altera_avalon_lcd_16207_write+0x2b8>
  {
    char c = *ptr;
  80e360:	e0bffd17 	ldw	r2,-12(fp)
  80e364:	10800003 	ldbu	r2,0(r2)
  80e368:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  80e36c:	e0bffc17 	ldw	r2,-16(fp)
  80e370:	10800903 	ldbu	r2,36(r2)
  80e374:	10803fcc 	andi	r2,r2,255
  80e378:	1080201c 	xori	r2,r2,128
  80e37c:	10bfe004 	addi	r2,r2,-128
  80e380:	10003a16 	blt	r2,zero,80e46c <altera_avalon_lcd_16207_write+0x14c>
    {
      unsigned int esccount = sp->esccount;
  80e384:	e0bffc17 	ldw	r2,-16(fp)
  80e388:	10800903 	ldbu	r2,36(r2)
  80e38c:	10803fcc 	andi	r2,r2,255
  80e390:	1080201c 	xori	r2,r2,128
  80e394:	10bfe004 	addi	r2,r2,-128
  80e398:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80e39c:	e0bffa17 	ldw	r2,-24(fp)
  80e3a0:	1000031e 	bne	r2,zero,80e3b0 <altera_avalon_lcd_16207_write+0x90>
  80e3a4:	e0bff907 	ldb	r2,-28(fp)
  80e3a8:	108016d8 	cmpnei	r2,r2,91
  80e3ac:	10000f1e 	bne	r2,zero,80e3ec <altera_avalon_lcd_16207_write+0xcc>
  80e3b0:	e0bffa17 	ldw	r2,-24(fp)
  80e3b4:	10001a26 	beq	r2,zero,80e420 <altera_avalon_lcd_16207_write+0x100>
          (esccount > 0 && !isdigit(c) && c != ';'))
  80e3b8:	00802074 	movhi	r2,129
  80e3bc:	10860804 	addi	r2,r2,6176
  80e3c0:	10c00017 	ldw	r3,0(r2)
  80e3c4:	e0bff907 	ldb	r2,-28(fp)
  80e3c8:	10800044 	addi	r2,r2,1
  80e3cc:	1885883a 	add	r2,r3,r2
  80e3d0:	10800003 	ldbu	r2,0(r2)
  80e3d4:	10803fcc 	andi	r2,r2,255
  80e3d8:	1080010c 	andi	r2,r2,4
  80e3dc:	1000101e 	bne	r2,zero,80e420 <altera_avalon_lcd_16207_write+0x100>
  80e3e0:	e0bff907 	ldb	r2,-28(fp)
  80e3e4:	10800ee0 	cmpeqi	r2,r2,59
  80e3e8:	10000d1e 	bne	r2,zero,80e420 <altera_avalon_lcd_16207_write+0x100>
      {
        sp->escape[esccount] = 0;
  80e3ec:	e0fffc17 	ldw	r3,-16(fp)
  80e3f0:	e0bffa17 	ldw	r2,-24(fp)
  80e3f4:	1885883a 	add	r2,r3,r2
  80e3f8:	10800a04 	addi	r2,r2,40
  80e3fc:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  80e400:	e0bff907 	ldb	r2,-28(fp)
  80e404:	e13ffc17 	ldw	r4,-16(fp)
  80e408:	100b883a 	mov	r5,r2
  80e40c:	080e0800 	call	80e080 <lcd_handle_escape>

        sp->esccount = -1;
  80e410:	e0bffc17 	ldw	r2,-16(fp)
  80e414:	00ffffc4 	movi	r3,-1
  80e418:	10c00905 	stb	r3,36(r2)
  80e41c:	00001206 	br	80e468 <altera_avalon_lcd_16207_write+0x148>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  80e420:	e0bffc17 	ldw	r2,-16(fp)
  80e424:	10800903 	ldbu	r2,36(r2)
  80e428:	10803fcc 	andi	r2,r2,255
  80e42c:	108001e8 	cmpgeui	r2,r2,7
  80e430:	10000d1e 	bne	r2,zero,80e468 <altera_avalon_lcd_16207_write+0x148>
      {
        sp->escape[esccount] = c;
  80e434:	e0fffc17 	ldw	r3,-16(fp)
  80e438:	e0bffa17 	ldw	r2,-24(fp)
  80e43c:	1885883a 	add	r2,r3,r2
  80e440:	10800a04 	addi	r2,r2,40
  80e444:	e0fff903 	ldbu	r3,-28(fp)
  80e448:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  80e44c:	e0bffc17 	ldw	r2,-16(fp)
  80e450:	10800903 	ldbu	r2,36(r2)
  80e454:	10800044 	addi	r2,r2,1
  80e458:	1007883a 	mov	r3,r2
  80e45c:	e0bffc17 	ldw	r2,-16(fp)
  80e460:	10c00905 	stb	r3,36(r2)
  80e464:	00005906 	br	80e5cc <altera_avalon_lcd_16207_write+0x2ac>
  80e468:	00005806 	br	80e5cc <altera_avalon_lcd_16207_write+0x2ac>
      }
    }
    else if (c == 27) /* ESC */
  80e46c:	e0bff907 	ldb	r2,-28(fp)
  80e470:	108006d8 	cmpnei	r2,r2,27
  80e474:	1000031e 	bne	r2,zero,80e484 <altera_avalon_lcd_16207_write+0x164>
    {
      sp->esccount = 0;
  80e478:	e0bffc17 	ldw	r2,-16(fp)
  80e47c:	10000905 	stb	zero,36(r2)
  80e480:	00005206 	br	80e5cc <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\r')
  80e484:	e0bff907 	ldb	r2,-28(fp)
  80e488:	10800358 	cmpnei	r2,r2,13
  80e48c:	1000031e 	bne	r2,zero,80e49c <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->x = 0;
  80e490:	e0bffc17 	ldw	r2,-16(fp)
  80e494:	10000845 	stb	zero,33(r2)
  80e498:	00004c06 	br	80e5cc <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\n')
  80e49c:	e0bff907 	ldb	r2,-28(fp)
  80e4a0:	10800298 	cmpnei	r2,r2,10
  80e4a4:	1000101e 	bne	r2,zero,80e4e8 <altera_avalon_lcd_16207_write+0x1c8>
    {
      sp->x = 0;
  80e4a8:	e0bffc17 	ldw	r2,-16(fp)
  80e4ac:	10000845 	stb	zero,33(r2)
      sp->y++;
  80e4b0:	e0bffc17 	ldw	r2,-16(fp)
  80e4b4:	10800883 	ldbu	r2,34(r2)
  80e4b8:	10800044 	addi	r2,r2,1
  80e4bc:	1007883a 	mov	r3,r2
  80e4c0:	e0bffc17 	ldw	r2,-16(fp)
  80e4c4:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80e4c8:	e0bffc17 	ldw	r2,-16(fp)
  80e4cc:	10800883 	ldbu	r2,34(r2)
  80e4d0:	10803fcc 	andi	r2,r2,255
  80e4d4:	108000f0 	cmpltui	r2,r2,3
  80e4d8:	10003c1e 	bne	r2,zero,80e5cc <altera_avalon_lcd_16207_write+0x2ac>
        lcd_scroll_up(sp);
  80e4dc:	e13ffc17 	ldw	r4,-16(fp)
  80e4e0:	080dfb80 	call	80dfb8 <lcd_scroll_up>
  80e4e4:	00003906 	br	80e5cc <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\b')
  80e4e8:	e0bff907 	ldb	r2,-28(fp)
  80e4ec:	10800218 	cmpnei	r2,r2,8
  80e4f0:	10000b1e 	bne	r2,zero,80e520 <altera_avalon_lcd_16207_write+0x200>
    {
      if (sp->x > 0)
  80e4f4:	e0bffc17 	ldw	r2,-16(fp)
  80e4f8:	10800843 	ldbu	r2,33(r2)
  80e4fc:	10803fcc 	andi	r2,r2,255
  80e500:	10003226 	beq	r2,zero,80e5cc <altera_avalon_lcd_16207_write+0x2ac>
        sp->x--;
  80e504:	e0bffc17 	ldw	r2,-16(fp)
  80e508:	10800843 	ldbu	r2,33(r2)
  80e50c:	10bfffc4 	addi	r2,r2,-1
  80e510:	1007883a 	mov	r3,r2
  80e514:	e0bffc17 	ldw	r2,-16(fp)
  80e518:	10c00845 	stb	r3,33(r2)
  80e51c:	00002b06 	br	80e5cc <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (isprint(c))
  80e520:	00802074 	movhi	r2,129
  80e524:	10860804 	addi	r2,r2,6176
  80e528:	10c00017 	ldw	r3,0(r2)
  80e52c:	e0bff907 	ldb	r2,-28(fp)
  80e530:	10800044 	addi	r2,r2,1
  80e534:	1885883a 	add	r2,r3,r2
  80e538:	10800003 	ldbu	r2,0(r2)
  80e53c:	10803fcc 	andi	r2,r2,255
  80e540:	1080201c 	xori	r2,r2,128
  80e544:	10bfe004 	addi	r2,r2,-128
  80e548:	108025cc 	andi	r2,r2,151
  80e54c:	10001f26 	beq	r2,zero,80e5cc <altera_avalon_lcd_16207_write+0x2ac>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80e550:	e0bffc17 	ldw	r2,-16(fp)
  80e554:	10800883 	ldbu	r2,34(r2)
  80e558:	10803fcc 	andi	r2,r2,255
  80e55c:	108000b0 	cmpltui	r2,r2,2
  80e560:	1000021e 	bne	r2,zero,80e56c <altera_avalon_lcd_16207_write+0x24c>
        lcd_scroll_up(sp);
  80e564:	e13ffc17 	ldw	r4,-16(fp)
  80e568:	080dfb80 	call	80dfb8 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80e56c:	e0bffc17 	ldw	r2,-16(fp)
  80e570:	10800843 	ldbu	r2,33(r2)
  80e574:	10803fcc 	andi	r2,r2,255
  80e578:	10801428 	cmpgeui	r2,r2,80
  80e57c:	10000d1e 	bne	r2,zero,80e5b4 <altera_avalon_lcd_16207_write+0x294>
        sp->line[sp->y].data[sp->x] = c;
  80e580:	e0bffc17 	ldw	r2,-16(fp)
  80e584:	10800883 	ldbu	r2,34(r2)
  80e588:	10c03fcc 	andi	r3,r2,255
  80e58c:	e0bffc17 	ldw	r2,-16(fp)
  80e590:	10800843 	ldbu	r2,33(r2)
  80e594:	10803fcc 	andi	r2,r2,255
  80e598:	e13ffc17 	ldw	r4,-16(fp)
  80e59c:	18c018e4 	muli	r3,r3,99
  80e5a0:	20c7883a 	add	r3,r4,r3
  80e5a4:	1885883a 	add	r2,r3,r2
  80e5a8:	10801004 	addi	r2,r2,64
  80e5ac:	e0fff903 	ldbu	r3,-28(fp)
  80e5b0:	10c00005 	stb	r3,0(r2)

      sp->x++;
  80e5b4:	e0bffc17 	ldw	r2,-16(fp)
  80e5b8:	10800843 	ldbu	r2,33(r2)
  80e5bc:	10800044 	addi	r2,r2,1
  80e5c0:	1007883a 	mov	r3,r2
  80e5c4:	e0bffc17 	ldw	r2,-16(fp)
  80e5c8:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  80e5cc:	e0bffd17 	ldw	r2,-12(fp)
  80e5d0:	10800044 	addi	r2,r2,1
  80e5d4:	e0bffd15 	stw	r2,-12(fp)
  80e5d8:	e0fffd17 	ldw	r3,-12(fp)
  80e5dc:	e0bff817 	ldw	r2,-32(fp)
  80e5e0:	18bf5f36 	bltu	r3,r2,80e360 <__alt_data_end+0xff80e360>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  80e5e4:	00800404 	movi	r2,16
  80e5e8:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80e5ec:	e03ff515 	stw	zero,-44(fp)
  80e5f0:	00003606 	br	80e6cc <altera_avalon_lcd_16207_write+0x3ac>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80e5f4:	00801404 	movi	r2,80
  80e5f8:	e0bff715 	stw	r2,-36(fp)
  80e5fc:	00001206 	br	80e648 <altera_avalon_lcd_16207_write+0x328>
      if (sp->line[y].data[width-1] != ' ')
  80e600:	e0bff717 	ldw	r2,-36(fp)
  80e604:	10bfffc4 	addi	r2,r2,-1
  80e608:	e13ffc17 	ldw	r4,-16(fp)
  80e60c:	e0fff517 	ldw	r3,-44(fp)
  80e610:	18c018e4 	muli	r3,r3,99
  80e614:	20c7883a 	add	r3,r4,r3
  80e618:	1885883a 	add	r2,r3,r2
  80e61c:	10801004 	addi	r2,r2,64
  80e620:	10800003 	ldbu	r2,0(r2)
  80e624:	10803fcc 	andi	r2,r2,255
  80e628:	1080201c 	xori	r2,r2,128
  80e62c:	10bfe004 	addi	r2,r2,-128
  80e630:	10800820 	cmpeqi	r2,r2,32
  80e634:	1000011e 	bne	r2,zero,80e63c <altera_avalon_lcd_16207_write+0x31c>
        break;
  80e638:	00000506 	br	80e650 <altera_avalon_lcd_16207_write+0x330>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80e63c:	e0bff717 	ldw	r2,-36(fp)
  80e640:	10bfffc4 	addi	r2,r2,-1
  80e644:	e0bff715 	stw	r2,-36(fp)
  80e648:	e0bff717 	ldw	r2,-36(fp)
  80e64c:	00bfec16 	blt	zero,r2,80e600 <__alt_data_end+0xff80e600>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80e650:	e0bff717 	ldw	r2,-36(fp)
  80e654:	10800448 	cmpgei	r2,r2,17
  80e658:	1000031e 	bne	r2,zero,80e668 <altera_avalon_lcd_16207_write+0x348>
      width = ALT_LCD_WIDTH;
  80e65c:	00800404 	movi	r2,16
  80e660:	e0bff715 	stw	r2,-36(fp)
  80e664:	00000306 	br	80e674 <altera_avalon_lcd_16207_write+0x354>
    else
      width++;
  80e668:	e0bff717 	ldw	r2,-36(fp)
  80e66c:	10800044 	addi	r2,r2,1
  80e670:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  80e674:	e0bff717 	ldw	r2,-36(fp)
  80e678:	1009883a 	mov	r4,r2
  80e67c:	e0fffc17 	ldw	r3,-16(fp)
  80e680:	e0bff517 	ldw	r2,-44(fp)
  80e684:	108018e4 	muli	r2,r2,99
  80e688:	10802404 	addi	r2,r2,144
  80e68c:	1885883a 	add	r2,r3,r2
  80e690:	11000045 	stb	r4,1(r2)
    if (widthmax < width)
  80e694:	e0fff617 	ldw	r3,-40(fp)
  80e698:	e0bff717 	ldw	r2,-36(fp)
  80e69c:	1880020e 	bge	r3,r2,80e6a8 <altera_avalon_lcd_16207_write+0x388>
      widthmax = width;
  80e6a0:	e0bff717 	ldw	r2,-36(fp)
  80e6a4:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  80e6a8:	e0fffc17 	ldw	r3,-16(fp)
  80e6ac:	e0bff517 	ldw	r2,-44(fp)
  80e6b0:	108018e4 	muli	r2,r2,99
  80e6b4:	10802404 	addi	r2,r2,144
  80e6b8:	1885883a 	add	r2,r3,r2
  80e6bc:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80e6c0:	e0bff517 	ldw	r2,-44(fp)
  80e6c4:	10800044 	addi	r2,r2,1
  80e6c8:	e0bff515 	stw	r2,-44(fp)
  80e6cc:	e0bff517 	ldw	r2,-44(fp)
  80e6d0:	10800090 	cmplti	r2,r2,2
  80e6d4:	103fc71e 	bne	r2,zero,80e5f4 <__alt_data_end+0xff80e5f4>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  80e6d8:	e0bff617 	ldw	r2,-40(fp)
  80e6dc:	10800448 	cmpgei	r2,r2,17
  80e6e0:	1000031e 	bne	r2,zero,80e6f0 <altera_avalon_lcd_16207_write+0x3d0>
    sp->scrollmax = 0;
  80e6e4:	e0bffc17 	ldw	r2,-16(fp)
  80e6e8:	10000985 	stb	zero,38(r2)
  80e6ec:	00002e06 	br	80e7a8 <altera_avalon_lcd_16207_write+0x488>
  else
  {
    widthmax *= 2;
  80e6f0:	e0bff617 	ldw	r2,-40(fp)
  80e6f4:	1085883a 	add	r2,r2,r2
  80e6f8:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  80e6fc:	e0bff617 	ldw	r2,-40(fp)
  80e700:	1007883a 	mov	r3,r2
  80e704:	e0bffc17 	ldw	r2,-16(fp)
  80e708:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80e70c:	e03ff515 	stw	zero,-44(fp)
  80e710:	00002206 	br	80e79c <altera_avalon_lcd_16207_write+0x47c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80e714:	e0fffc17 	ldw	r3,-16(fp)
  80e718:	e0bff517 	ldw	r2,-44(fp)
  80e71c:	108018e4 	muli	r2,r2,99
  80e720:	10802404 	addi	r2,r2,144
  80e724:	1885883a 	add	r2,r3,r2
  80e728:	10800043 	ldbu	r2,1(r2)
  80e72c:	10803fcc 	andi	r2,r2,255
  80e730:	1080201c 	xori	r2,r2,128
  80e734:	10bfe004 	addi	r2,r2,-128
  80e738:	10800450 	cmplti	r2,r2,17
  80e73c:	1000141e 	bne	r2,zero,80e790 <altera_avalon_lcd_16207_write+0x470>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  80e740:	e0fffc17 	ldw	r3,-16(fp)
  80e744:	e0bff517 	ldw	r2,-44(fp)
  80e748:	108018e4 	muli	r2,r2,99
  80e74c:	10802404 	addi	r2,r2,144
  80e750:	1885883a 	add	r2,r3,r2
  80e754:	10800043 	ldbu	r2,1(r2)
  80e758:	10803fcc 	andi	r2,r2,255
  80e75c:	1080201c 	xori	r2,r2,128
  80e760:	10bfe004 	addi	r2,r2,-128
  80e764:	1004923a 	slli	r2,r2,8
  80e768:	1009883a 	mov	r4,r2
  80e76c:	e17ff617 	ldw	r5,-40(fp)
  80e770:	080a6400 	call	80a640 <__divsi3>
  80e774:	1009883a 	mov	r4,r2
  80e778:	e0fffc17 	ldw	r3,-16(fp)
  80e77c:	e0bff517 	ldw	r2,-44(fp)
  80e780:	108018e4 	muli	r2,r2,99
  80e784:	10802404 	addi	r2,r2,144
  80e788:	1885883a 	add	r2,r3,r2
  80e78c:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80e790:	e0bff517 	ldw	r2,-44(fp)
  80e794:	10800044 	addi	r2,r2,1
  80e798:	e0bff515 	stw	r2,-44(fp)
  80e79c:	e0bff517 	ldw	r2,-44(fp)
  80e7a0:	10800090 	cmplti	r2,r2,2
  80e7a4:	103fdb1e 	bne	r2,zero,80e714 <__alt_data_end+0xff80e714>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  80e7a8:	e0bffc17 	ldw	r2,-16(fp)
  80e7ac:	10800943 	ldbu	r2,37(r2)
  80e7b0:	10803fcc 	andi	r2,r2,255
  80e7b4:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  80e7b8:	e13ffc17 	ldw	r4,-16(fp)
  80e7bc:	080ddd00 	call	80ddd0 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  80e7c0:	e0bffc17 	ldw	r2,-16(fp)
  80e7c4:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  80e7c8:	e0bffc17 	ldw	r2,-16(fp)
  80e7cc:	10800943 	ldbu	r2,37(r2)
  80e7d0:	10c03fcc 	andi	r3,r2,255
  80e7d4:	e0bffb17 	ldw	r2,-20(fp)
  80e7d8:	1880011e 	bne	r3,r2,80e7e0 <altera_avalon_lcd_16207_write+0x4c0>
      break;
  80e7dc:	00000406 	br	80e7f0 <altera_avalon_lcd_16207_write+0x4d0>

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  80e7e0:	e0bffc17 	ldw	r2,-16(fp)
  80e7e4:	00c00044 	movi	r3,1
  80e7e8:	10c009c5 	stb	r3,39(r2)
  }
  80e7ec:	003fee06 	br	80e7a8 <__alt_data_end+0xff80e7a8>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  80e7f0:	e0bffe17 	ldw	r2,-8(fp)
}
  80e7f4:	e037883a 	mov	sp,fp
  80e7f8:	dfc00117 	ldw	ra,4(sp)
  80e7fc:	df000017 	ldw	fp,0(sp)
  80e800:	dec00204 	addi	sp,sp,8
  80e804:	f800283a 	ret

0080e808 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80e808:	defffc04 	addi	sp,sp,-16
  80e80c:	dfc00315 	stw	ra,12(sp)
  80e810:	df000215 	stw	fp,8(sp)
  80e814:	df000204 	addi	fp,sp,8
  80e818:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  80e81c:	e0bfff17 	ldw	r2,-4(fp)
  80e820:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80e824:	e0bffe17 	ldw	r2,-8(fp)
  80e828:	10800943 	ldbu	r2,37(r2)
  80e82c:	10803fcc 	andi	r2,r2,255
  80e830:	10c00044 	addi	r3,r2,1
  80e834:	e0bffe17 	ldw	r2,-8(fp)
  80e838:	10800983 	ldbu	r2,38(r2)
  80e83c:	10803fcc 	andi	r2,r2,255
  80e840:	18800316 	blt	r3,r2,80e850 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  80e844:	e0bffe17 	ldw	r2,-8(fp)
  80e848:	10000945 	stb	zero,37(r2)
  80e84c:	00000606 	br	80e868 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  80e850:	e0bffe17 	ldw	r2,-8(fp)
  80e854:	10800943 	ldbu	r2,37(r2)
  80e858:	10800044 	addi	r2,r2,1
  80e85c:	1007883a 	mov	r3,r2
  80e860:	e0bffe17 	ldw	r2,-8(fp)
  80e864:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80e868:	e0bffe17 	ldw	r2,-8(fp)
  80e86c:	10800983 	ldbu	r2,38(r2)
  80e870:	10803fcc 	andi	r2,r2,255
  80e874:	10000826 	beq	r2,zero,80e898 <alt_lcd_16207_timeout+0x90>
  80e878:	e0bffe17 	ldw	r2,-8(fp)
  80e87c:	108009c3 	ldbu	r2,39(r2)
  80e880:	10803fcc 	andi	r2,r2,255
  80e884:	1080201c 	xori	r2,r2,128
  80e888:	10bfe004 	addi	r2,r2,-128
  80e88c:	1000021e 	bne	r2,zero,80e898 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  80e890:	e13ffe17 	ldw	r4,-8(fp)
  80e894:	080ddd00 	call	80ddd0 <lcd_repaint_screen>

  return sp->period;
  80e898:	e0bffe17 	ldw	r2,-8(fp)
  80e89c:	10800717 	ldw	r2,28(r2)
}
  80e8a0:	e037883a 	mov	sp,fp
  80e8a4:	dfc00117 	ldw	ra,4(sp)
  80e8a8:	df000017 	ldw	fp,0(sp)
  80e8ac:	dec00204 	addi	sp,sp,8
  80e8b0:	f800283a 	ret

0080e8b4 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  80e8b4:	defffc04 	addi	sp,sp,-16
  80e8b8:	dfc00315 	stw	ra,12(sp)
  80e8bc:	df000215 	stw	fp,8(sp)
  80e8c0:	df000204 	addi	fp,sp,8
  80e8c4:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  80e8c8:	e0bfff17 	ldw	r2,-4(fp)
  80e8cc:	10800017 	ldw	r2,0(r2)
  80e8d0:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  80e8d4:	e0bfff17 	ldw	r2,-4(fp)
  80e8d8:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  80e8dc:	010ea604 	movi	r4,15000
  80e8e0:	080fbe00 	call	80fbe0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80e8e4:	e0bffe17 	ldw	r2,-8(fp)
  80e8e8:	00c00c04 	movi	r3,48
  80e8ec:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  80e8f0:	01040104 	movi	r4,4100
  80e8f4:	080fbe00 	call	80fbe0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80e8f8:	e0bffe17 	ldw	r2,-8(fp)
  80e8fc:	00c00c04 	movi	r3,48
  80e900:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  80e904:	0100fa04 	movi	r4,1000
  80e908:	080fbe00 	call	80fbe0 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80e90c:	e0bffe17 	ldw	r2,-8(fp)
  80e910:	00c00c04 	movi	r3,48
  80e914:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  80e918:	e13fff17 	ldw	r4,-4(fp)
  80e91c:	01400e04 	movi	r5,56
  80e920:	080db7c0 	call	80db7c <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  80e924:	e13fff17 	ldw	r4,-4(fp)
  80e928:	01400204 	movi	r5,8
  80e92c:	080db7c0 	call	80db7c <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  80e930:	e13fff17 	ldw	r4,-4(fp)
  80e934:	080dd040 	call	80dd04 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  80e938:	e13fff17 	ldw	r4,-4(fp)
  80e93c:	01400184 	movi	r5,6
  80e940:	080db7c0 	call	80db7c <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  80e944:	e13fff17 	ldw	r4,-4(fp)
  80e948:	01400304 	movi	r5,12
  80e94c:	080db7c0 	call	80db7c <lcd_write_command>

  sp->esccount = -1;
  80e950:	e0bfff17 	ldw	r2,-4(fp)
  80e954:	00ffffc4 	movi	r3,-1
  80e958:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  80e95c:	e0bfff17 	ldw	r2,-4(fp)
  80e960:	10800a04 	addi	r2,r2,40
  80e964:	1009883a 	mov	r4,r2
  80e968:	000b883a 	mov	r5,zero
  80e96c:	01800204 	movi	r6,8
  80e970:	08063f40 	call	8063f4 <memset>

  sp->scrollpos = 0;
  80e974:	e0bfff17 	ldw	r2,-4(fp)
  80e978:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  80e97c:	e0bfff17 	ldw	r2,-4(fp)
  80e980:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  80e984:	e0bfff17 	ldw	r2,-4(fp)
  80e988:	100009c5 	stb	zero,39(r2)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80e98c:	00802074 	movhi	r2,129
  80e990:	10895904 	addi	r2,r2,9572
  80e994:	10800017 	ldw	r2,0(r2)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  80e998:	1009883a 	mov	r4,r2
  80e99c:	01400284 	movi	r5,10
  80e9a0:	080a6f00 	call	80a6f0 <__udivsi3>
  80e9a4:	1007883a 	mov	r3,r2
  80e9a8:	e0bfff17 	ldw	r2,-4(fp)
  80e9ac:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  80e9b0:	e0bfff17 	ldw	r2,-4(fp)
  80e9b4:	10c00104 	addi	r3,r2,4
  80e9b8:	e0bfff17 	ldw	r2,-4(fp)
  80e9bc:	10800717 	ldw	r2,28(r2)
  80e9c0:	1809883a 	mov	r4,r3
  80e9c4:	100b883a 	mov	r5,r2
  80e9c8:	01802074 	movhi	r6,129
  80e9cc:	31ba0204 	addi	r6,r6,-6136
  80e9d0:	e1ffff17 	ldw	r7,-4(fp)
  80e9d4:	080f3380 	call	80f338 <alt_alarm_start>
}
  80e9d8:	e037883a 	mov	sp,fp
  80e9dc:	dfc00117 	ldw	ra,4(sp)
  80e9e0:	df000017 	ldw	fp,0(sp)
  80e9e4:	dec00204 	addi	sp,sp,8
  80e9e8:	f800283a 	ret

0080e9ec <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80e9ec:	defffa04 	addi	sp,sp,-24
  80e9f0:	dfc00515 	stw	ra,20(sp)
  80e9f4:	df000415 	stw	fp,16(sp)
  80e9f8:	df000404 	addi	fp,sp,16
  80e9fc:	e13ffd15 	stw	r4,-12(fp)
  80ea00:	e17ffe15 	stw	r5,-8(fp)
  80ea04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  80ea08:	e0bffd17 	ldw	r2,-12(fp)
  80ea0c:	10800017 	ldw	r2,0(r2)
  80ea10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  80ea14:	e0bffc17 	ldw	r2,-16(fp)
  80ea18:	10c00a04 	addi	r3,r2,40
  80ea1c:	e0bffd17 	ldw	r2,-12(fp)
  80ea20:	10800217 	ldw	r2,8(r2)
  80ea24:	1809883a 	mov	r4,r3
  80ea28:	e17ffe17 	ldw	r5,-8(fp)
  80ea2c:	e1bfff17 	ldw	r6,-4(fp)
  80ea30:	100f883a 	mov	r7,r2
  80ea34:	080e3200 	call	80e320 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  80ea38:	e037883a 	mov	sp,fp
  80ea3c:	dfc00117 	ldw	ra,4(sp)
  80ea40:	df000017 	ldw	fp,0(sp)
  80ea44:	dec00204 	addi	sp,sp,8
  80ea48:	f800283a 	ret

0080ea4c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80ea4c:	defffa04 	addi	sp,sp,-24
  80ea50:	dfc00515 	stw	ra,20(sp)
  80ea54:	df000415 	stw	fp,16(sp)
  80ea58:	df000404 	addi	fp,sp,16
  80ea5c:	e13ffd15 	stw	r4,-12(fp)
  80ea60:	e17ffe15 	stw	r5,-8(fp)
  80ea64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80ea68:	e0bffd17 	ldw	r2,-12(fp)
  80ea6c:	10800017 	ldw	r2,0(r2)
  80ea70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80ea74:	e0bffc17 	ldw	r2,-16(fp)
  80ea78:	10c00a04 	addi	r3,r2,40
  80ea7c:	e0bffd17 	ldw	r2,-12(fp)
  80ea80:	10800217 	ldw	r2,8(r2)
  80ea84:	1809883a 	mov	r4,r3
  80ea88:	e17ffe17 	ldw	r5,-8(fp)
  80ea8c:	e1bfff17 	ldw	r6,-4(fp)
  80ea90:	100f883a 	mov	r7,r2
  80ea94:	080ef600 	call	80ef60 <altera_avalon_uart_read>
      fd->fd_flags);
}
  80ea98:	e037883a 	mov	sp,fp
  80ea9c:	dfc00117 	ldw	ra,4(sp)
  80eaa0:	df000017 	ldw	fp,0(sp)
  80eaa4:	dec00204 	addi	sp,sp,8
  80eaa8:	f800283a 	ret

0080eaac <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80eaac:	defffa04 	addi	sp,sp,-24
  80eab0:	dfc00515 	stw	ra,20(sp)
  80eab4:	df000415 	stw	fp,16(sp)
  80eab8:	df000404 	addi	fp,sp,16
  80eabc:	e13ffd15 	stw	r4,-12(fp)
  80eac0:	e17ffe15 	stw	r5,-8(fp)
  80eac4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80eac8:	e0bffd17 	ldw	r2,-12(fp)
  80eacc:	10800017 	ldw	r2,0(r2)
  80ead0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80ead4:	e0bffc17 	ldw	r2,-16(fp)
  80ead8:	10c00a04 	addi	r3,r2,40
  80eadc:	e0bffd17 	ldw	r2,-12(fp)
  80eae0:	10800217 	ldw	r2,8(r2)
  80eae4:	1809883a 	mov	r4,r3
  80eae8:	e17ffe17 	ldw	r5,-8(fp)
  80eaec:	e1bfff17 	ldw	r6,-4(fp)
  80eaf0:	100f883a 	mov	r7,r2
  80eaf4:	080f18c0 	call	80f18c <altera_avalon_uart_write>
      fd->fd_flags);
}
  80eaf8:	e037883a 	mov	sp,fp
  80eafc:	dfc00117 	ldw	ra,4(sp)
  80eb00:	df000017 	ldw	fp,0(sp)
  80eb04:	dec00204 	addi	sp,sp,8
  80eb08:	f800283a 	ret

0080eb0c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80eb0c:	defffc04 	addi	sp,sp,-16
  80eb10:	dfc00315 	stw	ra,12(sp)
  80eb14:	df000215 	stw	fp,8(sp)
  80eb18:	df000204 	addi	fp,sp,8
  80eb1c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80eb20:	e0bfff17 	ldw	r2,-4(fp)
  80eb24:	10800017 	ldw	r2,0(r2)
  80eb28:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80eb2c:	e0bffe17 	ldw	r2,-8(fp)
  80eb30:	10c00a04 	addi	r3,r2,40
  80eb34:	e0bfff17 	ldw	r2,-4(fp)
  80eb38:	10800217 	ldw	r2,8(r2)
  80eb3c:	1809883a 	mov	r4,r3
  80eb40:	100b883a 	mov	r5,r2
  80eb44:	080eebc0 	call	80eebc <altera_avalon_uart_close>
}
  80eb48:	e037883a 	mov	sp,fp
  80eb4c:	dfc00117 	ldw	ra,4(sp)
  80eb50:	df000017 	ldw	fp,0(sp)
  80eb54:	dec00204 	addi	sp,sp,8
  80eb58:	f800283a 	ret

0080eb5c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80eb5c:	defff904 	addi	sp,sp,-28
  80eb60:	dfc00615 	stw	ra,24(sp)
  80eb64:	df000515 	stw	fp,20(sp)
  80eb68:	df000504 	addi	fp,sp,20
  80eb6c:	e13ffd15 	stw	r4,-12(fp)
  80eb70:	e17ffe15 	stw	r5,-8(fp)
  80eb74:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  80eb78:	e0bffd17 	ldw	r2,-12(fp)
  80eb7c:	10800017 	ldw	r2,0(r2)
  80eb80:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80eb84:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80eb88:	1000041e 	bne	r2,zero,80eb9c <altera_avalon_uart_init+0x40>
  80eb8c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80eb90:	1000021e 	bne	r2,zero,80eb9c <altera_avalon_uart_init+0x40>
  80eb94:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80eb98:	10000226 	beq	r2,zero,80eba4 <altera_avalon_uart_init+0x48>
  80eb9c:	00800044 	movi	r2,1
  80eba0:	00000106 	br	80eba8 <altera_avalon_uart_init+0x4c>
  80eba4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80eba8:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80ebac:	e0bffc17 	ldw	r2,-16(fp)
  80ebb0:	10000d1e 	bne	r2,zero,80ebe8 <altera_avalon_uart_init+0x8c>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80ebb4:	e0bffd17 	ldw	r2,-12(fp)
  80ebb8:	00c32004 	movi	r3,3200
  80ebbc:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  80ebc0:	e0bffb17 	ldw	r2,-20(fp)
  80ebc4:	10800304 	addi	r2,r2,12
  80ebc8:	e0fffd17 	ldw	r3,-12(fp)
  80ebcc:	18c00117 	ldw	r3,4(r3)
  80ebd0:	10c00035 	stwio	r3,0(r2)
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
  80ebd4:	e13fff17 	ldw	r4,-4(fp)
  80ebd8:	e17ffd17 	ldw	r5,-12(fp)
  80ebdc:	01802074 	movhi	r6,129
  80ebe0:	31baff04 	addi	r6,r6,-5124
  80ebe4:	080cf4c0 	call	80cf4c <alt_irq_register>
#endif  
  }
}
  80ebe8:	e037883a 	mov	sp,fp
  80ebec:	dfc00117 	ldw	ra,4(sp)
  80ebf0:	df000017 	ldw	fp,0(sp)
  80ebf4:	dec00204 	addi	sp,sp,8
  80ebf8:	f800283a 	ret

0080ebfc <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80ebfc:	defff904 	addi	sp,sp,-28
  80ec00:	dfc00615 	stw	ra,24(sp)
  80ec04:	df000515 	stw	fp,20(sp)
  80ec08:	df000504 	addi	fp,sp,20
  80ec0c:	e13ffe15 	stw	r4,-8(fp)
  80ec10:	e17fff15 	stw	r5,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80ec14:	e0bffe17 	ldw	r2,-8(fp)
  80ec18:	e0bffb15 	stw	r2,-20(fp)
  void* base               = sp->base;
  80ec1c:	e0bffb17 	ldw	r2,-20(fp)
  80ec20:	10800017 	ldw	r2,0(r2)
  80ec24:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80ec28:	e0bffc17 	ldw	r2,-16(fp)
  80ec2c:	10800204 	addi	r2,r2,8
  80ec30:	10800037 	ldwio	r2,0(r2)
  80ec34:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80ec38:	e0bffc17 	ldw	r2,-16(fp)
  80ec3c:	10800204 	addi	r2,r2,8
  80ec40:	0007883a 	mov	r3,zero
  80ec44:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80ec48:	e0bffc17 	ldw	r2,-16(fp)
  80ec4c:	10800204 	addi	r2,r2,8
  80ec50:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80ec54:	e0bffd17 	ldw	r2,-12(fp)
  80ec58:	1080200c 	andi	r2,r2,128
  80ec5c:	10000326 	beq	r2,zero,80ec6c <altera_avalon_uart_irq+0x70>
  {
    altera_avalon_uart_rxirq(sp, status);
  80ec60:	e13ffb17 	ldw	r4,-20(fp)
  80ec64:	e17ffd17 	ldw	r5,-12(fp)
  80ec68:	080ec980 	call	80ec98 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80ec6c:	e0bffd17 	ldw	r2,-12(fp)
  80ec70:	1081100c 	andi	r2,r2,1088
  80ec74:	10000326 	beq	r2,zero,80ec84 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80ec78:	e13ffb17 	ldw	r4,-20(fp)
  80ec7c:	e17ffd17 	ldw	r5,-12(fp)
  80ec80:	080ed780 	call	80ed78 <altera_avalon_uart_txirq>
  }
  

}
  80ec84:	e037883a 	mov	sp,fp
  80ec88:	dfc00117 	ldw	ra,4(sp)
  80ec8c:	df000017 	ldw	fp,0(sp)
  80ec90:	dec00204 	addi	sp,sp,8
  80ec94:	f800283a 	ret

0080ec98 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80ec98:	defffc04 	addi	sp,sp,-16
  80ec9c:	df000315 	stw	fp,12(sp)
  80eca0:	df000304 	addi	fp,sp,12
  80eca4:	e13ffe15 	stw	r4,-8(fp)
  80eca8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80ecac:	e0bfff17 	ldw	r2,-4(fp)
  80ecb0:	108000cc 	andi	r2,r2,3
  80ecb4:	10000126 	beq	r2,zero,80ecbc <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  80ecb8:	00002b06 	br	80ed68 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80ecbc:	e0bffe17 	ldw	r2,-8(fp)
  80ecc0:	10800317 	ldw	r2,12(r2)
  80ecc4:	e0bffe17 	ldw	r2,-8(fp)
  80ecc8:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80eccc:	e0bffe17 	ldw	r2,-8(fp)
  80ecd0:	10800317 	ldw	r2,12(r2)
  80ecd4:	10800044 	addi	r2,r2,1
  80ecd8:	10800fcc 	andi	r2,r2,63
  80ecdc:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80ece0:	e0bffe17 	ldw	r2,-8(fp)
  80ece4:	10800317 	ldw	r2,12(r2)
  80ece8:	e0fffe17 	ldw	r3,-8(fp)
  80ecec:	18c00017 	ldw	r3,0(r3)
  80ecf0:	18c00037 	ldwio	r3,0(r3)
  80ecf4:	1809883a 	mov	r4,r3
  80ecf8:	e0fffe17 	ldw	r3,-8(fp)
  80ecfc:	1885883a 	add	r2,r3,r2
  80ed00:	10800704 	addi	r2,r2,28
  80ed04:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  80ed08:	e0bffe17 	ldw	r2,-8(fp)
  80ed0c:	e0fffd17 	ldw	r3,-12(fp)
  80ed10:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80ed14:	e0bffe17 	ldw	r2,-8(fp)
  80ed18:	10800317 	ldw	r2,12(r2)
  80ed1c:	10800044 	addi	r2,r2,1
  80ed20:	10800fcc 	andi	r2,r2,63
  80ed24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80ed28:	e0bffe17 	ldw	r2,-8(fp)
  80ed2c:	10c00217 	ldw	r3,8(r2)
  80ed30:	e0bffd17 	ldw	r2,-12(fp)
  80ed34:	18800c1e 	bne	r3,r2,80ed68 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80ed38:	e0bffe17 	ldw	r2,-8(fp)
  80ed3c:	10c00117 	ldw	r3,4(r2)
  80ed40:	00bfdfc4 	movi	r2,-129
  80ed44:	1886703a 	and	r3,r3,r2
  80ed48:	e0bffe17 	ldw	r2,-8(fp)
  80ed4c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80ed50:	e0bffe17 	ldw	r2,-8(fp)
  80ed54:	10800017 	ldw	r2,0(r2)
  80ed58:	10800304 	addi	r2,r2,12
  80ed5c:	e0fffe17 	ldw	r3,-8(fp)
  80ed60:	18c00117 	ldw	r3,4(r3)
  80ed64:	10c00035 	stwio	r3,0(r2)
  }   
}
  80ed68:	e037883a 	mov	sp,fp
  80ed6c:	df000017 	ldw	fp,0(sp)
  80ed70:	dec00104 	addi	sp,sp,4
  80ed74:	f800283a 	ret

0080ed78 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80ed78:	defffb04 	addi	sp,sp,-20
  80ed7c:	df000415 	stw	fp,16(sp)
  80ed80:	df000404 	addi	fp,sp,16
  80ed84:	e13ffc15 	stw	r4,-16(fp)
  80ed88:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80ed8c:	e0bffc17 	ldw	r2,-16(fp)
  80ed90:	10c00417 	ldw	r3,16(r2)
  80ed94:	e0bffc17 	ldw	r2,-16(fp)
  80ed98:	10800517 	ldw	r2,20(r2)
  80ed9c:	18803226 	beq	r3,r2,80ee68 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80eda0:	e0bffc17 	ldw	r2,-16(fp)
  80eda4:	10800617 	ldw	r2,24(r2)
  80eda8:	1080008c 	andi	r2,r2,2
  80edac:	10000326 	beq	r2,zero,80edbc <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80edb0:	e0bffd17 	ldw	r2,-12(fp)
  80edb4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80edb8:	10001d26 	beq	r2,zero,80ee30 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80edbc:	e0bffc17 	ldw	r2,-16(fp)
  80edc0:	10800417 	ldw	r2,16(r2)
  80edc4:	e0bffc17 	ldw	r2,-16(fp)
  80edc8:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80edcc:	e0bffc17 	ldw	r2,-16(fp)
  80edd0:	10800017 	ldw	r2,0(r2)
  80edd4:	10800104 	addi	r2,r2,4
  80edd8:	e0fffc17 	ldw	r3,-16(fp)
  80eddc:	18c00417 	ldw	r3,16(r3)
  80ede0:	e13ffc17 	ldw	r4,-16(fp)
  80ede4:	20c7883a 	add	r3,r4,r3
  80ede8:	18c01704 	addi	r3,r3,92
  80edec:	18c00003 	ldbu	r3,0(r3)
  80edf0:	18c03fcc 	andi	r3,r3,255
  80edf4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80edf8:	e0bffc17 	ldw	r2,-16(fp)
  80edfc:	10800417 	ldw	r2,16(r2)
  80ee00:	10800044 	addi	r2,r2,1
  80ee04:	e0fffc17 	ldw	r3,-16(fp)
  80ee08:	18800415 	stw	r2,16(r3)
  80ee0c:	10c00fcc 	andi	r3,r2,63
  80ee10:	e0bffc17 	ldw	r2,-16(fp)
  80ee14:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80ee18:	e0bffc17 	ldw	r2,-16(fp)
  80ee1c:	10800117 	ldw	r2,4(r2)
  80ee20:	10c01014 	ori	r3,r2,64
  80ee24:	e0bffc17 	ldw	r2,-16(fp)
  80ee28:	10c00115 	stw	r3,4(r2)
  80ee2c:	00000e06 	br	80ee68 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80ee30:	e0bffc17 	ldw	r2,-16(fp)
  80ee34:	10800017 	ldw	r2,0(r2)
  80ee38:	10800204 	addi	r2,r2,8
  80ee3c:	10800037 	ldwio	r2,0(r2)
  80ee40:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80ee44:	e0bffd17 	ldw	r2,-12(fp)
  80ee48:	1082000c 	andi	r2,r2,2048
  80ee4c:	1000061e 	bne	r2,zero,80ee68 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80ee50:	e0bffc17 	ldw	r2,-16(fp)
  80ee54:	10c00117 	ldw	r3,4(r2)
  80ee58:	00bfefc4 	movi	r2,-65
  80ee5c:	1886703a 	and	r3,r3,r2
  80ee60:	e0bffc17 	ldw	r2,-16(fp)
  80ee64:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80ee68:	e0bffc17 	ldw	r2,-16(fp)
  80ee6c:	10c00417 	ldw	r3,16(r2)
  80ee70:	e0bffc17 	ldw	r2,-16(fp)
  80ee74:	10800517 	ldw	r2,20(r2)
  80ee78:	1880061e 	bne	r3,r2,80ee94 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80ee7c:	e0bffc17 	ldw	r2,-16(fp)
  80ee80:	10c00117 	ldw	r3,4(r2)
  80ee84:	00beefc4 	movi	r2,-1089
  80ee88:	1886703a 	and	r3,r3,r2
  80ee8c:	e0bffc17 	ldw	r2,-16(fp)
  80ee90:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80ee94:	e0bffc17 	ldw	r2,-16(fp)
  80ee98:	10800017 	ldw	r2,0(r2)
  80ee9c:	10800304 	addi	r2,r2,12
  80eea0:	e0fffc17 	ldw	r3,-16(fp)
  80eea4:	18c00117 	ldw	r3,4(r3)
  80eea8:	10c00035 	stwio	r3,0(r2)
}
  80eeac:	e037883a 	mov	sp,fp
  80eeb0:	df000017 	ldw	fp,0(sp)
  80eeb4:	dec00104 	addi	sp,sp,4
  80eeb8:	f800283a 	ret

0080eebc <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80eebc:	defffd04 	addi	sp,sp,-12
  80eec0:	df000215 	stw	fp,8(sp)
  80eec4:	df000204 	addi	fp,sp,8
  80eec8:	e13ffe15 	stw	r4,-8(fp)
  80eecc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80eed0:	00000506 	br	80eee8 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80eed4:	e0bfff17 	ldw	r2,-4(fp)
  80eed8:	1090000c 	andi	r2,r2,16384
  80eedc:	10000226 	beq	r2,zero,80eee8 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80eee0:	00bffd44 	movi	r2,-11
  80eee4:	00000606 	br	80ef00 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80eee8:	e0bffe17 	ldw	r2,-8(fp)
  80eeec:	10c00417 	ldw	r3,16(r2)
  80eef0:	e0bffe17 	ldw	r2,-8(fp)
  80eef4:	10800517 	ldw	r2,20(r2)
  80eef8:	18bff61e 	bne	r3,r2,80eed4 <__alt_data_end+0xff80eed4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80eefc:	0005883a 	mov	r2,zero
}
  80ef00:	e037883a 	mov	sp,fp
  80ef04:	df000017 	ldw	fp,0(sp)
  80ef08:	dec00104 	addi	sp,sp,4
  80ef0c:	f800283a 	ret

0080ef10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ef10:	defffe04 	addi	sp,sp,-8
  80ef14:	dfc00115 	stw	ra,4(sp)
  80ef18:	df000015 	stw	fp,0(sp)
  80ef1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ef20:	00802074 	movhi	r2,129
  80ef24:	10860204 	addi	r2,r2,6152
  80ef28:	10800017 	ldw	r2,0(r2)
  80ef2c:	10000526 	beq	r2,zero,80ef44 <alt_get_errno+0x34>
  80ef30:	00802074 	movhi	r2,129
  80ef34:	10860204 	addi	r2,r2,6152
  80ef38:	10800017 	ldw	r2,0(r2)
  80ef3c:	103ee83a 	callr	r2
  80ef40:	00000206 	br	80ef4c <alt_get_errno+0x3c>
  80ef44:	00802074 	movhi	r2,129
  80ef48:	10895404 	addi	r2,r2,9552
}
  80ef4c:	e037883a 	mov	sp,fp
  80ef50:	dfc00117 	ldw	ra,4(sp)
  80ef54:	df000017 	ldw	fp,0(sp)
  80ef58:	dec00204 	addi	sp,sp,8
  80ef5c:	f800283a 	ret

0080ef60 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80ef60:	defff204 	addi	sp,sp,-56
  80ef64:	dfc00d15 	stw	ra,52(sp)
  80ef68:	df000c15 	stw	fp,48(sp)
  80ef6c:	df000c04 	addi	fp,sp,48
  80ef70:	e13ffc15 	stw	r4,-16(fp)
  80ef74:	e17ffd15 	stw	r5,-12(fp)
  80ef78:	e1bffe15 	stw	r6,-8(fp)
  80ef7c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  80ef80:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  80ef84:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80ef88:	e0bfff17 	ldw	r2,-4(fp)
  80ef8c:	1090000c 	andi	r2,r2,16384
  80ef90:	1005003a 	cmpeq	r2,r2,zero
  80ef94:	10803fcc 	andi	r2,r2,255
  80ef98:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80ef9c:	00001306 	br	80efec <altera_avalon_uart_read+0x8c>
    {
      count++;
  80efa0:	e0bff517 	ldw	r2,-44(fp)
  80efa4:	10800044 	addi	r2,r2,1
  80efa8:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80efac:	e0bffd17 	ldw	r2,-12(fp)
  80efb0:	10c00044 	addi	r3,r2,1
  80efb4:	e0fffd15 	stw	r3,-12(fp)
  80efb8:	e0fffc17 	ldw	r3,-16(fp)
  80efbc:	18c00217 	ldw	r3,8(r3)
  80efc0:	e13ffc17 	ldw	r4,-16(fp)
  80efc4:	20c7883a 	add	r3,r4,r3
  80efc8:	18c00704 	addi	r3,r3,28
  80efcc:	18c00003 	ldbu	r3,0(r3)
  80efd0:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  80efd4:	e0bffc17 	ldw	r2,-16(fp)
  80efd8:	10800217 	ldw	r2,8(r2)
  80efdc:	10800044 	addi	r2,r2,1
  80efe0:	10c00fcc 	andi	r3,r2,63
  80efe4:	e0bffc17 	ldw	r2,-16(fp)
  80efe8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80efec:	e0fff517 	ldw	r3,-44(fp)
  80eff0:	e0bffe17 	ldw	r2,-8(fp)
  80eff4:	1880050e 	bge	r3,r2,80f00c <altera_avalon_uart_read+0xac>
  80eff8:	e0bffc17 	ldw	r2,-16(fp)
  80effc:	10c00217 	ldw	r3,8(r2)
  80f000:	e0bffc17 	ldw	r2,-16(fp)
  80f004:	10800317 	ldw	r2,12(r2)
  80f008:	18bfe51e 	bne	r3,r2,80efa0 <__alt_data_end+0xff80efa0>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80f00c:	e0bff517 	ldw	r2,-44(fp)
  80f010:	1000251e 	bne	r2,zero,80f0a8 <altera_avalon_uart_read+0x148>
  80f014:	e0bffc17 	ldw	r2,-16(fp)
  80f018:	10c00217 	ldw	r3,8(r2)
  80f01c:	e0bffc17 	ldw	r2,-16(fp)
  80f020:	10800317 	ldw	r2,12(r2)
  80f024:	1880201e 	bne	r3,r2,80f0a8 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  80f028:	e0bff617 	ldw	r2,-40(fp)
  80f02c:	1000071e 	bne	r2,zero,80f04c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80f030:	080ef100 	call	80ef10 <alt_get_errno>
  80f034:	1007883a 	mov	r3,r2
  80f038:	008002c4 	movi	r2,11
  80f03c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  80f040:	00800044 	movi	r2,1
  80f044:	e0bff405 	stb	r2,-48(fp)
        break;
  80f048:	00001b06 	br	80f0b8 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f04c:	0005303a 	rdctl	r2,status
  80f050:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f054:	e0fff817 	ldw	r3,-32(fp)
  80f058:	00bfff84 	movi	r2,-2
  80f05c:	1884703a 	and	r2,r3,r2
  80f060:	1001703a 	wrctl	status,r2
  
  return context;
  80f064:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80f068:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80f06c:	e0bffc17 	ldw	r2,-16(fp)
  80f070:	10800117 	ldw	r2,4(r2)
  80f074:	10c02014 	ori	r3,r2,128
  80f078:	e0bffc17 	ldw	r2,-16(fp)
  80f07c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f080:	e0bffc17 	ldw	r2,-16(fp)
  80f084:	10800017 	ldw	r2,0(r2)
  80f088:	10800304 	addi	r2,r2,12
  80f08c:	e0fffc17 	ldw	r3,-16(fp)
  80f090:	18c00117 	ldw	r3,4(r3)
  80f094:	10c00035 	stwio	r3,0(r2)
  80f098:	e0bff717 	ldw	r2,-36(fp)
  80f09c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f0a0:	e0bff917 	ldw	r2,-28(fp)
  80f0a4:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80f0a8:	e0bff517 	ldw	r2,-44(fp)
  80f0ac:	1000021e 	bne	r2,zero,80f0b8 <altera_avalon_uart_read+0x158>
  80f0b0:	e0bffe17 	ldw	r2,-8(fp)
  80f0b4:	103fb91e 	bne	r2,zero,80ef9c <__alt_data_end+0xff80ef9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f0b8:	0005303a 	rdctl	r2,status
  80f0bc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f0c0:	e0fffa17 	ldw	r3,-24(fp)
  80f0c4:	00bfff84 	movi	r2,-2
  80f0c8:	1884703a 	and	r2,r3,r2
  80f0cc:	1001703a 	wrctl	status,r2
  
  return context;
  80f0d0:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80f0d4:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80f0d8:	e0bffc17 	ldw	r2,-16(fp)
  80f0dc:	10800117 	ldw	r2,4(r2)
  80f0e0:	10c02014 	ori	r3,r2,128
  80f0e4:	e0bffc17 	ldw	r2,-16(fp)
  80f0e8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f0ec:	e0bffc17 	ldw	r2,-16(fp)
  80f0f0:	10800017 	ldw	r2,0(r2)
  80f0f4:	10800304 	addi	r2,r2,12
  80f0f8:	e0fffc17 	ldw	r3,-16(fp)
  80f0fc:	18c00117 	ldw	r3,4(r3)
  80f100:	10c00035 	stwio	r3,0(r2)
  80f104:	e0bff717 	ldw	r2,-36(fp)
  80f108:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f10c:	e0bffb17 	ldw	r2,-20(fp)
  80f110:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80f114:	e0bff403 	ldbu	r2,-48(fp)
  80f118:	10000226 	beq	r2,zero,80f124 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  80f11c:	00bffd44 	movi	r2,-11
  80f120:	00000106 	br	80f128 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  80f124:	e0bff517 	ldw	r2,-44(fp)
  }
}
  80f128:	e037883a 	mov	sp,fp
  80f12c:	dfc00117 	ldw	ra,4(sp)
  80f130:	df000017 	ldw	fp,0(sp)
  80f134:	dec00204 	addi	sp,sp,8
  80f138:	f800283a 	ret

0080f13c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f13c:	defffe04 	addi	sp,sp,-8
  80f140:	dfc00115 	stw	ra,4(sp)
  80f144:	df000015 	stw	fp,0(sp)
  80f148:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f14c:	00802074 	movhi	r2,129
  80f150:	10860204 	addi	r2,r2,6152
  80f154:	10800017 	ldw	r2,0(r2)
  80f158:	10000526 	beq	r2,zero,80f170 <alt_get_errno+0x34>
  80f15c:	00802074 	movhi	r2,129
  80f160:	10860204 	addi	r2,r2,6152
  80f164:	10800017 	ldw	r2,0(r2)
  80f168:	103ee83a 	callr	r2
  80f16c:	00000206 	br	80f178 <alt_get_errno+0x3c>
  80f170:	00802074 	movhi	r2,129
  80f174:	10895404 	addi	r2,r2,9552
}
  80f178:	e037883a 	mov	sp,fp
  80f17c:	dfc00117 	ldw	ra,4(sp)
  80f180:	df000017 	ldw	fp,0(sp)
  80f184:	dec00204 	addi	sp,sp,8
  80f188:	f800283a 	ret

0080f18c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80f18c:	defff204 	addi	sp,sp,-56
  80f190:	dfc00d15 	stw	ra,52(sp)
  80f194:	df000c15 	stw	fp,48(sp)
  80f198:	df000c04 	addi	fp,sp,48
  80f19c:	e13ffc15 	stw	r4,-16(fp)
  80f1a0:	e17ffd15 	stw	r5,-12(fp)
  80f1a4:	e1bffe15 	stw	r6,-8(fp)
  80f1a8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80f1ac:	e0bffe17 	ldw	r2,-8(fp)
  80f1b0:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80f1b4:	e0bfff17 	ldw	r2,-4(fp)
  80f1b8:	1090000c 	andi	r2,r2,16384
  80f1bc:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80f1c0:	00003c06 	br	80f2b4 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80f1c4:	e0bffc17 	ldw	r2,-16(fp)
  80f1c8:	10800517 	ldw	r2,20(r2)
  80f1cc:	10800044 	addi	r2,r2,1
  80f1d0:	10800fcc 	andi	r2,r2,63
  80f1d4:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80f1d8:	e0bffc17 	ldw	r2,-16(fp)
  80f1dc:	10c00417 	ldw	r3,16(r2)
  80f1e0:	e0bff617 	ldw	r2,-40(fp)
  80f1e4:	1880221e 	bne	r3,r2,80f270 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  80f1e8:	e0bff517 	ldw	r2,-44(fp)
  80f1ec:	10000526 	beq	r2,zero,80f204 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80f1f0:	080f13c0 	call	80f13c <alt_get_errno>
  80f1f4:	1007883a 	mov	r3,r2
  80f1f8:	008002c4 	movi	r2,11
  80f1fc:	18800015 	stw	r2,0(r3)
        break;
  80f200:	00002e06 	br	80f2bc <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f204:	0005303a 	rdctl	r2,status
  80f208:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f20c:	e0fff817 	ldw	r3,-32(fp)
  80f210:	00bfff84 	movi	r2,-2
  80f214:	1884703a 	and	r2,r3,r2
  80f218:	1001703a 	wrctl	status,r2
  
  return context;
  80f21c:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80f220:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80f224:	e0bffc17 	ldw	r2,-16(fp)
  80f228:	10800117 	ldw	r2,4(r2)
  80f22c:	10c11014 	ori	r3,r2,1088
  80f230:	e0bffc17 	ldw	r2,-16(fp)
  80f234:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f238:	e0bffc17 	ldw	r2,-16(fp)
  80f23c:	10800017 	ldw	r2,0(r2)
  80f240:	10800304 	addi	r2,r2,12
  80f244:	e0fffc17 	ldw	r3,-16(fp)
  80f248:	18c00117 	ldw	r3,4(r3)
  80f24c:	10c00035 	stwio	r3,0(r2)
  80f250:	e0bff717 	ldw	r2,-36(fp)
  80f254:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f258:	e0bff917 	ldw	r2,-28(fp)
  80f25c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80f260:	e0bffc17 	ldw	r2,-16(fp)
  80f264:	10c00417 	ldw	r3,16(r2)
  80f268:	e0bff617 	ldw	r2,-40(fp)
  80f26c:	18bffc26 	beq	r3,r2,80f260 <__alt_data_end+0xff80f260>
      }
    }

    count--;
  80f270:	e0bff417 	ldw	r2,-48(fp)
  80f274:	10bfffc4 	addi	r2,r2,-1
  80f278:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80f27c:	e0bffc17 	ldw	r2,-16(fp)
  80f280:	10c00517 	ldw	r3,20(r2)
  80f284:	e0bffd17 	ldw	r2,-12(fp)
  80f288:	11000044 	addi	r4,r2,1
  80f28c:	e13ffd15 	stw	r4,-12(fp)
  80f290:	10800003 	ldbu	r2,0(r2)
  80f294:	1009883a 	mov	r4,r2
  80f298:	e0bffc17 	ldw	r2,-16(fp)
  80f29c:	10c5883a 	add	r2,r2,r3
  80f2a0:	10801704 	addi	r2,r2,92
  80f2a4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  80f2a8:	e0bffc17 	ldw	r2,-16(fp)
  80f2ac:	e0fff617 	ldw	r3,-40(fp)
  80f2b0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80f2b4:	e0bff417 	ldw	r2,-48(fp)
  80f2b8:	103fc21e 	bne	r2,zero,80f1c4 <__alt_data_end+0xff80f1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f2bc:	0005303a 	rdctl	r2,status
  80f2c0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f2c4:	e0fffa17 	ldw	r3,-24(fp)
  80f2c8:	00bfff84 	movi	r2,-2
  80f2cc:	1884703a 	and	r2,r3,r2
  80f2d0:	1001703a 	wrctl	status,r2
  
  return context;
  80f2d4:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80f2d8:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80f2dc:	e0bffc17 	ldw	r2,-16(fp)
  80f2e0:	10800117 	ldw	r2,4(r2)
  80f2e4:	10c11014 	ori	r3,r2,1088
  80f2e8:	e0bffc17 	ldw	r2,-16(fp)
  80f2ec:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f2f0:	e0bffc17 	ldw	r2,-16(fp)
  80f2f4:	10800017 	ldw	r2,0(r2)
  80f2f8:	10800304 	addi	r2,r2,12
  80f2fc:	e0fffc17 	ldw	r3,-16(fp)
  80f300:	18c00117 	ldw	r3,4(r3)
  80f304:	10c00035 	stwio	r3,0(r2)
  80f308:	e0bff717 	ldw	r2,-36(fp)
  80f30c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f310:	e0bffb17 	ldw	r2,-20(fp)
  80f314:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80f318:	e0fffe17 	ldw	r3,-8(fp)
  80f31c:	e0bff417 	ldw	r2,-48(fp)
  80f320:	1885c83a 	sub	r2,r3,r2
}
  80f324:	e037883a 	mov	sp,fp
  80f328:	dfc00117 	ldw	ra,4(sp)
  80f32c:	df000017 	ldw	fp,0(sp)
  80f330:	dec00204 	addi	sp,sp,8
  80f334:	f800283a 	ret

0080f338 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80f338:	defff504 	addi	sp,sp,-44
  80f33c:	df000a15 	stw	fp,40(sp)
  80f340:	df000a04 	addi	fp,sp,40
  80f344:	e13ffc15 	stw	r4,-16(fp)
  80f348:	e17ffd15 	stw	r5,-12(fp)
  80f34c:	e1bffe15 	stw	r6,-8(fp)
  80f350:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80f354:	e03ff615 	stw	zero,-40(fp)
  80f358:	00802074 	movhi	r2,129
  80f35c:	10895904 	addi	r2,r2,9572
  80f360:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80f364:	10003f26 	beq	r2,zero,80f464 <alt_alarm_start+0x12c>
  {
    if (alarm)
  80f368:	e0bffc17 	ldw	r2,-16(fp)
  80f36c:	10003b26 	beq	r2,zero,80f45c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
  80f370:	e0bffc17 	ldw	r2,-16(fp)
  80f374:	e0fffe17 	ldw	r3,-8(fp)
  80f378:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80f37c:	e0bffc17 	ldw	r2,-16(fp)
  80f380:	e0ffff17 	ldw	r3,-4(fp)
  80f384:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f388:	0005303a 	rdctl	r2,status
  80f38c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f390:	e0fff817 	ldw	r3,-32(fp)
  80f394:	00bfff84 	movi	r2,-2
  80f398:	1884703a 	and	r2,r3,r2
  80f39c:	1001703a 	wrctl	status,r2
  
  return context;
  80f3a0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80f3a4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80f3a8:	00802074 	movhi	r2,129
  80f3ac:	10895a04 	addi	r2,r2,9576
  80f3b0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80f3b4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80f3b8:	e0fffd17 	ldw	r3,-12(fp)
  80f3bc:	e0bff617 	ldw	r2,-40(fp)
  80f3c0:	1885883a 	add	r2,r3,r2
  80f3c4:	10c00044 	addi	r3,r2,1
  80f3c8:	e0bffc17 	ldw	r2,-16(fp)
  80f3cc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80f3d0:	e0bffc17 	ldw	r2,-16(fp)
  80f3d4:	10c00217 	ldw	r3,8(r2)
  80f3d8:	e0bff617 	ldw	r2,-40(fp)
  80f3dc:	1880042e 	bgeu	r3,r2,80f3f0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
  80f3e0:	e0bffc17 	ldw	r2,-16(fp)
  80f3e4:	00c00044 	movi	r3,1
  80f3e8:	10c00405 	stb	r3,16(r2)
  80f3ec:	00000206 	br	80f3f8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
  80f3f0:	e0bffc17 	ldw	r2,-16(fp)
  80f3f4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80f3f8:	e0fffc17 	ldw	r3,-16(fp)
  80f3fc:	00802074 	movhi	r2,129
  80f400:	10860604 	addi	r2,r2,6168
  80f404:	e0bff915 	stw	r2,-28(fp)
  80f408:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80f40c:	e0bffa17 	ldw	r2,-24(fp)
  80f410:	e0fff917 	ldw	r3,-28(fp)
  80f414:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80f418:	e0bff917 	ldw	r2,-28(fp)
  80f41c:	10c00017 	ldw	r3,0(r2)
  80f420:	e0bffa17 	ldw	r2,-24(fp)
  80f424:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80f428:	e0bff917 	ldw	r2,-28(fp)
  80f42c:	10800017 	ldw	r2,0(r2)
  80f430:	e0fffa17 	ldw	r3,-24(fp)
  80f434:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80f438:	e0bff917 	ldw	r2,-28(fp)
  80f43c:	e0fffa17 	ldw	r3,-24(fp)
  80f440:	10c00015 	stw	r3,0(r2)
  80f444:	e0bff717 	ldw	r2,-36(fp)
  80f448:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f44c:	e0bffb17 	ldw	r2,-20(fp)
  80f450:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80f454:	0005883a 	mov	r2,zero
  80f458:	00000306 	br	80f468 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
  80f45c:	00bffa84 	movi	r2,-22
  80f460:	00000106 	br	80f468 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
  80f464:	00bfde84 	movi	r2,-134
  }
}
  80f468:	e037883a 	mov	sp,fp
  80f46c:	df000017 	ldw	fp,0(sp)
  80f470:	dec00104 	addi	sp,sp,4
  80f474:	f800283a 	ret

0080f478 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80f478:	defffe04 	addi	sp,sp,-8
  80f47c:	df000115 	stw	fp,4(sp)
  80f480:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80f484:	e03fff15 	stw	zero,-4(fp)
  80f488:	00000506 	br	80f4a0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80f48c:	e0bfff17 	ldw	r2,-4(fp)
  80f490:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80f494:	e0bfff17 	ldw	r2,-4(fp)
  80f498:	10800804 	addi	r2,r2,32
  80f49c:	e0bfff15 	stw	r2,-4(fp)
  80f4a0:	e0bfff17 	ldw	r2,-4(fp)
  80f4a4:	10820030 	cmpltui	r2,r2,2048
  80f4a8:	103ff81e 	bne	r2,zero,80f48c <__alt_data_end+0xff80f48c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80f4ac:	e037883a 	mov	sp,fp
  80f4b0:	df000017 	ldw	fp,0(sp)
  80f4b4:	dec00104 	addi	sp,sp,4
  80f4b8:	f800283a 	ret

0080f4bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f4bc:	defffe04 	addi	sp,sp,-8
  80f4c0:	dfc00115 	stw	ra,4(sp)
  80f4c4:	df000015 	stw	fp,0(sp)
  80f4c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f4cc:	00802074 	movhi	r2,129
  80f4d0:	10860204 	addi	r2,r2,6152
  80f4d4:	10800017 	ldw	r2,0(r2)
  80f4d8:	10000526 	beq	r2,zero,80f4f0 <alt_get_errno+0x34>
  80f4dc:	00802074 	movhi	r2,129
  80f4e0:	10860204 	addi	r2,r2,6152
  80f4e4:	10800017 	ldw	r2,0(r2)
  80f4e8:	103ee83a 	callr	r2
  80f4ec:	00000206 	br	80f4f8 <alt_get_errno+0x3c>
  80f4f0:	00802074 	movhi	r2,129
  80f4f4:	10895404 	addi	r2,r2,9552
}
  80f4f8:	e037883a 	mov	sp,fp
  80f4fc:	dfc00117 	ldw	ra,4(sp)
  80f500:	df000017 	ldw	fp,0(sp)
  80f504:	dec00204 	addi	sp,sp,8
  80f508:	f800283a 	ret

0080f50c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80f50c:	defffa04 	addi	sp,sp,-24
  80f510:	dfc00515 	stw	ra,20(sp)
  80f514:	df000415 	stw	fp,16(sp)
  80f518:	df000404 	addi	fp,sp,16
  80f51c:	e13ffe15 	stw	r4,-8(fp)
  80f520:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80f524:	e0bffe17 	ldw	r2,-8(fp)
  80f528:	10000326 	beq	r2,zero,80f538 <alt_dev_llist_insert+0x2c>
  80f52c:	e0bffe17 	ldw	r2,-8(fp)
  80f530:	10800217 	ldw	r2,8(r2)
  80f534:	1000061e 	bne	r2,zero,80f550 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80f538:	080f4bc0 	call	80f4bc <alt_get_errno>
  80f53c:	1007883a 	mov	r3,r2
  80f540:	00800584 	movi	r2,22
  80f544:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80f548:	00bffa84 	movi	r2,-22
  80f54c:	00001306 	br	80f59c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80f550:	e0bffe17 	ldw	r2,-8(fp)
  80f554:	e0ffff17 	ldw	r3,-4(fp)
  80f558:	e0fffc15 	stw	r3,-16(fp)
  80f55c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80f560:	e0bffd17 	ldw	r2,-12(fp)
  80f564:	e0fffc17 	ldw	r3,-16(fp)
  80f568:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80f56c:	e0bffc17 	ldw	r2,-16(fp)
  80f570:	10c00017 	ldw	r3,0(r2)
  80f574:	e0bffd17 	ldw	r2,-12(fp)
  80f578:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80f57c:	e0bffc17 	ldw	r2,-16(fp)
  80f580:	10800017 	ldw	r2,0(r2)
  80f584:	e0fffd17 	ldw	r3,-12(fp)
  80f588:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80f58c:	e0bffc17 	ldw	r2,-16(fp)
  80f590:	e0fffd17 	ldw	r3,-12(fp)
  80f594:	10c00015 	stw	r3,0(r2)

  return 0;  
  80f598:	0005883a 	mov	r2,zero
}
  80f59c:	e037883a 	mov	sp,fp
  80f5a0:	dfc00117 	ldw	ra,4(sp)
  80f5a4:	df000017 	ldw	fp,0(sp)
  80f5a8:	dec00204 	addi	sp,sp,8
  80f5ac:	f800283a 	ret

0080f5b0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80f5b0:	defffd04 	addi	sp,sp,-12
  80f5b4:	dfc00215 	stw	ra,8(sp)
  80f5b8:	df000115 	stw	fp,4(sp)
  80f5bc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80f5c0:	00802074 	movhi	r2,129
  80f5c4:	10812a04 	addi	r2,r2,1192
  80f5c8:	e0bfff15 	stw	r2,-4(fp)
  80f5cc:	00000606 	br	80f5e8 <_do_ctors+0x38>
        (*ctor) (); 
  80f5d0:	e0bfff17 	ldw	r2,-4(fp)
  80f5d4:	10800017 	ldw	r2,0(r2)
  80f5d8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80f5dc:	e0bfff17 	ldw	r2,-4(fp)
  80f5e0:	10bfff04 	addi	r2,r2,-4
  80f5e4:	e0bfff15 	stw	r2,-4(fp)
  80f5e8:	e0ffff17 	ldw	r3,-4(fp)
  80f5ec:	00802074 	movhi	r2,129
  80f5f0:	10812b04 	addi	r2,r2,1196
  80f5f4:	18bff62e 	bgeu	r3,r2,80f5d0 <__alt_data_end+0xff80f5d0>
        (*ctor) (); 
}
  80f5f8:	e037883a 	mov	sp,fp
  80f5fc:	dfc00117 	ldw	ra,4(sp)
  80f600:	df000017 	ldw	fp,0(sp)
  80f604:	dec00204 	addi	sp,sp,8
  80f608:	f800283a 	ret

0080f60c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80f60c:	defffd04 	addi	sp,sp,-12
  80f610:	dfc00215 	stw	ra,8(sp)
  80f614:	df000115 	stw	fp,4(sp)
  80f618:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80f61c:	00802074 	movhi	r2,129
  80f620:	10812a04 	addi	r2,r2,1192
  80f624:	e0bfff15 	stw	r2,-4(fp)
  80f628:	00000606 	br	80f644 <_do_dtors+0x38>
        (*dtor) (); 
  80f62c:	e0bfff17 	ldw	r2,-4(fp)
  80f630:	10800017 	ldw	r2,0(r2)
  80f634:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80f638:	e0bfff17 	ldw	r2,-4(fp)
  80f63c:	10bfff04 	addi	r2,r2,-4
  80f640:	e0bfff15 	stw	r2,-4(fp)
  80f644:	e0ffff17 	ldw	r3,-4(fp)
  80f648:	00802074 	movhi	r2,129
  80f64c:	10812b04 	addi	r2,r2,1196
  80f650:	18bff62e 	bgeu	r3,r2,80f62c <__alt_data_end+0xff80f62c>
        (*dtor) (); 
}
  80f654:	e037883a 	mov	sp,fp
  80f658:	dfc00117 	ldw	ra,4(sp)
  80f65c:	df000017 	ldw	fp,0(sp)
  80f660:	dec00204 	addi	sp,sp,8
  80f664:	f800283a 	ret

0080f668 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80f668:	defffe04 	addi	sp,sp,-8
  80f66c:	dfc00115 	stw	ra,4(sp)
  80f670:	df000015 	stw	fp,0(sp)
  80f674:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80f678:	0009883a 	mov	r4,zero
  80f67c:	01440004 	movi	r5,4096
  80f680:	080ffe00 	call	80ffe0 <alt_icache_flush>
#endif
}
  80f684:	e037883a 	mov	sp,fp
  80f688:	dfc00117 	ldw	ra,4(sp)
  80f68c:	df000017 	ldw	fp,0(sp)
  80f690:	dec00204 	addi	sp,sp,8
  80f694:	f800283a 	ret

0080f698 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80f698:	defff904 	addi	sp,sp,-28
  80f69c:	dfc00615 	stw	ra,24(sp)
  80f6a0:	df000515 	stw	fp,20(sp)
  80f6a4:	df000504 	addi	fp,sp,20
  80f6a8:	e13ffc15 	stw	r4,-16(fp)
  80f6ac:	e17ffd15 	stw	r5,-12(fp)
  80f6b0:	e1bffe15 	stw	r6,-8(fp)
  80f6b4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80f6b8:	e13ffd17 	ldw	r4,-12(fp)
  80f6bc:	e17ffe17 	ldw	r5,-8(fp)
  80f6c0:	e1bfff17 	ldw	r6,-4(fp)
  80f6c4:	080f8ec0 	call	80f8ec <open>
  80f6c8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80f6cc:	e0bffb17 	ldw	r2,-20(fp)
  80f6d0:	10001c16 	blt	r2,zero,80f744 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  80f6d4:	00802074 	movhi	r2,129
  80f6d8:	1084fb04 	addi	r2,r2,5100
  80f6dc:	e0fffb17 	ldw	r3,-20(fp)
  80f6e0:	18c00324 	muli	r3,r3,12
  80f6e4:	10c5883a 	add	r2,r2,r3
  80f6e8:	10c00017 	ldw	r3,0(r2)
  80f6ec:	e0bffc17 	ldw	r2,-16(fp)
  80f6f0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80f6f4:	00802074 	movhi	r2,129
  80f6f8:	1084fb04 	addi	r2,r2,5100
  80f6fc:	e0fffb17 	ldw	r3,-20(fp)
  80f700:	18c00324 	muli	r3,r3,12
  80f704:	18c00104 	addi	r3,r3,4
  80f708:	10c5883a 	add	r2,r2,r3
  80f70c:	10c00017 	ldw	r3,0(r2)
  80f710:	e0bffc17 	ldw	r2,-16(fp)
  80f714:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80f718:	00802074 	movhi	r2,129
  80f71c:	1084fb04 	addi	r2,r2,5100
  80f720:	e0fffb17 	ldw	r3,-20(fp)
  80f724:	18c00324 	muli	r3,r3,12
  80f728:	18c00204 	addi	r3,r3,8
  80f72c:	10c5883a 	add	r2,r2,r3
  80f730:	10c00017 	ldw	r3,0(r2)
  80f734:	e0bffc17 	ldw	r2,-16(fp)
  80f738:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80f73c:	e13ffb17 	ldw	r4,-20(fp)
  80f740:	080d5fc0 	call	80d5fc <alt_release_fd>
  }
} 
  80f744:	e037883a 	mov	sp,fp
  80f748:	dfc00117 	ldw	ra,4(sp)
  80f74c:	df000017 	ldw	fp,0(sp)
  80f750:	dec00204 	addi	sp,sp,8
  80f754:	f800283a 	ret

0080f758 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80f758:	defffb04 	addi	sp,sp,-20
  80f75c:	dfc00415 	stw	ra,16(sp)
  80f760:	df000315 	stw	fp,12(sp)
  80f764:	df000304 	addi	fp,sp,12
  80f768:	e13ffd15 	stw	r4,-12(fp)
  80f76c:	e17ffe15 	stw	r5,-8(fp)
  80f770:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80f774:	01002074 	movhi	r4,129
  80f778:	2104fe04 	addi	r4,r4,5112
  80f77c:	e17ffd17 	ldw	r5,-12(fp)
  80f780:	01800044 	movi	r6,1
  80f784:	01c07fc4 	movi	r7,511
  80f788:	080f6980 	call	80f698 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80f78c:	01002074 	movhi	r4,129
  80f790:	2104fb04 	addi	r4,r4,5100
  80f794:	e17ffe17 	ldw	r5,-8(fp)
  80f798:	000d883a 	mov	r6,zero
  80f79c:	01c07fc4 	movi	r7,511
  80f7a0:	080f6980 	call	80f698 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80f7a4:	01002074 	movhi	r4,129
  80f7a8:	21050104 	addi	r4,r4,5124
  80f7ac:	e17fff17 	ldw	r5,-4(fp)
  80f7b0:	01800044 	movi	r6,1
  80f7b4:	01c07fc4 	movi	r7,511
  80f7b8:	080f6980 	call	80f698 <alt_open_fd>
}  
  80f7bc:	e037883a 	mov	sp,fp
  80f7c0:	dfc00117 	ldw	ra,4(sp)
  80f7c4:	df000017 	ldw	fp,0(sp)
  80f7c8:	dec00204 	addi	sp,sp,8
  80f7cc:	f800283a 	ret

0080f7d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f7d0:	defffe04 	addi	sp,sp,-8
  80f7d4:	dfc00115 	stw	ra,4(sp)
  80f7d8:	df000015 	stw	fp,0(sp)
  80f7dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f7e0:	00802074 	movhi	r2,129
  80f7e4:	10860204 	addi	r2,r2,6152
  80f7e8:	10800017 	ldw	r2,0(r2)
  80f7ec:	10000526 	beq	r2,zero,80f804 <alt_get_errno+0x34>
  80f7f0:	00802074 	movhi	r2,129
  80f7f4:	10860204 	addi	r2,r2,6152
  80f7f8:	10800017 	ldw	r2,0(r2)
  80f7fc:	103ee83a 	callr	r2
  80f800:	00000206 	br	80f80c <alt_get_errno+0x3c>
  80f804:	00802074 	movhi	r2,129
  80f808:	10895404 	addi	r2,r2,9552
}
  80f80c:	e037883a 	mov	sp,fp
  80f810:	dfc00117 	ldw	ra,4(sp)
  80f814:	df000017 	ldw	fp,0(sp)
  80f818:	dec00204 	addi	sp,sp,8
  80f81c:	f800283a 	ret

0080f820 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80f820:	defffd04 	addi	sp,sp,-12
  80f824:	df000215 	stw	fp,8(sp)
  80f828:	df000204 	addi	fp,sp,8
  80f82c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80f830:	e0bfff17 	ldw	r2,-4(fp)
  80f834:	10800217 	ldw	r2,8(r2)
  80f838:	10d00034 	orhi	r3,r2,16384
  80f83c:	e0bfff17 	ldw	r2,-4(fp)
  80f840:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f844:	e03ffe15 	stw	zero,-8(fp)
  80f848:	00001d06 	br	80f8c0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80f84c:	00802074 	movhi	r2,129
  80f850:	1084fb04 	addi	r2,r2,5100
  80f854:	e0fffe17 	ldw	r3,-8(fp)
  80f858:	18c00324 	muli	r3,r3,12
  80f85c:	10c5883a 	add	r2,r2,r3
  80f860:	10c00017 	ldw	r3,0(r2)
  80f864:	e0bfff17 	ldw	r2,-4(fp)
  80f868:	10800017 	ldw	r2,0(r2)
  80f86c:	1880111e 	bne	r3,r2,80f8b4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80f870:	00802074 	movhi	r2,129
  80f874:	1084fb04 	addi	r2,r2,5100
  80f878:	e0fffe17 	ldw	r3,-8(fp)
  80f87c:	18c00324 	muli	r3,r3,12
  80f880:	18c00204 	addi	r3,r3,8
  80f884:	10c5883a 	add	r2,r2,r3
  80f888:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80f88c:	1000090e 	bge	r2,zero,80f8b4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80f890:	e0bffe17 	ldw	r2,-8(fp)
  80f894:	10c00324 	muli	r3,r2,12
  80f898:	00802074 	movhi	r2,129
  80f89c:	1084fb04 	addi	r2,r2,5100
  80f8a0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80f8a4:	e0bfff17 	ldw	r2,-4(fp)
  80f8a8:	18800226 	beq	r3,r2,80f8b4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80f8ac:	00bffcc4 	movi	r2,-13
  80f8b0:	00000a06 	br	80f8dc <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f8b4:	e0bffe17 	ldw	r2,-8(fp)
  80f8b8:	10800044 	addi	r2,r2,1
  80f8bc:	e0bffe15 	stw	r2,-8(fp)
  80f8c0:	00802074 	movhi	r2,129
  80f8c4:	10860104 	addi	r2,r2,6148
  80f8c8:	10800017 	ldw	r2,0(r2)
  80f8cc:	1007883a 	mov	r3,r2
  80f8d0:	e0bffe17 	ldw	r2,-8(fp)
  80f8d4:	18bfdd2e 	bgeu	r3,r2,80f84c <__alt_data_end+0xff80f84c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80f8d8:	0005883a 	mov	r2,zero
}
  80f8dc:	e037883a 	mov	sp,fp
  80f8e0:	df000017 	ldw	fp,0(sp)
  80f8e4:	dec00104 	addi	sp,sp,4
  80f8e8:	f800283a 	ret

0080f8ec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80f8ec:	defff604 	addi	sp,sp,-40
  80f8f0:	dfc00915 	stw	ra,36(sp)
  80f8f4:	df000815 	stw	fp,32(sp)
  80f8f8:	df000804 	addi	fp,sp,32
  80f8fc:	e13ffd15 	stw	r4,-12(fp)
  80f900:	e17ffe15 	stw	r5,-8(fp)
  80f904:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80f908:	00bfffc4 	movi	r2,-1
  80f90c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80f910:	00bffb44 	movi	r2,-19
  80f914:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80f918:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80f91c:	e13ffd17 	ldw	r4,-12(fp)
  80f920:	01402074 	movhi	r5,129
  80f924:	2945ff04 	addi	r5,r5,6140
  80f928:	080fd880 	call	80fd88 <alt_find_dev>
  80f92c:	e0bff815 	stw	r2,-32(fp)
  80f930:	e0bff817 	ldw	r2,-32(fp)
  80f934:	1000051e 	bne	r2,zero,80f94c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80f938:	e13ffd17 	ldw	r4,-12(fp)
  80f93c:	080fe180 	call	80fe18 <alt_find_file>
  80f940:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80f944:	00800044 	movi	r2,1
  80f948:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80f94c:	e0bff817 	ldw	r2,-32(fp)
  80f950:	10002926 	beq	r2,zero,80f9f8 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80f954:	e13ff817 	ldw	r4,-32(fp)
  80f958:	080ff2c0 	call	80ff2c <alt_get_fd>
  80f95c:	e0bff915 	stw	r2,-28(fp)
  80f960:	e0bff917 	ldw	r2,-28(fp)
  80f964:	1000030e 	bge	r2,zero,80f974 <open+0x88>
    {
      status = index;
  80f968:	e0bff917 	ldw	r2,-28(fp)
  80f96c:	e0bffa15 	stw	r2,-24(fp)
  80f970:	00002306 	br	80fa00 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
  80f974:	e0bff917 	ldw	r2,-28(fp)
  80f978:	10c00324 	muli	r3,r2,12
  80f97c:	00802074 	movhi	r2,129
  80f980:	1084fb04 	addi	r2,r2,5100
  80f984:	1885883a 	add	r2,r3,r2
  80f988:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80f98c:	e0fffe17 	ldw	r3,-8(fp)
  80f990:	00900034 	movhi	r2,16384
  80f994:	10bfffc4 	addi	r2,r2,-1
  80f998:	1886703a 	and	r3,r3,r2
  80f99c:	e0bffc17 	ldw	r2,-16(fp)
  80f9a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80f9a4:	e0bffb17 	ldw	r2,-20(fp)
  80f9a8:	1000051e 	bne	r2,zero,80f9c0 <open+0xd4>
  80f9ac:	e13ffc17 	ldw	r4,-16(fp)
  80f9b0:	080f8200 	call	80f820 <alt_file_locked>
  80f9b4:	e0bffa15 	stw	r2,-24(fp)
  80f9b8:	e0bffa17 	ldw	r2,-24(fp)
  80f9bc:	10001016 	blt	r2,zero,80fa00 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80f9c0:	e0bff817 	ldw	r2,-32(fp)
  80f9c4:	10800317 	ldw	r2,12(r2)
  80f9c8:	10000826 	beq	r2,zero,80f9ec <open+0x100>
  80f9cc:	e0bff817 	ldw	r2,-32(fp)
  80f9d0:	10800317 	ldw	r2,12(r2)
  80f9d4:	e13ffc17 	ldw	r4,-16(fp)
  80f9d8:	e17ffd17 	ldw	r5,-12(fp)
  80f9dc:	e1bffe17 	ldw	r6,-8(fp)
  80f9e0:	e1ffff17 	ldw	r7,-4(fp)
  80f9e4:	103ee83a 	callr	r2
  80f9e8:	00000106 	br	80f9f0 <open+0x104>
  80f9ec:	0005883a 	mov	r2,zero
  80f9f0:	e0bffa15 	stw	r2,-24(fp)
  80f9f4:	00000206 	br	80fa00 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80f9f8:	00bffb44 	movi	r2,-19
  80f9fc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80fa00:	e0bffa17 	ldw	r2,-24(fp)
  80fa04:	1000090e 	bge	r2,zero,80fa2c <open+0x140>
  {
    alt_release_fd (index);  
  80fa08:	e13ff917 	ldw	r4,-28(fp)
  80fa0c:	080d5fc0 	call	80d5fc <alt_release_fd>
    ALT_ERRNO = -status;
  80fa10:	080f7d00 	call	80f7d0 <alt_get_errno>
  80fa14:	1007883a 	mov	r3,r2
  80fa18:	e0bffa17 	ldw	r2,-24(fp)
  80fa1c:	0085c83a 	sub	r2,zero,r2
  80fa20:	18800015 	stw	r2,0(r3)
    return -1;
  80fa24:	00bfffc4 	movi	r2,-1
  80fa28:	00000106 	br	80fa30 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
  80fa2c:	e0bff917 	ldw	r2,-28(fp)
}
  80fa30:	e037883a 	mov	sp,fp
  80fa34:	dfc00117 	ldw	ra,4(sp)
  80fa38:	df000017 	ldw	fp,0(sp)
  80fa3c:	dec00204 	addi	sp,sp,8
  80fa40:	f800283a 	ret

0080fa44 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80fa44:	defffa04 	addi	sp,sp,-24
  80fa48:	df000515 	stw	fp,20(sp)
  80fa4c:	df000504 	addi	fp,sp,20
  80fa50:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fa54:	0005303a 	rdctl	r2,status
  80fa58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fa5c:	e0fffc17 	ldw	r3,-16(fp)
  80fa60:	00bfff84 	movi	r2,-2
  80fa64:	1884703a 	and	r2,r3,r2
  80fa68:	1001703a 	wrctl	status,r2
  
  return context;
  80fa6c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80fa70:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80fa74:	e0bfff17 	ldw	r2,-4(fp)
  80fa78:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80fa7c:	e0bffd17 	ldw	r2,-12(fp)
  80fa80:	10800017 	ldw	r2,0(r2)
  80fa84:	e0fffd17 	ldw	r3,-12(fp)
  80fa88:	18c00117 	ldw	r3,4(r3)
  80fa8c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80fa90:	e0bffd17 	ldw	r2,-12(fp)
  80fa94:	10800117 	ldw	r2,4(r2)
  80fa98:	e0fffd17 	ldw	r3,-12(fp)
  80fa9c:	18c00017 	ldw	r3,0(r3)
  80faa0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80faa4:	e0bffd17 	ldw	r2,-12(fp)
  80faa8:	e0fffd17 	ldw	r3,-12(fp)
  80faac:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80fab0:	e0bffd17 	ldw	r2,-12(fp)
  80fab4:	e0fffd17 	ldw	r3,-12(fp)
  80fab8:	10c00015 	stw	r3,0(r2)
  80fabc:	e0bffb17 	ldw	r2,-20(fp)
  80fac0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fac4:	e0bffe17 	ldw	r2,-8(fp)
  80fac8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80facc:	e037883a 	mov	sp,fp
  80fad0:	df000017 	ldw	fp,0(sp)
  80fad4:	dec00104 	addi	sp,sp,4
  80fad8:	f800283a 	ret

0080fadc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80fadc:	defffb04 	addi	sp,sp,-20
  80fae0:	dfc00415 	stw	ra,16(sp)
  80fae4:	df000315 	stw	fp,12(sp)
  80fae8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80faec:	d0a00f17 	ldw	r2,-32708(gp)
  80faf0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80faf4:	d0a36317 	ldw	r2,-29300(gp)
  80faf8:	10800044 	addi	r2,r2,1
  80fafc:	d0a36315 	stw	r2,-29300(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80fb00:	00002e06 	br	80fbbc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80fb04:	e0bffd17 	ldw	r2,-12(fp)
  80fb08:	10800017 	ldw	r2,0(r2)
  80fb0c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80fb10:	e0bffd17 	ldw	r2,-12(fp)
  80fb14:	10800403 	ldbu	r2,16(r2)
  80fb18:	10803fcc 	andi	r2,r2,255
  80fb1c:	10000426 	beq	r2,zero,80fb30 <alt_tick+0x54>
  80fb20:	d0a36317 	ldw	r2,-29300(gp)
  80fb24:	1000021e 	bne	r2,zero,80fb30 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80fb28:	e0bffd17 	ldw	r2,-12(fp)
  80fb2c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80fb30:	e0bffd17 	ldw	r2,-12(fp)
  80fb34:	10800217 	ldw	r2,8(r2)
  80fb38:	d0e36317 	ldw	r3,-29300(gp)
  80fb3c:	18801d36 	bltu	r3,r2,80fbb4 <alt_tick+0xd8>
  80fb40:	e0bffd17 	ldw	r2,-12(fp)
  80fb44:	10800403 	ldbu	r2,16(r2)
  80fb48:	10803fcc 	andi	r2,r2,255
  80fb4c:	1000191e 	bne	r2,zero,80fbb4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80fb50:	e0bffd17 	ldw	r2,-12(fp)
  80fb54:	10800317 	ldw	r2,12(r2)
  80fb58:	e0fffd17 	ldw	r3,-12(fp)
  80fb5c:	18c00517 	ldw	r3,20(r3)
  80fb60:	1809883a 	mov	r4,r3
  80fb64:	103ee83a 	callr	r2
  80fb68:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80fb6c:	e0bfff17 	ldw	r2,-4(fp)
  80fb70:	1000031e 	bne	r2,zero,80fb80 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80fb74:	e13ffd17 	ldw	r4,-12(fp)
  80fb78:	080fa440 	call	80fa44 <alt_alarm_stop>
  80fb7c:	00000d06 	br	80fbb4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80fb80:	e0bffd17 	ldw	r2,-12(fp)
  80fb84:	10c00217 	ldw	r3,8(r2)
  80fb88:	e0bfff17 	ldw	r2,-4(fp)
  80fb8c:	1887883a 	add	r3,r3,r2
  80fb90:	e0bffd17 	ldw	r2,-12(fp)
  80fb94:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80fb98:	e0bffd17 	ldw	r2,-12(fp)
  80fb9c:	10c00217 	ldw	r3,8(r2)
  80fba0:	d0a36317 	ldw	r2,-29300(gp)
  80fba4:	1880032e 	bgeu	r3,r2,80fbb4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80fba8:	e0bffd17 	ldw	r2,-12(fp)
  80fbac:	00c00044 	movi	r3,1
  80fbb0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80fbb4:	e0bffe17 	ldw	r2,-8(fp)
  80fbb8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80fbbc:	e0fffd17 	ldw	r3,-12(fp)
  80fbc0:	d0a00f04 	addi	r2,gp,-32708
  80fbc4:	18bfcf1e 	bne	r3,r2,80fb04 <__alt_data_end+0xff80fb04>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80fbc8:	0001883a 	nop
}
  80fbcc:	e037883a 	mov	sp,fp
  80fbd0:	dfc00117 	ldw	ra,4(sp)
  80fbd4:	df000017 	ldw	fp,0(sp)
  80fbd8:	dec00204 	addi	sp,sp,8
  80fbdc:	f800283a 	ret

0080fbe0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80fbe0:	defffd04 	addi	sp,sp,-12
  80fbe4:	dfc00215 	stw	ra,8(sp)
  80fbe8:	df000115 	stw	fp,4(sp)
  80fbec:	df000104 	addi	fp,sp,4
  80fbf0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80fbf4:	e13fff17 	ldw	r4,-4(fp)
  80fbf8:	080fc300 	call	80fc30 <alt_busy_sleep>
}
  80fbfc:	e037883a 	mov	sp,fp
  80fc00:	dfc00117 	ldw	ra,4(sp)
  80fc04:	df000017 	ldw	fp,0(sp)
  80fc08:	dec00204 	addi	sp,sp,8
  80fc0c:	f800283a 	ret

0080fc10 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80fc10:	deffff04 	addi	sp,sp,-4
  80fc14:	df000015 	stw	fp,0(sp)
  80fc18:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80fc1c:	000170fa 	wrctl	ienable,zero
}
  80fc20:	e037883a 	mov	sp,fp
  80fc24:	df000017 	ldw	fp,0(sp)
  80fc28:	dec00104 	addi	sp,sp,4
  80fc2c:	f800283a 	ret

0080fc30 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80fc30:	defffa04 	addi	sp,sp,-24
  80fc34:	dfc00515 	stw	ra,20(sp)
  80fc38:	df000415 	stw	fp,16(sp)
  80fc3c:	df000404 	addi	fp,sp,16
  80fc40:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  80fc44:	008000c4 	movi	r2,3
  80fc48:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  80fc4c:	e0fffd17 	ldw	r3,-12(fp)
  80fc50:	008003f4 	movhi	r2,15
  80fc54:	10909004 	addi	r2,r2,16960
  80fc58:	1885383a 	mul	r2,r3,r2
  80fc5c:	0100bef4 	movhi	r4,763
  80fc60:	213c2004 	addi	r4,r4,-3968
  80fc64:	100b883a 	mov	r5,r2
  80fc68:	080a6f00 	call	80a6f0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  80fc6c:	01200034 	movhi	r4,32768
  80fc70:	213fffc4 	addi	r4,r4,-1
  80fc74:	100b883a 	mov	r5,r2
  80fc78:	080a6f00 	call	80a6f0 <__udivsi3>
  80fc7c:	e13fff17 	ldw	r4,-4(fp)
  80fc80:	100b883a 	mov	r5,r2
  80fc84:	080a6f00 	call	80a6f0 <__udivsi3>
  80fc88:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80fc8c:	e0bffe17 	ldw	r2,-8(fp)
  80fc90:	10002a26 	beq	r2,zero,80fd3c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  80fc94:	e03ffc15 	stw	zero,-16(fp)
  80fc98:	00001706 	br	80fcf8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80fc9c:	00a00034 	movhi	r2,32768
  80fca0:	10bfffc4 	addi	r2,r2,-1
  80fca4:	10bfffc4 	addi	r2,r2,-1
  80fca8:	103ffe1e 	bne	r2,zero,80fca4 <__alt_data_end+0xff80fca4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  80fcac:	e0fffd17 	ldw	r3,-12(fp)
  80fcb0:	008003f4 	movhi	r2,15
  80fcb4:	10909004 	addi	r2,r2,16960
  80fcb8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80fcbc:	0100bef4 	movhi	r4,763
  80fcc0:	213c2004 	addi	r4,r4,-3968
  80fcc4:	100b883a 	mov	r5,r2
  80fcc8:	080a6f00 	call	80a6f0 <__udivsi3>
  80fccc:	01200034 	movhi	r4,32768
  80fcd0:	213fffc4 	addi	r4,r4,-1
  80fcd4:	100b883a 	mov	r5,r2
  80fcd8:	080a6f00 	call	80a6f0 <__udivsi3>
  80fcdc:	1007883a 	mov	r3,r2
  80fce0:	e0bfff17 	ldw	r2,-4(fp)
  80fce4:	10c5c83a 	sub	r2,r2,r3
  80fce8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80fcec:	e0bffc17 	ldw	r2,-16(fp)
  80fcf0:	10800044 	addi	r2,r2,1
  80fcf4:	e0bffc15 	stw	r2,-16(fp)
  80fcf8:	e0fffc17 	ldw	r3,-16(fp)
  80fcfc:	e0bffe17 	ldw	r2,-8(fp)
  80fd00:	18bfe616 	blt	r3,r2,80fc9c <__alt_data_end+0xff80fc9c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80fd04:	e0fffd17 	ldw	r3,-12(fp)
  80fd08:	008003f4 	movhi	r2,15
  80fd0c:	10909004 	addi	r2,r2,16960
  80fd10:	1885383a 	mul	r2,r3,r2
  80fd14:	0100bef4 	movhi	r4,763
  80fd18:	213c2004 	addi	r4,r4,-3968
  80fd1c:	100b883a 	mov	r5,r2
  80fd20:	080a6f00 	call	80a6f0 <__udivsi3>
  80fd24:	1007883a 	mov	r3,r2
  80fd28:	e0bfff17 	ldw	r2,-4(fp)
  80fd2c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80fd30:	10bfffc4 	addi	r2,r2,-1
  80fd34:	103ffe1e 	bne	r2,zero,80fd30 <__alt_data_end+0xff80fd30>
  80fd38:	00000d06 	br	80fd70 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80fd3c:	e0fffd17 	ldw	r3,-12(fp)
  80fd40:	008003f4 	movhi	r2,15
  80fd44:	10909004 	addi	r2,r2,16960
  80fd48:	1885383a 	mul	r2,r3,r2
  80fd4c:	0100bef4 	movhi	r4,763
  80fd50:	213c2004 	addi	r4,r4,-3968
  80fd54:	100b883a 	mov	r5,r2
  80fd58:	080a6f00 	call	80a6f0 <__udivsi3>
  80fd5c:	1007883a 	mov	r3,r2
  80fd60:	e0bfff17 	ldw	r2,-4(fp)
  80fd64:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80fd68:	10bfffc4 	addi	r2,r2,-1
  80fd6c:	00bffe16 	blt	zero,r2,80fd68 <__alt_data_end+0xff80fd68>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80fd70:	0005883a 	mov	r2,zero
}
  80fd74:	e037883a 	mov	sp,fp
  80fd78:	dfc00117 	ldw	ra,4(sp)
  80fd7c:	df000017 	ldw	fp,0(sp)
  80fd80:	dec00204 	addi	sp,sp,8
  80fd84:	f800283a 	ret

0080fd88 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80fd88:	defffa04 	addi	sp,sp,-24
  80fd8c:	dfc00515 	stw	ra,20(sp)
  80fd90:	df000415 	stw	fp,16(sp)
  80fd94:	df000404 	addi	fp,sp,16
  80fd98:	e13ffe15 	stw	r4,-8(fp)
  80fd9c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80fda0:	e0bfff17 	ldw	r2,-4(fp)
  80fda4:	10800017 	ldw	r2,0(r2)
  80fda8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80fdac:	e13ffe17 	ldw	r4,-8(fp)
  80fdb0:	0800a640 	call	800a64 <strlen>
  80fdb4:	10800044 	addi	r2,r2,1
  80fdb8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80fdbc:	00000d06 	br	80fdf4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80fdc0:	e0bffc17 	ldw	r2,-16(fp)
  80fdc4:	10c00217 	ldw	r3,8(r2)
  80fdc8:	e0bffd17 	ldw	r2,-12(fp)
  80fdcc:	1809883a 	mov	r4,r3
  80fdd0:	e17ffe17 	ldw	r5,-8(fp)
  80fdd4:	100d883a 	mov	r6,r2
  80fdd8:	08101540 	call	810154 <memcmp>
  80fddc:	1000021e 	bne	r2,zero,80fde8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80fde0:	e0bffc17 	ldw	r2,-16(fp)
  80fde4:	00000706 	br	80fe04 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80fde8:	e0bffc17 	ldw	r2,-16(fp)
  80fdec:	10800017 	ldw	r2,0(r2)
  80fdf0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80fdf4:	e0fffc17 	ldw	r3,-16(fp)
  80fdf8:	e0bfff17 	ldw	r2,-4(fp)
  80fdfc:	18bff01e 	bne	r3,r2,80fdc0 <__alt_data_end+0xff80fdc0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80fe00:	0005883a 	mov	r2,zero
}
  80fe04:	e037883a 	mov	sp,fp
  80fe08:	dfc00117 	ldw	ra,4(sp)
  80fe0c:	df000017 	ldw	fp,0(sp)
  80fe10:	dec00204 	addi	sp,sp,8
  80fe14:	f800283a 	ret

0080fe18 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80fe18:	defffb04 	addi	sp,sp,-20
  80fe1c:	dfc00415 	stw	ra,16(sp)
  80fe20:	df000315 	stw	fp,12(sp)
  80fe24:	df000304 	addi	fp,sp,12
  80fe28:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80fe2c:	00802074 	movhi	r2,129
  80fe30:	1085fd04 	addi	r2,r2,6132
  80fe34:	10800017 	ldw	r2,0(r2)
  80fe38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80fe3c:	00003106 	br	80ff04 <alt_find_file+0xec>
  {
    len = strlen(next->name);
  80fe40:	e0bffd17 	ldw	r2,-12(fp)
  80fe44:	10800217 	ldw	r2,8(r2)
  80fe48:	1009883a 	mov	r4,r2
  80fe4c:	0800a640 	call	800a64 <strlen>
  80fe50:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80fe54:	e0bffd17 	ldw	r2,-12(fp)
  80fe58:	10c00217 	ldw	r3,8(r2)
  80fe5c:	e0bffe17 	ldw	r2,-8(fp)
  80fe60:	10bfffc4 	addi	r2,r2,-1
  80fe64:	1885883a 	add	r2,r3,r2
  80fe68:	10800003 	ldbu	r2,0(r2)
  80fe6c:	10803fcc 	andi	r2,r2,255
  80fe70:	1080201c 	xori	r2,r2,128
  80fe74:	10bfe004 	addi	r2,r2,-128
  80fe78:	10800bd8 	cmpnei	r2,r2,47
  80fe7c:	1000031e 	bne	r2,zero,80fe8c <alt_find_file+0x74>
    {
      len -= 1;
  80fe80:	e0bffe17 	ldw	r2,-8(fp)
  80fe84:	10bfffc4 	addi	r2,r2,-1
  80fe88:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80fe8c:	e0bffe17 	ldw	r2,-8(fp)
  80fe90:	e0ffff17 	ldw	r3,-4(fp)
  80fe94:	1885883a 	add	r2,r3,r2
  80fe98:	10800003 	ldbu	r2,0(r2)
  80fe9c:	10803fcc 	andi	r2,r2,255
  80fea0:	1080201c 	xori	r2,r2,128
  80fea4:	10bfe004 	addi	r2,r2,-128
  80fea8:	10800be0 	cmpeqi	r2,r2,47
  80feac:	1000081e 	bne	r2,zero,80fed0 <alt_find_file+0xb8>
  80feb0:	e0bffe17 	ldw	r2,-8(fp)
  80feb4:	e0ffff17 	ldw	r3,-4(fp)
  80feb8:	1885883a 	add	r2,r3,r2
  80febc:	10800003 	ldbu	r2,0(r2)
  80fec0:	10803fcc 	andi	r2,r2,255
  80fec4:	1080201c 	xori	r2,r2,128
  80fec8:	10bfe004 	addi	r2,r2,-128
  80fecc:	10000a1e 	bne	r2,zero,80fef8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  80fed0:	e0bffd17 	ldw	r2,-12(fp)
  80fed4:	10c00217 	ldw	r3,8(r2)
  80fed8:	e0bffe17 	ldw	r2,-8(fp)
  80fedc:	1809883a 	mov	r4,r3
  80fee0:	e17fff17 	ldw	r5,-4(fp)
  80fee4:	100d883a 	mov	r6,r2
  80fee8:	08101540 	call	810154 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80feec:	1000021e 	bne	r2,zero,80fef8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80fef0:	e0bffd17 	ldw	r2,-12(fp)
  80fef4:	00000806 	br	80ff18 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  80fef8:	e0bffd17 	ldw	r2,-12(fp)
  80fefc:	10800017 	ldw	r2,0(r2)
  80ff00:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80ff04:	e0fffd17 	ldw	r3,-12(fp)
  80ff08:	00802074 	movhi	r2,129
  80ff0c:	1085fd04 	addi	r2,r2,6132
  80ff10:	18bfcb1e 	bne	r3,r2,80fe40 <__alt_data_end+0xff80fe40>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80ff14:	0005883a 	mov	r2,zero
}
  80ff18:	e037883a 	mov	sp,fp
  80ff1c:	dfc00117 	ldw	ra,4(sp)
  80ff20:	df000017 	ldw	fp,0(sp)
  80ff24:	dec00204 	addi	sp,sp,8
  80ff28:	f800283a 	ret

0080ff2c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80ff2c:	defffc04 	addi	sp,sp,-16
  80ff30:	df000315 	stw	fp,12(sp)
  80ff34:	df000304 	addi	fp,sp,12
  80ff38:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80ff3c:	00bffa04 	movi	r2,-24
  80ff40:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80ff44:	e03ffd15 	stw	zero,-12(fp)
  80ff48:	00001d06 	br	80ffc0 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  80ff4c:	00802074 	movhi	r2,129
  80ff50:	1084fb04 	addi	r2,r2,5100
  80ff54:	e0fffd17 	ldw	r3,-12(fp)
  80ff58:	18c00324 	muli	r3,r3,12
  80ff5c:	10c5883a 	add	r2,r2,r3
  80ff60:	10800017 	ldw	r2,0(r2)
  80ff64:	1000131e 	bne	r2,zero,80ffb4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  80ff68:	00802074 	movhi	r2,129
  80ff6c:	1084fb04 	addi	r2,r2,5100
  80ff70:	e0fffd17 	ldw	r3,-12(fp)
  80ff74:	18c00324 	muli	r3,r3,12
  80ff78:	10c5883a 	add	r2,r2,r3
  80ff7c:	e0ffff17 	ldw	r3,-4(fp)
  80ff80:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  80ff84:	00802074 	movhi	r2,129
  80ff88:	10860104 	addi	r2,r2,6148
  80ff8c:	10c00017 	ldw	r3,0(r2)
  80ff90:	e0bffd17 	ldw	r2,-12(fp)
  80ff94:	1880040e 	bge	r3,r2,80ffa8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  80ff98:	00802074 	movhi	r2,129
  80ff9c:	10860104 	addi	r2,r2,6148
  80ffa0:	e0fffd17 	ldw	r3,-12(fp)
  80ffa4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  80ffa8:	e0bffd17 	ldw	r2,-12(fp)
  80ffac:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  80ffb0:	00000606 	br	80ffcc <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80ffb4:	e0bffd17 	ldw	r2,-12(fp)
  80ffb8:	10800044 	addi	r2,r2,1
  80ffbc:	e0bffd15 	stw	r2,-12(fp)
  80ffc0:	e0bffd17 	ldw	r2,-12(fp)
  80ffc4:	10800810 	cmplti	r2,r2,32
  80ffc8:	103fe01e 	bne	r2,zero,80ff4c <__alt_data_end+0xff80ff4c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80ffcc:	e0bffe17 	ldw	r2,-8(fp)
}
  80ffd0:	e037883a 	mov	sp,fp
  80ffd4:	df000017 	ldw	fp,0(sp)
  80ffd8:	dec00104 	addi	sp,sp,4
  80ffdc:	f800283a 	ret

0080ffe0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80ffe0:	defffb04 	addi	sp,sp,-20
  80ffe4:	df000415 	stw	fp,16(sp)
  80ffe8:	df000404 	addi	fp,sp,16
  80ffec:	e13ffe15 	stw	r4,-8(fp)
  80fff0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80fff4:	e0bfff17 	ldw	r2,-4(fp)
  80fff8:	10840070 	cmpltui	r2,r2,4097
  80fffc:	1000021e 	bne	r2,zero,810008 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  810000:	00840004 	movi	r2,4096
  810004:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  810008:	e0fffe17 	ldw	r3,-8(fp)
  81000c:	e0bfff17 	ldw	r2,-4(fp)
  810010:	1885883a 	add	r2,r3,r2
  810014:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  810018:	e0bffe17 	ldw	r2,-8(fp)
  81001c:	e0bffc15 	stw	r2,-16(fp)
  810020:	00000506 	br	810038 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  810024:	e0bffc17 	ldw	r2,-16(fp)
  810028:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  81002c:	e0bffc17 	ldw	r2,-16(fp)
  810030:	10800804 	addi	r2,r2,32
  810034:	e0bffc15 	stw	r2,-16(fp)
  810038:	e0fffc17 	ldw	r3,-16(fp)
  81003c:	e0bffd17 	ldw	r2,-12(fp)
  810040:	18bff836 	bltu	r3,r2,810024 <__alt_data_end+0xff810024>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  810044:	e0bffe17 	ldw	r2,-8(fp)
  810048:	108007cc 	andi	r2,r2,31
  81004c:	10000226 	beq	r2,zero,810058 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  810050:	e0bffc17 	ldw	r2,-16(fp)
  810054:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  810058:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  81005c:	e037883a 	mov	sp,fp
  810060:	df000017 	ldw	fp,0(sp)
  810064:	dec00104 	addi	sp,sp,4
  810068:	f800283a 	ret

0081006c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  81006c:	defffe04 	addi	sp,sp,-8
  810070:	df000115 	stw	fp,4(sp)
  810074:	df000104 	addi	fp,sp,4
  810078:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  81007c:	e0bfff17 	ldw	r2,-4(fp)
  810080:	10bffe84 	addi	r2,r2,-6
  810084:	10c00428 	cmpgeui	r3,r2,16
  810088:	18001a1e 	bne	r3,zero,8100f4 <alt_exception_cause_generated_bad_addr+0x88>
  81008c:	100690ba 	slli	r3,r2,2
  810090:	00802074 	movhi	r2,129
  810094:	10802904 	addi	r2,r2,164
  810098:	1885883a 	add	r2,r3,r2
  81009c:	10800017 	ldw	r2,0(r2)
  8100a0:	1000683a 	jmp	r2
  8100a4:	008100e4 	muli	r2,zero,1027
  8100a8:	008100e4 	muli	r2,zero,1027
  8100ac:	008100f4 	movhi	r2,1027
  8100b0:	008100f4 	movhi	r2,1027
  8100b4:	008100f4 	movhi	r2,1027
  8100b8:	008100e4 	muli	r2,zero,1027
  8100bc:	008100ec 	andhi	r2,zero,1027
  8100c0:	008100f4 	movhi	r2,1027
  8100c4:	008100e4 	muli	r2,zero,1027
  8100c8:	008100e4 	muli	r2,zero,1027
  8100cc:	008100f4 	movhi	r2,1027
  8100d0:	008100e4 	muli	r2,zero,1027
  8100d4:	008100ec 	andhi	r2,zero,1027
  8100d8:	008100f4 	movhi	r2,1027
  8100dc:	008100f4 	movhi	r2,1027
  8100e0:	008100e4 	muli	r2,zero,1027
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  8100e4:	00800044 	movi	r2,1
  8100e8:	00000306 	br	8100f8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  8100ec:	0005883a 	mov	r2,zero
  8100f0:	00000106 	br	8100f8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  8100f4:	0005883a 	mov	r2,zero
  }
}
  8100f8:	e037883a 	mov	sp,fp
  8100fc:	df000017 	ldw	fp,0(sp)
  810100:	dec00104 	addi	sp,sp,4
  810104:	f800283a 	ret

00810108 <atexit>:
  810108:	200b883a 	mov	r5,r4
  81010c:	000d883a 	mov	r6,zero
  810110:	0009883a 	mov	r4,zero
  810114:	000f883a 	mov	r7,zero
  810118:	08101d01 	jmpi	8101d0 <__register_exitproc>

0081011c <exit>:
  81011c:	defffe04 	addi	sp,sp,-8
  810120:	000b883a 	mov	r5,zero
  810124:	dc000015 	stw	r16,0(sp)
  810128:	dfc00115 	stw	ra,4(sp)
  81012c:	2021883a 	mov	r16,r4
  810130:	08102e40 	call	8102e4 <__call_exitprocs>
  810134:	00802074 	movhi	r2,129
  810138:	1085f704 	addi	r2,r2,6108
  81013c:	11000017 	ldw	r4,0(r2)
  810140:	20800f17 	ldw	r2,60(r4)
  810144:	10000126 	beq	r2,zero,81014c <exit+0x30>
  810148:	103ee83a 	callr	r2
  81014c:	8009883a 	mov	r4,r16
  810150:	08104780 	call	810478 <_exit>

00810154 <memcmp>:
  810154:	01c000c4 	movi	r7,3
  810158:	3980192e 	bgeu	r7,r6,8101c0 <memcmp+0x6c>
  81015c:	2144b03a 	or	r2,r4,r5
  810160:	11c4703a 	and	r2,r2,r7
  810164:	10000f26 	beq	r2,zero,8101a4 <memcmp+0x50>
  810168:	20800003 	ldbu	r2,0(r4)
  81016c:	28c00003 	ldbu	r3,0(r5)
  810170:	10c0151e 	bne	r2,r3,8101c8 <memcmp+0x74>
  810174:	31bfff84 	addi	r6,r6,-2
  810178:	01ffffc4 	movi	r7,-1
  81017c:	00000406 	br	810190 <memcmp+0x3c>
  810180:	20800003 	ldbu	r2,0(r4)
  810184:	28c00003 	ldbu	r3,0(r5)
  810188:	31bfffc4 	addi	r6,r6,-1
  81018c:	10c00e1e 	bne	r2,r3,8101c8 <memcmp+0x74>
  810190:	21000044 	addi	r4,r4,1
  810194:	29400044 	addi	r5,r5,1
  810198:	31fff91e 	bne	r6,r7,810180 <__alt_data_end+0xff810180>
  81019c:	0005883a 	mov	r2,zero
  8101a0:	f800283a 	ret
  8101a4:	20c00017 	ldw	r3,0(r4)
  8101a8:	28800017 	ldw	r2,0(r5)
  8101ac:	1880041e 	bne	r3,r2,8101c0 <memcmp+0x6c>
  8101b0:	31bfff04 	addi	r6,r6,-4
  8101b4:	21000104 	addi	r4,r4,4
  8101b8:	29400104 	addi	r5,r5,4
  8101bc:	39bff936 	bltu	r7,r6,8101a4 <__alt_data_end+0xff8101a4>
  8101c0:	303fe91e 	bne	r6,zero,810168 <__alt_data_end+0xff810168>
  8101c4:	003ff506 	br	81019c <__alt_data_end+0xff81019c>
  8101c8:	10c5c83a 	sub	r2,r2,r3
  8101cc:	f800283a 	ret

008101d0 <__register_exitproc>:
  8101d0:	00802074 	movhi	r2,129
  8101d4:	defffa04 	addi	sp,sp,-24
  8101d8:	1085f704 	addi	r2,r2,6108
  8101dc:	dc000315 	stw	r16,12(sp)
  8101e0:	14000017 	ldw	r16,0(r2)
  8101e4:	dc400415 	stw	r17,16(sp)
  8101e8:	dfc00515 	stw	ra,20(sp)
  8101ec:	80805217 	ldw	r2,328(r16)
  8101f0:	2023883a 	mov	r17,r4
  8101f4:	10003626 	beq	r2,zero,8102d0 <__register_exitproc+0x100>
  8101f8:	10c00117 	ldw	r3,4(r2)
  8101fc:	010007c4 	movi	r4,31
  810200:	20c00e16 	blt	r4,r3,81023c <__register_exitproc+0x6c>
  810204:	1a400044 	addi	r9,r3,1
  810208:	8800211e 	bne	r17,zero,810290 <__register_exitproc+0xc0>
  81020c:	18c00084 	addi	r3,r3,2
  810210:	18c7883a 	add	r3,r3,r3
  810214:	18c7883a 	add	r3,r3,r3
  810218:	12400115 	stw	r9,4(r2)
  81021c:	10c7883a 	add	r3,r2,r3
  810220:	19400015 	stw	r5,0(r3)
  810224:	0005883a 	mov	r2,zero
  810228:	dfc00517 	ldw	ra,20(sp)
  81022c:	dc400417 	ldw	r17,16(sp)
  810230:	dc000317 	ldw	r16,12(sp)
  810234:	dec00604 	addi	sp,sp,24
  810238:	f800283a 	ret
  81023c:	00800034 	movhi	r2,0
  810240:	10800004 	addi	r2,r2,0
  810244:	10002526 	beq	r2,zero,8102dc <__register_exitproc+0x10c>
  810248:	01006404 	movi	r4,400
  81024c:	d9400015 	stw	r5,0(sp)
  810250:	d9800115 	stw	r6,4(sp)
  810254:	d9c00215 	stw	r7,8(sp)
  810258:	00000000 	call	0 <__reset-0x800000>
  81025c:	d9400017 	ldw	r5,0(sp)
  810260:	d9800117 	ldw	r6,4(sp)
  810264:	d9c00217 	ldw	r7,8(sp)
  810268:	10001c26 	beq	r2,zero,8102dc <__register_exitproc+0x10c>
  81026c:	80c05217 	ldw	r3,328(r16)
  810270:	10000115 	stw	zero,4(r2)
  810274:	02400044 	movi	r9,1
  810278:	10c00015 	stw	r3,0(r2)
  81027c:	80805215 	stw	r2,328(r16)
  810280:	10006215 	stw	zero,392(r2)
  810284:	10006315 	stw	zero,396(r2)
  810288:	0007883a 	mov	r3,zero
  81028c:	883fdf26 	beq	r17,zero,81020c <__alt_data_end+0xff81020c>
  810290:	18d1883a 	add	r8,r3,r3
  810294:	4211883a 	add	r8,r8,r8
  810298:	1211883a 	add	r8,r2,r8
  81029c:	41802215 	stw	r6,136(r8)
  8102a0:	01000044 	movi	r4,1
  8102a4:	11806217 	ldw	r6,392(r2)
  8102a8:	20c8983a 	sll	r4,r4,r3
  8102ac:	310cb03a 	or	r6,r6,r4
  8102b0:	11806215 	stw	r6,392(r2)
  8102b4:	41c04215 	stw	r7,264(r8)
  8102b8:	01800084 	movi	r6,2
  8102bc:	89bfd31e 	bne	r17,r6,81020c <__alt_data_end+0xff81020c>
  8102c0:	11806317 	ldw	r6,396(r2)
  8102c4:	3108b03a 	or	r4,r6,r4
  8102c8:	11006315 	stw	r4,396(r2)
  8102cc:	003fcf06 	br	81020c <__alt_data_end+0xff81020c>
  8102d0:	80805304 	addi	r2,r16,332
  8102d4:	80805215 	stw	r2,328(r16)
  8102d8:	003fc706 	br	8101f8 <__alt_data_end+0xff8101f8>
  8102dc:	00bfffc4 	movi	r2,-1
  8102e0:	003fd106 	br	810228 <__alt_data_end+0xff810228>

008102e4 <__call_exitprocs>:
  8102e4:	00802074 	movhi	r2,129
  8102e8:	1085f704 	addi	r2,r2,6108
  8102ec:	10800017 	ldw	r2,0(r2)
  8102f0:	defff404 	addi	sp,sp,-48
  8102f4:	dd800815 	stw	r22,32(sp)
  8102f8:	d8800015 	stw	r2,0(sp)
  8102fc:	10805204 	addi	r2,r2,328
  810300:	dd000615 	stw	r20,24(sp)
  810304:	dc800415 	stw	r18,16(sp)
  810308:	dfc00b15 	stw	ra,44(sp)
  81030c:	df000a15 	stw	fp,40(sp)
  810310:	ddc00915 	stw	r23,36(sp)
  810314:	dd400715 	stw	r21,28(sp)
  810318:	dcc00515 	stw	r19,20(sp)
  81031c:	dc400315 	stw	r17,12(sp)
  810320:	dc000215 	stw	r16,8(sp)
  810324:	2025883a 	mov	r18,r4
  810328:	2829883a 	mov	r20,r5
  81032c:	d8800115 	stw	r2,4(sp)
  810330:	05bfffc4 	movi	r22,-1
  810334:	d8800017 	ldw	r2,0(sp)
  810338:	14c05217 	ldw	r19,328(r2)
  81033c:	98001d26 	beq	r19,zero,8103b4 <__call_exitprocs+0xd0>
  810340:	dd400117 	ldw	r21,4(sp)
  810344:	98800117 	ldw	r2,4(r19)
  810348:	173fffc4 	addi	fp,r2,-1
  81034c:	e0000d16 	blt	fp,zero,810384 <__call_exitprocs+0xa0>
  810350:	14000044 	addi	r16,r2,1
  810354:	8421883a 	add	r16,r16,r16
  810358:	8421883a 	add	r16,r16,r16
  81035c:	84402004 	addi	r17,r16,128
  810360:	9c63883a 	add	r17,r19,r17
  810364:	9c21883a 	add	r16,r19,r16
  810368:	a0001e26 	beq	r20,zero,8103e4 <__call_exitprocs+0x100>
  81036c:	80804017 	ldw	r2,256(r16)
  810370:	15001c26 	beq	r2,r20,8103e4 <__call_exitprocs+0x100>
  810374:	e73fffc4 	addi	fp,fp,-1
  810378:	843fff04 	addi	r16,r16,-4
  81037c:	8c7fff04 	addi	r17,r17,-4
  810380:	e5bff91e 	bne	fp,r22,810368 <__alt_data_end+0xff810368>
  810384:	00800034 	movhi	r2,0
  810388:	10800004 	addi	r2,r2,0
  81038c:	10000926 	beq	r2,zero,8103b4 <__call_exitprocs+0xd0>
  810390:	98800117 	ldw	r2,4(r19)
  810394:	1000311e 	bne	r2,zero,81045c <__call_exitprocs+0x178>
  810398:	98800017 	ldw	r2,0(r19)
  81039c:	10003426 	beq	r2,zero,810470 <__call_exitprocs+0x18c>
  8103a0:	9809883a 	mov	r4,r19
  8103a4:	a8800015 	stw	r2,0(r21)
  8103a8:	00000000 	call	0 <__reset-0x800000>
  8103ac:	acc00017 	ldw	r19,0(r21)
  8103b0:	983fe41e 	bne	r19,zero,810344 <__alt_data_end+0xff810344>
  8103b4:	dfc00b17 	ldw	ra,44(sp)
  8103b8:	df000a17 	ldw	fp,40(sp)
  8103bc:	ddc00917 	ldw	r23,36(sp)
  8103c0:	dd800817 	ldw	r22,32(sp)
  8103c4:	dd400717 	ldw	r21,28(sp)
  8103c8:	dd000617 	ldw	r20,24(sp)
  8103cc:	dcc00517 	ldw	r19,20(sp)
  8103d0:	dc800417 	ldw	r18,16(sp)
  8103d4:	dc400317 	ldw	r17,12(sp)
  8103d8:	dc000217 	ldw	r16,8(sp)
  8103dc:	dec00c04 	addi	sp,sp,48
  8103e0:	f800283a 	ret
  8103e4:	98800117 	ldw	r2,4(r19)
  8103e8:	80c00017 	ldw	r3,0(r16)
  8103ec:	10bfffc4 	addi	r2,r2,-1
  8103f0:	17001526 	beq	r2,fp,810448 <__call_exitprocs+0x164>
  8103f4:	80000015 	stw	zero,0(r16)
  8103f8:	183fde26 	beq	r3,zero,810374 <__alt_data_end+0xff810374>
  8103fc:	00800044 	movi	r2,1
  810400:	1708983a 	sll	r4,r2,fp
  810404:	98806217 	ldw	r2,392(r19)
  810408:	9dc00117 	ldw	r23,4(r19)
  81040c:	2084703a 	and	r2,r4,r2
  810410:	1000061e 	bne	r2,zero,81042c <__call_exitprocs+0x148>
  810414:	183ee83a 	callr	r3
  810418:	98800117 	ldw	r2,4(r19)
  81041c:	15ffc51e 	bne	r2,r23,810334 <__alt_data_end+0xff810334>
  810420:	a8800017 	ldw	r2,0(r21)
  810424:	14ffd326 	beq	r2,r19,810374 <__alt_data_end+0xff810374>
  810428:	003fc206 	br	810334 <__alt_data_end+0xff810334>
  81042c:	98806317 	ldw	r2,396(r19)
  810430:	2084703a 	and	r2,r4,r2
  810434:	1000061e 	bne	r2,zero,810450 <__call_exitprocs+0x16c>
  810438:	89400017 	ldw	r5,0(r17)
  81043c:	9009883a 	mov	r4,r18
  810440:	183ee83a 	callr	r3
  810444:	003ff406 	br	810418 <__alt_data_end+0xff810418>
  810448:	9f000115 	stw	fp,4(r19)
  81044c:	003fea06 	br	8103f8 <__alt_data_end+0xff8103f8>
  810450:	89000017 	ldw	r4,0(r17)
  810454:	183ee83a 	callr	r3
  810458:	003fef06 	br	810418 <__alt_data_end+0xff810418>
  81045c:	98800017 	ldw	r2,0(r19)
  810460:	982b883a 	mov	r21,r19
  810464:	1027883a 	mov	r19,r2
  810468:	983fb61e 	bne	r19,zero,810344 <__alt_data_end+0xff810344>
  81046c:	003fd106 	br	8103b4 <__alt_data_end+0xff8103b4>
  810470:	0005883a 	mov	r2,zero
  810474:	003ffa06 	br	810460 <__alt_data_end+0xff810460>

00810478 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  810478:	defffd04 	addi	sp,sp,-12
  81047c:	df000215 	stw	fp,8(sp)
  810480:	df000204 	addi	fp,sp,8
  810484:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  810488:	0001883a 	nop
  81048c:	e0bfff17 	ldw	r2,-4(fp)
  810490:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  810494:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  810498:	10000226 	beq	r2,zero,8104a4 <_exit+0x2c>
    ALT_SIM_FAIL();
  81049c:	002af070 	cmpltui	zero,zero,43969
  8104a0:	00000106 	br	8104a8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  8104a4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8104a8:	003fff06 	br	8104a8 <__alt_data_end+0xff8104a8>
