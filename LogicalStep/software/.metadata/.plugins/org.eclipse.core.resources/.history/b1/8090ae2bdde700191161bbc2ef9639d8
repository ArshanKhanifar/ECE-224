/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include <unistd.h>
#include <stdbool.h>
#include "lab_1.h"

#define DEBUG

typedef enum {
	LOG_LEVEL_ERROR = 0,
	LOG_LEVEL_INFO,
	LOG_LEVEL_DEBUG,
	NUM_LOG_LEVELS
} LogLevel;

#define LOG_LEVEL_VERBOSITY LOG_LEVEL_INFO

char *log_level_lookup[NUM_LOG_LEVELS] = {
	[LOG_LEVEL_ERROR] = "ERROR",
	[LOG_LEVEL_INFO] = "INFO",
	[LOG_LEVEL_DEBUG] = "DEBUG"
};

#define LOG(level, fmt, ...) \
	do { \
		if (level <= LOG_LEVEL_VERBOSITY) { \
			printf("[%s] " fmt, log_level_lookup[level], ##__VA_ARGS__); \
		} \
	} while (0)

#define LOG_DEBUG(...) LOG(LOG_LEVEL_DEBUG, ##__VA_ARGS__)
#define LOG_ERROR(...) LOG(LOG_LEVEL_ERROR, ##__VA_ARGS__)
#define LOG_INFO(...) LOG(LOG_LEVEL_INFO, ##__VA_ARGS__)

/*/
 * Background task
 */
int background(void) {
	#ifdef DEBUG
	int leds = IORD(LED_PIO_BASE, 0);
	leds |= 1;
	IOWR(LED_PIO_BASE, 0, leds);
	#endif
	int j;
	int x = 0;
	int grainsize = 4;
	int g_taskProcessed = 0;

	for(j = 0; j < grainsize; j++)
	{
		g_taskProcessed++;
	}

	#ifdef DEBUG
	leds = IORD(LED_PIO_BASE, 0);
	leds &= (~1);
	IOWR(LED_PIO_BASE, 0, 0);
	#endif
	return x;
}

volatile int egm_edge_capture;

typedef enum {
	EGM_REG_ENABLE = 0,
	EGM_REG_BUSY,
	EGM_REG_PERIOD,
	EGM_REG_PULSE_WIDTH,
	EGM_REG_AVERAGE_LATENCY,
	EGM_REG_MISSED,
	EGM_REG_MULTI,
	NUM_EGM_REGS
} EgmRegister;


static void handle_egm_interrupts(void* context, alt_u32 id) {
	#ifdef DEBUG
	int leds = IORD(LED_PIO_BASE, 0);
	leds |= (1<<2);
	IOWR(LED_PIO_BASE, 0, leds);
	#endif
	// Respond to EGM's response register. Fastest way possible is to set it to 1, then immediately to 0.
	IOWR_ALTERA_AVALON_PIO_DATA(RESPONSE_OUT_BASE, 0x1);
	IOWR_ALTERA_AVALON_PIO_DATA(RESPONSE_OUT_BASE, 0x0);
	// Reset the edge capture register.
	#ifdef DEBUG
	leds = IORD(LED_PIO_BASE, 0);
	leds &= (~(1 << 2));
	IOWR(LED_PIO_BASE, 0, 0);
	#endif
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(STIMULUS_IN_BASE, 0);

}


static void init_egm_pio() {
	void* edge_capture_ptr = (void*) &egm_edge_capture;
	/* Enable the Stimulus PIO interrupt. */
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(STIMULUS_IN_BASE, 0x1);
	/* Reset the edge capture register. */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(STIMULUS_IN_BASE, 0x0);
	alt_irq_register( STIMULUS_IN_IRQ, edge_capture_ptr, handle_egm_interrupts);
}

void configure_egm(alt_u16 period) {
	// disabling EGM first
	IOWR(EGM_BASE, EGM_REG_ENABLE, 0x0);
	// set period
	IOWR(EGM_BASE, EGM_REG_PERIOD, period);
	// set pulse width
	alt_u16 pulse_width = period / 2;
	IOWR(EGM_BASE, EGM_REG_PULSE_WIDTH, pulse_width);
	// enable EGM
	LOG_DEBUG("Configuring EGM: period: %d, pulse width: %d\n", period, pulse_width);
	LOG_DEBUG("Enabling EGM\n");
	IOWR(EGM_BASE, EGM_REG_ENABLE, 0x1);
}


typedef enum {
	LAB_MODE_INTERRUPT = 0,
	LAB_MODE_POLLING,
	NUM_LAB_MODES
} LabMode;

bool check_if_egm_done(void) {
	return IORD(EGM_BASE, EGM_REG_BUSY) == 0x0;
}

alt_u32 get_busy_with_background_task(void) {
	LOG_DEBUG("Getting busy\n");
	alt_u32 task_counter = 0;
	while(true) {
		if (check_if_egm_done()) {
			LOG_DEBUG("EGM is done!\n");
			break;
		}
		background();
		task_counter++;
	}
	return task_counter;
}

void get_egm_test_results(alt_u16 period, alt_u32 bg_tasks_run) {
	// period, pulse width, bg_tasks_run, avg_latency, missed, multi_pulses
	alt_u16 pulse_width = period/2;
	alt_u16 avg_latency = IORD(EGM_BASE, EGM_REG_AVERAGE_LATENCY);
	alt_u16 missed = IORD(EGM_BASE, EGM_REG_MISSED);
	alt_u16 multi_pulses = IORD(EGM_BASE, EGM_REG_MULTI);
	LOG_INFO("%d, %d, %d, %d, %d, %d\n", period, pulse_width, bg_tasks_run, avg_latency, missed, multi_pulses);
}

LabMode determine_mode(void) {
	volatile char * switch_pio_address = SWITCH_PIO_BASE;
	int switch_values = *switch_pio_address;
	LabMode mode = switch_values & 1;
	LOG_INFO("lab mode is %s\n", (mode) ? "Polling" : "Interrupt" );
	return mode;
}

void respond() {
	IOWR_ALTERA_AVALON_PIO_DATA(RESPONSE_OUT_BASE, 0x1);
	IOWR_ALTERA_AVALON_PIO_DATA(RESPONSE_OUT_BASE, 0x0);
}

// waits until impulse received, responds, returns
void wait_until_impulse_received_and_respond(void) {
	while (IORD_ALTERA_AVALON_PIO_DATA(STIMULUS_IN_BASE) == 0) {}
	respond();
}

alt_u16 count_safe_number_of_background_tasks(alt_u16 period) {
	if (period < 700) {
		return 0;
	}
	alt_u16 task_counter = 0;
	bool passed_first_half_cycle = false;
	//configure the EGM
	configure_egm(period);
	// begin running background tasks
	while (true) {
		// check if we passed the first half cycle.
		if (IORD_ALTERA_AVALON_PIO_DATA(STIMULUS_IN_BASE) == 0) {
			passed_first_half_cycle = true;
		}
		// check if stimulus is high again.
		if (passed_first_half_cycle && (IORD_ALTERA_AVALON_PIO_DATA(STIMULUS_IN_BASE) == 1)) {
			respond();
			break;
		}
		background();
		task_counter+=1;
	}
	alt_u16 safe_num = task_counter - 1;
	LOG_DEBUG("Safe number of tasks: %d\n", safe_num);
	return safe_num;
}


// Safe number of tasks we can run to ensure next pulse is detected.
alt_u32 get_busy_with_specified_number_of_background_tasks(alt_u16 safe_num_tasks) {
	LOG_DEBUG("Getting busy with %d background tasks\n", safe_num_tasks);
	alt_u32 task_counter = 0;
	while(true) {
		alt_u16 count;
		for (count = 0; count < safe_num_tasks; count++) {
			background();
			task_counter++;
		}
		if (check_if_egm_done()) {
			LOG_DEBUG("EGM is done!\n");
			break;
		}
		wait_until_impulse_received_and_respond();
		if (check_if_egm_done()) {
			LOG_DEBUG("EGM is done!\n");
			break;
		}
	}
	return task_counter;
}

int main() {
	LabMode mode = determine_mode();
	LOG_INFO("period, pulse_width, bg_tasks_run, avg_latency, missed, multi_pulses\n");
	if (mode == LAB_MODE_INTERRUPT) {
		init_egm_pio();
		alt_u16 period;
		alt_u16 start_period = 2, end_period = 5000;
		for (period = start_period; period <= end_period; period += 2) {
			configure_egm(period);
			alt_u32 num_tasks = get_busy_with_background_task();
			get_egm_test_results(period, num_tasks);
		}
	} else {
		alt_u16 period;
		alt_u16 start_period = 2, end_period = 5000;
		for (period = start_period; period <= end_period; period += 2) {
			// Characterization: find number of background tasks
			alt_u16 safe_num_tasks = count_safe_number_of_background_tasks(period);
			alt_u32 num_tasks = get_busy_with_specified_number_of_background_tasks(safe_num_tasks);
			LOG_DEBUG("done running background tasks\n");
			get_egm_test_results(period, num_tasks);
		}
	}
	LOG_INFO("Bye\n");
	return 0;
}
